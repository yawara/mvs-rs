/* automatically generated by rust-bindgen */
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]

pub const MV_GVSP_PIX_MONO: u32 = 16777216;
pub const MV_GVSP_PIX_RGB: u32 = 33554432;
pub const MV_GVSP_PIX_COLOR: u32 = 33554432;
pub const MV_GVSP_PIX_CUSTOM: u32 = 2147483648;
pub const MV_GVSP_PIX_COLOR_MASK: u32 = 4278190080;
pub const MV_GVSP_PIX_EFFECTIVE_PIXEL_SIZE_MASK: u32 = 16711680;
pub const MV_GVSP_PIX_EFFECTIVE_PIXEL_SIZE_SHIFT: u32 = 16;
pub const MV_GVSP_PIX_ID_MASK: u32 = 65535;
pub const MV_GVSP_PIX_COUNT: u32 = 70;
pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const MV_UNKNOW_DEVICE: u32 = 0;
pub const MV_GIGE_DEVICE: u32 = 1;
pub const MV_1394_DEVICE: u32 = 2;
pub const MV_USB_DEVICE: u32 = 4;
pub const MV_CAMERALINK_DEVICE: u32 = 8;
pub const INFO_MAX_BUFFER_SIZE: u32 = 64;
pub const MV_MAX_TLS_NUM: u32 = 8;
pub const MV_MAX_DEVICE_NUM: u32 = 256;
pub const MV_ACCESS_Exclusive: u32 = 1;
pub const MV_ACCESS_ExclusiveWithSwitch: u32 = 2;
pub const MV_ACCESS_Control: u32 = 3;
pub const MV_ACCESS_ControlWithSwitch: u32 = 4;
pub const MV_ACCESS_ControlSwitchEnable: u32 = 5;
pub const MV_ACCESS_ControlSwitchEnableWithKey: u32 = 6;
pub const MV_ACCESS_Monitor: u32 = 7;
pub const MV_MATCH_TYPE_NET_DETECT: u32 = 1;
pub const MV_MATCH_TYPE_USB_DETECT: u32 = 2;
pub const MV_IP_CFG_STATIC: u32 = 83886080;
pub const MV_IP_CFG_DHCP: u32 = 100663296;
pub const MV_IP_CFG_LLA: u32 = 67108864;
pub const MV_NET_TRANS_DRIVER: u32 = 1;
pub const MV_NET_TRANS_SOCKET: u32 = 2;
pub const MV_EXCEPTION_DEV_DISCONNECT: u32 = 32769;
pub const MV_EXCEPTION_VERSION_CHECK: u32 = 32770;
pub const MAX_EVENT_NAME_SIZE: u32 = 128;
pub const MV_MAX_XML_SYMBOLIC_NUM: u32 = 64;
pub const MV_OK: u32 = 0;
pub const MV_E_HANDLE: u32 = 2147483648;
pub const MV_E_SUPPORT: u32 = 2147483649;
pub const MV_E_BUFOVER: u32 = 2147483650;
pub const MV_E_CALLORDER: u32 = 2147483651;
pub const MV_E_PARAMETER: u32 = 2147483652;
pub const MV_E_RESOURCE: u32 = 2147483654;
pub const MV_E_NODATA: u32 = 2147483655;
pub const MV_E_PRECONDITION: u32 = 2147483656;
pub const MV_E_VERSION: u32 = 2147483657;
pub const MV_E_NOENOUGH_BUF: u32 = 2147483658;
pub const MV_E_ABNORMAL_IMAGE: u32 = 2147483659;
pub const MV_E_LOAD_LIBRARY: u32 = 2147483660;
pub const MV_E_NOOUTBUF: u32 = 2147483661;
pub const MV_E_UNKNOW: u32 = 2147483903;
pub const MV_E_GC_GENERIC: u32 = 2147483904;
pub const MV_E_GC_ARGUMENT: u32 = 2147483905;
pub const MV_E_GC_RANGE: u32 = 2147483906;
pub const MV_E_GC_PROPERTY: u32 = 2147483907;
pub const MV_E_GC_RUNTIME: u32 = 2147483908;
pub const MV_E_GC_LOGICAL: u32 = 2147483909;
pub const MV_E_GC_ACCESS: u32 = 2147483910;
pub const MV_E_GC_TIMEOUT: u32 = 2147483911;
pub const MV_E_GC_DYNAMICCAST: u32 = 2147483912;
pub const MV_E_GC_UNKNOW: u32 = 2147484159;
pub const MV_E_NOT_IMPLEMENTED: u32 = 2147484160;
pub const MV_E_INVALID_ADDRESS: u32 = 2147484161;
pub const MV_E_WRITE_PROTECT: u32 = 2147484162;
pub const MV_E_ACCESS_DENIED: u32 = 2147484163;
pub const MV_E_BUSY: u32 = 2147484164;
pub const MV_E_PACKET: u32 = 2147484165;
pub const MV_E_NETER: u32 = 2147484166;
pub const MV_E_IP_CONFLICT: u32 = 2147484193;
pub const MV_E_USB_READ: u32 = 2147484416;
pub const MV_E_USB_WRITE: u32 = 2147484417;
pub const MV_E_USB_DEVICE: u32 = 2147484418;
pub const MV_E_USB_GENICAM: u32 = 2147484419;
pub const MV_E_USB_BANDWIDTH: u32 = 2147484420;
pub const MV_E_USB_DRIVER: u32 = 2147484421;
pub const MV_E_USB_UNKNOW: u32 = 2147484671;
pub const MV_E_UPG_FILE_MISMATCH: u32 = 2147484672;
pub const MV_E_UPG_LANGUSGE_MISMATCH: u32 = 2147484673;
pub const MV_E_UPG_CONFLICT: u32 = 2147484674;
pub const MV_E_UPG_INNER_ERR: u32 = 2147484675;
pub const MV_E_UPG_UNKNOW: u32 = 2147484927;
pub const MV_MAX_XML_NODE_NUM_C: u32 = 128;
pub const MV_MAX_XML_NODE_STRLEN_C: u32 = 64;
pub const MV_MAX_XML_STRVALUE_STRLEN_C: u32 = 64;
pub const MV_MAX_XML_DISC_STRLEN_C: u32 = 512;
pub const MV_MAX_XML_ENTRY_NUM: u32 = 10;
pub const MV_MAX_XML_PARENTS_NUM: u32 = 8;
pub const MV_MAX_XML_SYMBOLIC_STRLEN_C: u32 = 64;
pub const MvGvspPixelType_PixelType_Gvsp_Undefined: MvGvspPixelType = -1;
pub const MvGvspPixelType_PixelType_Gvsp_Mono1p: MvGvspPixelType = 16842807;
pub const MvGvspPixelType_PixelType_Gvsp_Mono2p: MvGvspPixelType = 16908344;
pub const MvGvspPixelType_PixelType_Gvsp_Mono4p: MvGvspPixelType = 17039417;
pub const MvGvspPixelType_PixelType_Gvsp_Mono8: MvGvspPixelType = 17301505;
pub const MvGvspPixelType_PixelType_Gvsp_Mono8_Signed: MvGvspPixelType = 17301506;
pub const MvGvspPixelType_PixelType_Gvsp_Mono10: MvGvspPixelType = 17825795;
pub const MvGvspPixelType_PixelType_Gvsp_Mono10_Packed: MvGvspPixelType = 17563652;
pub const MvGvspPixelType_PixelType_Gvsp_Mono12: MvGvspPixelType = 17825797;
pub const MvGvspPixelType_PixelType_Gvsp_Mono12_Packed: MvGvspPixelType = 17563654;
pub const MvGvspPixelType_PixelType_Gvsp_Mono14: MvGvspPixelType = 17825829;
pub const MvGvspPixelType_PixelType_Gvsp_Mono16: MvGvspPixelType = 17825799;
pub const MvGvspPixelType_PixelType_Gvsp_BayerGR8: MvGvspPixelType = 17301512;
pub const MvGvspPixelType_PixelType_Gvsp_BayerRG8: MvGvspPixelType = 17301513;
pub const MvGvspPixelType_PixelType_Gvsp_BayerGB8: MvGvspPixelType = 17301514;
pub const MvGvspPixelType_PixelType_Gvsp_BayerBG8: MvGvspPixelType = 17301515;
pub const MvGvspPixelType_PixelType_Gvsp_BayerGR10: MvGvspPixelType = 17825804;
pub const MvGvspPixelType_PixelType_Gvsp_BayerRG10: MvGvspPixelType = 17825805;
pub const MvGvspPixelType_PixelType_Gvsp_BayerGB10: MvGvspPixelType = 17825806;
pub const MvGvspPixelType_PixelType_Gvsp_BayerBG10: MvGvspPixelType = 17825807;
pub const MvGvspPixelType_PixelType_Gvsp_BayerGR12: MvGvspPixelType = 17825808;
pub const MvGvspPixelType_PixelType_Gvsp_BayerRG12: MvGvspPixelType = 17825809;
pub const MvGvspPixelType_PixelType_Gvsp_BayerGB12: MvGvspPixelType = 17825810;
pub const MvGvspPixelType_PixelType_Gvsp_BayerBG12: MvGvspPixelType = 17825811;
pub const MvGvspPixelType_PixelType_Gvsp_BayerGR10_Packed: MvGvspPixelType = 17563686;
pub const MvGvspPixelType_PixelType_Gvsp_BayerRG10_Packed: MvGvspPixelType = 17563687;
pub const MvGvspPixelType_PixelType_Gvsp_BayerGB10_Packed: MvGvspPixelType = 17563688;
pub const MvGvspPixelType_PixelType_Gvsp_BayerBG10_Packed: MvGvspPixelType = 17563689;
pub const MvGvspPixelType_PixelType_Gvsp_BayerGR12_Packed: MvGvspPixelType = 17563690;
pub const MvGvspPixelType_PixelType_Gvsp_BayerRG12_Packed: MvGvspPixelType = 17563691;
pub const MvGvspPixelType_PixelType_Gvsp_BayerGB12_Packed: MvGvspPixelType = 17563692;
pub const MvGvspPixelType_PixelType_Gvsp_BayerBG12_Packed: MvGvspPixelType = 17563693;
pub const MvGvspPixelType_PixelType_Gvsp_BayerGR16: MvGvspPixelType = 17825838;
pub const MvGvspPixelType_PixelType_Gvsp_BayerRG16: MvGvspPixelType = 17825839;
pub const MvGvspPixelType_PixelType_Gvsp_BayerGB16: MvGvspPixelType = 17825840;
pub const MvGvspPixelType_PixelType_Gvsp_BayerBG16: MvGvspPixelType = 17825841;
pub const MvGvspPixelType_PixelType_Gvsp_RGB8_Packed: MvGvspPixelType = 35127316;
pub const MvGvspPixelType_PixelType_Gvsp_BGR8_Packed: MvGvspPixelType = 35127317;
pub const MvGvspPixelType_PixelType_Gvsp_RGBA8_Packed: MvGvspPixelType = 35651606;
pub const MvGvspPixelType_PixelType_Gvsp_BGRA8_Packed: MvGvspPixelType = 35651607;
pub const MvGvspPixelType_PixelType_Gvsp_RGB10_Packed: MvGvspPixelType = 36700184;
pub const MvGvspPixelType_PixelType_Gvsp_BGR10_Packed: MvGvspPixelType = 36700185;
pub const MvGvspPixelType_PixelType_Gvsp_RGB12_Packed: MvGvspPixelType = 36700186;
pub const MvGvspPixelType_PixelType_Gvsp_BGR12_Packed: MvGvspPixelType = 36700187;
pub const MvGvspPixelType_PixelType_Gvsp_RGB16_Packed: MvGvspPixelType = 36700211;
pub const MvGvspPixelType_PixelType_Gvsp_RGB10V1_Packed: MvGvspPixelType = 35651612;
pub const MvGvspPixelType_PixelType_Gvsp_RGB10V2_Packed: MvGvspPixelType = 35651613;
pub const MvGvspPixelType_PixelType_Gvsp_RGB12V1_Packed: MvGvspPixelType = 35913780;
pub const MvGvspPixelType_PixelType_Gvsp_RGB565_Packed: MvGvspPixelType = 34603061;
pub const MvGvspPixelType_PixelType_Gvsp_BGR565_Packed: MvGvspPixelType = 34603062;
pub const MvGvspPixelType_PixelType_Gvsp_YUV411_Packed: MvGvspPixelType = 34340894;
pub const MvGvspPixelType_PixelType_Gvsp_YUV422_Packed: MvGvspPixelType = 34603039;
pub const MvGvspPixelType_PixelType_Gvsp_YUV422_YUYV_Packed: MvGvspPixelType = 34603058;
pub const MvGvspPixelType_PixelType_Gvsp_YUV444_Packed: MvGvspPixelType = 35127328;
pub const MvGvspPixelType_PixelType_Gvsp_YCBCR8_CBYCR: MvGvspPixelType = 35127354;
pub const MvGvspPixelType_PixelType_Gvsp_YCBCR422_8: MvGvspPixelType = 34603067;
pub const MvGvspPixelType_PixelType_Gvsp_YCBCR422_8_CBYCRY: MvGvspPixelType = 34603075;
pub const MvGvspPixelType_PixelType_Gvsp_YCBCR411_8_CBYYCRYY: MvGvspPixelType = 34340924;
pub const MvGvspPixelType_PixelType_Gvsp_YCBCR601_8_CBYCR: MvGvspPixelType = 35127357;
pub const MvGvspPixelType_PixelType_Gvsp_YCBCR601_422_8: MvGvspPixelType = 34603070;
pub const MvGvspPixelType_PixelType_Gvsp_YCBCR601_422_8_CBYCRY: MvGvspPixelType = 34603076;
pub const MvGvspPixelType_PixelType_Gvsp_YCBCR601_411_8_CBYYCRYY: MvGvspPixelType = 34340927;
pub const MvGvspPixelType_PixelType_Gvsp_YCBCR709_8_CBYCR: MvGvspPixelType = 35127360;
pub const MvGvspPixelType_PixelType_Gvsp_YCBCR709_422_8: MvGvspPixelType = 34603073;
pub const MvGvspPixelType_PixelType_Gvsp_YCBCR709_422_8_CBYCRY: MvGvspPixelType = 34603077;
pub const MvGvspPixelType_PixelType_Gvsp_YCBCR709_411_8_CBYYCRYY: MvGvspPixelType = 34340930;
pub const MvGvspPixelType_PixelType_Gvsp_RGB8_Planar: MvGvspPixelType = 35127329;
pub const MvGvspPixelType_PixelType_Gvsp_RGB10_Planar: MvGvspPixelType = 36700194;
pub const MvGvspPixelType_PixelType_Gvsp_RGB12_Planar: MvGvspPixelType = 36700195;
pub const MvGvspPixelType_PixelType_Gvsp_RGB16_Planar: MvGvspPixelType = 36700196;
pub const MvGvspPixelType_PixelType_Gvsp_Jpeg: MvGvspPixelType = 2149056513;
pub const MvGvspPixelType_PixelType_Gvsp_Coord3D_ABC32f: MvGvspPixelType = 39846080;
pub const MvGvspPixelType_PixelType_Gvsp_Coord3D_ABC32f_Planar: MvGvspPixelType = 39846081;
pub const MvGvspPixelType_PixelType_Gvsp_Coord3D_AC32f: MvGvspPixelType = 36176066;
pub const MvGvspPixelType_PixelType_Gvsp_COORD3D_DEPTH_PLUS_MASK: MvGvspPixelType = 2182873089;
pub const MvGvspPixelType_PixelType_Gvsp_Coord3D_ABC32: MvGvspPixelType = 2187341825;
pub const MvGvspPixelType_PixelType_Gvsp_Coord3D_AB32f: MvGvspPixelType = 2185244674;
pub const MvGvspPixelType_PixelType_Gvsp_Coord3D_AB32: MvGvspPixelType = 2185244675;
pub const MvGvspPixelType_PixelType_Gvsp_Coord3D_AC32f_64: MvGvspPixelType = 37748930;
pub const MvGvspPixelType_PixelType_Gvsp_Coord3D_AC32f_Planar: MvGvspPixelType = 37748931;
pub const MvGvspPixelType_PixelType_Gvsp_Coord3D_AC32: MvGvspPixelType = 2185244676;
pub const MvGvspPixelType_PixelType_Gvsp_Coord3D_A32f: MvGvspPixelType = 18874557;
pub const MvGvspPixelType_PixelType_Gvsp_Coord3D_A32: MvGvspPixelType = 2166370309;
pub const MvGvspPixelType_PixelType_Gvsp_Coord3D_C32f: MvGvspPixelType = 18874559;
pub const MvGvspPixelType_PixelType_Gvsp_Coord3D_C32: MvGvspPixelType = 2166370310;
pub const MvGvspPixelType_PixelType_Gvsp_Coord3D_ABC16: MvGvspPixelType = 36700345;
pub type MvGvspPixelType = i64;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type bool_ = ::std::os::raw::c_char;
#[doc = " \\~chinese GigE\u{8bbe}\u{5907}\u{4fe1}\u{606f}    \\~english GigE device info"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_GIGE_DEVICE_INFO_ {
    #[doc = "< [OUT] \\~chinese IP\u{914d}\u{7f6e}\u{9009}\u{9879}                   \\~english IP Configuration Options"]
    pub nIpCfgOption: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{5f53}\u{524d}IP\u{914d}\u{7f6e}                   \\~english IP Configuration:bit31-static bit30-dhcp bit29-lla"]
    pub nIpCfgCurrent: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{5f53}\u{524d}IP\u{5730}\u{5740}                   \\~english Current Ip"]
    pub nCurrentIp: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{5f53}\u{524d}\u{5b50}\u{7f51}\u{63a9}\u{7801}                 \\~english Curtent Subnet Mask"]
    pub nCurrentSubNetMask: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{5f53}\u{524d}\u{7f51}\u{5173}                     \\~english Current Gateway"]
    pub nDefultGateWay: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{5236}\u{9020}\u{5546}\u{540d}\u{79f0}                   \\~english Manufacturer Name"]
    pub chManufacturerName: [::std::os::raw::c_uchar; 32usize],
    #[doc = "< [OUT] \\~chinese \u{578b}\u{53f7}\u{540d}\u{79f0}                     \\~english Model Name"]
    pub chModelName: [::std::os::raw::c_uchar; 32usize],
    #[doc = "< [OUT] \\~chinese \u{8bbe}\u{5907}\u{7248}\u{672c}                     \\~english Device Version"]
    pub chDeviceVersion: [::std::os::raw::c_uchar; 32usize],
    #[doc = "< [OUT] \\~chinese \u{5236}\u{9020}\u{5546}\u{7684}\u{5177}\u{4f53}\u{4fe1}\u{606f}             \\~english Manufacturer Specific Information"]
    pub chManufacturerSpecificInfo: [::std::os::raw::c_uchar; 48usize],
    #[doc = "< [OUT] \\~chinese \u{5e8f}\u{5217}\u{53f7}                       \\~english Serial Number"]
    pub chSerialNumber: [::std::os::raw::c_uchar; 16usize],
    #[doc = "< [OUT] \\~chinese \u{7528}\u{6237}\u{81ea}\u{5b9a}\u{4e49}\u{540d}\u{79f0}               \\~english User Defined Name"]
    pub chUserDefinedName: [::std::os::raw::c_uchar; 16usize],
    #[doc = "< [OUT] \\~chinese \u{7f51}\u{53e3}IP\u{5730}\u{5740}                   \\~english NetWork IP Address"]
    pub nNetExport: ::std::os::raw::c_uint,
    #[doc = "<       \\~chinese \u{9884}\u{7559}                         \\~english Reserved"]
    pub nReserved: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout__MV_GIGE_DEVICE_INFO_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_GIGE_DEVICE_INFO_>(),
        216usize,
        concat!("Size of: ", stringify!(_MV_GIGE_DEVICE_INFO_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_GIGE_DEVICE_INFO_>(),
        4usize,
        concat!("Alignment of ", stringify!(_MV_GIGE_DEVICE_INFO_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_GIGE_DEVICE_INFO_>())).nIpCfgOption as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_GIGE_DEVICE_INFO_),
            "::",
            stringify!(nIpCfgOption)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_GIGE_DEVICE_INFO_>())).nIpCfgCurrent as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_GIGE_DEVICE_INFO_),
            "::",
            stringify!(nIpCfgCurrent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_GIGE_DEVICE_INFO_>())).nCurrentIp as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_GIGE_DEVICE_INFO_),
            "::",
            stringify!(nCurrentIp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_GIGE_DEVICE_INFO_>())).nCurrentSubNetMask as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_GIGE_DEVICE_INFO_),
            "::",
            stringify!(nCurrentSubNetMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_GIGE_DEVICE_INFO_>())).nDefultGateWay as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_GIGE_DEVICE_INFO_),
            "::",
            stringify!(nDefultGateWay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_GIGE_DEVICE_INFO_>())).chManufacturerName as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_GIGE_DEVICE_INFO_),
            "::",
            stringify!(chManufacturerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_GIGE_DEVICE_INFO_>())).chModelName as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_GIGE_DEVICE_INFO_),
            "::",
            stringify!(chModelName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_GIGE_DEVICE_INFO_>())).chDeviceVersion as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_GIGE_DEVICE_INFO_),
            "::",
            stringify!(chDeviceVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_GIGE_DEVICE_INFO_>())).chManufacturerSpecificInfo as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_GIGE_DEVICE_INFO_),
            "::",
            stringify!(chManufacturerSpecificInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_GIGE_DEVICE_INFO_>())).chSerialNumber as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_GIGE_DEVICE_INFO_),
            "::",
            stringify!(chSerialNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_GIGE_DEVICE_INFO_>())).chUserDefinedName as *const _ as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_GIGE_DEVICE_INFO_),
            "::",
            stringify!(chUserDefinedName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_GIGE_DEVICE_INFO_>())).nNetExport as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_GIGE_DEVICE_INFO_),
            "::",
            stringify!(nNetExport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_GIGE_DEVICE_INFO_>())).nReserved as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_GIGE_DEVICE_INFO_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_GIGE_DEVICE_INFO = _MV_GIGE_DEVICE_INFO_;
#[doc = " \\~chinese USB\u{8bbe}\u{5907}\u{4fe1}\u{606f}    \\~english USB device info"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_USB3_DEVICE_INFO_ {
    #[doc = "< [OUT] \\~chinese \u{63a7}\u{5236}\u{8f93}\u{5165}\u{7aef}\u{70b9}         \\~english Control input endpoint"]
    pub CrtlInEndPoint: ::std::os::raw::c_uchar,
    #[doc = "< [OUT] \\~chinese \u{63a7}\u{5236}\u{8f93}\u{51fa}\u{7aef}\u{70b9}         \\~english Control output endpoint"]
    pub CrtlOutEndPoint: ::std::os::raw::c_uchar,
    #[doc = "< [OUT] \\~chinese \u{6d41}\u{7aef}\u{70b9}               \\~english Flow endpoint"]
    pub StreamEndPoint: ::std::os::raw::c_uchar,
    #[doc = "< [OUT] \\~chinese \u{4e8b}\u{4ef6}\u{7aef}\u{70b9}             \\~english Event endpoint"]
    pub EventEndPoint: ::std::os::raw::c_uchar,
    #[doc = "< [OUT] \\~chinese \u{4f9b}\u{5e94}\u{5546}ID\u{53f7}           \\~english Vendor ID Number"]
    pub idVendor: ::std::os::raw::c_ushort,
    #[doc = "< [OUT] \\~chinese \u{4ea7}\u{54c1}ID\u{53f7}             \\~english Device ID Number"]
    pub idProduct: ::std::os::raw::c_ushort,
    #[doc = "< [OUT] \\~chinese \u{8bbe}\u{5907}\u{5e8f}\u{5217}\u{53f7}           \\~english Device Serial Number"]
    pub nDeviceNumber: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{8bbe}\u{5907}GUID\u{53f7}           \\~english Device GUID Number"]
    pub chDeviceGUID: [::std::os::raw::c_uchar; 64usize],
    #[doc = "< [OUT] \\~chinese \u{4f9b}\u{5e94}\u{5546}\u{540d}\u{5b57}           \\~english Vendor Name"]
    pub chVendorName: [::std::os::raw::c_uchar; 64usize],
    #[doc = "< [OUT] \\~chinese \u{578b}\u{53f7}\u{540d}\u{5b57}             \\~english Model Name"]
    pub chModelName: [::std::os::raw::c_uchar; 64usize],
    #[doc = "< [OUT] \\~chinese \u{5bb6}\u{65cf}\u{540d}\u{5b57}             \\~english Family Name"]
    pub chFamilyName: [::std::os::raw::c_uchar; 64usize],
    #[doc = "< [OUT] \\~chinese \u{8bbe}\u{5907}\u{7248}\u{672c}             \\~english Device Version"]
    pub chDeviceVersion: [::std::os::raw::c_uchar; 64usize],
    #[doc = "< [OUT] \\~chinese \u{5236}\u{9020}\u{5546}\u{540d}\u{5b57}           \\~english Manufacturer Name"]
    pub chManufacturerName: [::std::os::raw::c_uchar; 64usize],
    #[doc = "< [OUT] \\~chinese \u{5e8f}\u{5217}\u{53f7}               \\~english Serial Number"]
    pub chSerialNumber: [::std::os::raw::c_uchar; 64usize],
    #[doc = "< [OUT] \\~chinese \u{7528}\u{6237}\u{81ea}\u{5b9a}\u{4e49}\u{540d}\u{5b57}       \\~english User Defined Name"]
    pub chUserDefinedName: [::std::os::raw::c_uchar; 64usize],
    #[doc = "< [OUT] \\~chinese \u{652f}\u{6301}\u{7684}USB\u{534f}\u{8bae}        \\~english Support USB Protocol"]
    pub nbcdUSB: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{8bbe}\u{5907}\u{5730}\u{5740}             \\~english Device Address"]
    pub nDeviceAddress: ::std::os::raw::c_uint,
    #[doc = "<       \\~chinese \u{9884}\u{7559}                 \\~english Reserved"]
    pub nReserved: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout__MV_USB3_DEVICE_INFO_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_USB3_DEVICE_INFO_>(),
        540usize,
        concat!("Size of: ", stringify!(_MV_USB3_DEVICE_INFO_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_USB3_DEVICE_INFO_>(),
        4usize,
        concat!("Alignment of ", stringify!(_MV_USB3_DEVICE_INFO_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_USB3_DEVICE_INFO_>())).CrtlInEndPoint as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_USB3_DEVICE_INFO_),
            "::",
            stringify!(CrtlInEndPoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_USB3_DEVICE_INFO_>())).CrtlOutEndPoint as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_USB3_DEVICE_INFO_),
            "::",
            stringify!(CrtlOutEndPoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_USB3_DEVICE_INFO_>())).StreamEndPoint as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_USB3_DEVICE_INFO_),
            "::",
            stringify!(StreamEndPoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_USB3_DEVICE_INFO_>())).EventEndPoint as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_USB3_DEVICE_INFO_),
            "::",
            stringify!(EventEndPoint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_USB3_DEVICE_INFO_>())).idVendor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_USB3_DEVICE_INFO_),
            "::",
            stringify!(idVendor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_USB3_DEVICE_INFO_>())).idProduct as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_USB3_DEVICE_INFO_),
            "::",
            stringify!(idProduct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_USB3_DEVICE_INFO_>())).nDeviceNumber as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_USB3_DEVICE_INFO_),
            "::",
            stringify!(nDeviceNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_USB3_DEVICE_INFO_>())).chDeviceGUID as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_USB3_DEVICE_INFO_),
            "::",
            stringify!(chDeviceGUID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_USB3_DEVICE_INFO_>())).chVendorName as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_USB3_DEVICE_INFO_),
            "::",
            stringify!(chVendorName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_USB3_DEVICE_INFO_>())).chModelName as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_USB3_DEVICE_INFO_),
            "::",
            stringify!(chModelName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_USB3_DEVICE_INFO_>())).chFamilyName as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_USB3_DEVICE_INFO_),
            "::",
            stringify!(chFamilyName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_USB3_DEVICE_INFO_>())).chDeviceVersion as *const _ as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_USB3_DEVICE_INFO_),
            "::",
            stringify!(chDeviceVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_USB3_DEVICE_INFO_>())).chManufacturerName as *const _
                as usize
        },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_USB3_DEVICE_INFO_),
            "::",
            stringify!(chManufacturerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_USB3_DEVICE_INFO_>())).chSerialNumber as *const _ as usize
        },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_USB3_DEVICE_INFO_),
            "::",
            stringify!(chSerialNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_USB3_DEVICE_INFO_>())).chUserDefinedName as *const _ as usize
        },
        460usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_USB3_DEVICE_INFO_),
            "::",
            stringify!(chUserDefinedName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_USB3_DEVICE_INFO_>())).nbcdUSB as *const _ as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_USB3_DEVICE_INFO_),
            "::",
            stringify!(nbcdUSB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_USB3_DEVICE_INFO_>())).nDeviceAddress as *const _ as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_USB3_DEVICE_INFO_),
            "::",
            stringify!(nDeviceAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_USB3_DEVICE_INFO_>())).nReserved as *const _ as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_USB3_DEVICE_INFO_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_USB3_DEVICE_INFO = _MV_USB3_DEVICE_INFO_;
#[doc = " \\~chinese CameraLink\u{8bbe}\u{5907}\u{4fe1}\u{606f}    \\~english CameraLink device info"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_CamL_DEV_INFO_ {
    #[doc = "< [OUT] \\~chinese \u{7aef}\u{53e3}\u{53f7}                       \\~english Port ID"]
    pub chPortID: [::std::os::raw::c_uchar; 64usize],
    #[doc = "< [OUT] \\~chinese \u{578b}\u{53f7}\u{540d}\u{5b57}                     \\~english Model Name"]
    pub chModelName: [::std::os::raw::c_uchar; 64usize],
    #[doc = "< [OUT] \\~chinese \u{540d}\u{79f0}                         \\~english Family Name"]
    pub chFamilyName: [::std::os::raw::c_uchar; 64usize],
    #[doc = "< [OUT] \\~chinese \u{8bbe}\u{5907}\u{7248}\u{672c}                     \\~english Device Version"]
    pub chDeviceVersion: [::std::os::raw::c_uchar; 64usize],
    #[doc = "< [OUT] \\~chinese \u{5236}\u{9020}\u{5546}\u{540d}\u{5b57}                   \\~english Manufacturer Name"]
    pub chManufacturerName: [::std::os::raw::c_uchar; 64usize],
    #[doc = "< [OUT] \\~chinese \u{5e8f}\u{5217}\u{53f7}                       \\~english Serial Number"]
    pub chSerialNumber: [::std::os::raw::c_uchar; 64usize],
    #[doc = "<       \\~chinese \u{9884}\u{7559}                         \\~english Reserved"]
    pub nReserved: [::std::os::raw::c_uint; 38usize],
}
#[test]
fn bindgen_test_layout__MV_CamL_DEV_INFO_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_CamL_DEV_INFO_>(),
        536usize,
        concat!("Size of: ", stringify!(_MV_CamL_DEV_INFO_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_CamL_DEV_INFO_>(),
        4usize,
        concat!("Alignment of ", stringify!(_MV_CamL_DEV_INFO_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_CamL_DEV_INFO_>())).chPortID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CamL_DEV_INFO_),
            "::",
            stringify!(chPortID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_CamL_DEV_INFO_>())).chModelName as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CamL_DEV_INFO_),
            "::",
            stringify!(chModelName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_CamL_DEV_INFO_>())).chFamilyName as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CamL_DEV_INFO_),
            "::",
            stringify!(chFamilyName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_CamL_DEV_INFO_>())).chDeviceVersion as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CamL_DEV_INFO_),
            "::",
            stringify!(chDeviceVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_CamL_DEV_INFO_>())).chManufacturerName as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CamL_DEV_INFO_),
            "::",
            stringify!(chManufacturerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_CamL_DEV_INFO_>())).chSerialNumber as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CamL_DEV_INFO_),
            "::",
            stringify!(chSerialNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_CamL_DEV_INFO_>())).nReserved as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CamL_DEV_INFO_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_CamL_DEV_INFO = _MV_CamL_DEV_INFO_;
#[doc = " \\~chinese \u{8bbe}\u{5907}\u{4fe1}\u{606f}    \\~english Device info"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_CC_DEVICE_INFO_ {
    #[doc = "< [OUT] \\~chinese \u{4e3b}\u{8981}\u{7248}\u{672c}                                 \\~english Major Version"]
    pub nMajorVer: ::std::os::raw::c_ushort,
    #[doc = "< [OUT] \\~chinese \u{6b21}\u{8981}\u{7248}\u{672c}                                 \\~english Minor Version"]
    pub nMinorVer: ::std::os::raw::c_ushort,
    #[doc = "< [OUT] \\~chinese \u{9ad8}MAC\u{5730}\u{5740}                                \\~english High MAC Address"]
    pub nMacAddrHigh: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{4f4e}MAC\u{5730}\u{5740}                                \\~english Low MAC Address"]
    pub nMacAddrLow: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{8bbe}\u{5907}\u{4f20}\u{8f93}\u{5c42}\u{534f}\u{8bae}\u{7c7b}\u{578b}\u{ff0c}e.g. MV_GIGE_DEVICE  \\~english Device Transport Layer Protocol Type, e.g. MV_GIGE_DEVICE"]
    pub nTLayerType: ::std::os::raw::c_uint,
    #[doc = "<       \\~chinese \u{9884}\u{7559}                                     \\~english Reserved"]
    pub nReserved: [::std::os::raw::c_uint; 4usize],
    pub SpecialInfo: _MV_CC_DEVICE_INFO___bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _MV_CC_DEVICE_INFO___bindgen_ty_1 {
    #[doc = "< [OUT] \\~chinese GigE\u{8bbe}\u{5907}\u{4fe1}\u{606f}                             \\~english GigE Device Info"]
    pub stGigEInfo: MV_GIGE_DEVICE_INFO,
    #[doc = "< [OUT] \\~chinese USB\u{8bbe}\u{5907}\u{4fe1}\u{606f}                              \\~english USB Device Info"]
    pub stUsb3VInfo: MV_USB3_DEVICE_INFO,
    #[doc = "< [OUT] \\~chinese CameraLink\u{8bbe}\u{5907}\u{4fe1}\u{606f}                          \\~english CameraLink Device"]
    pub stCamLInfo: MV_CamL_DEV_INFO,
    _bindgen_union_align: [u32; 135usize],
}
#[test]
fn bindgen_test_layout__MV_CC_DEVICE_INFO___bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_MV_CC_DEVICE_INFO___bindgen_ty_1>(),
        540usize,
        concat!("Size of: ", stringify!(_MV_CC_DEVICE_INFO___bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_CC_DEVICE_INFO___bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_MV_CC_DEVICE_INFO___bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_CC_DEVICE_INFO___bindgen_ty_1>())).stGigEInfo as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CC_DEVICE_INFO___bindgen_ty_1),
            "::",
            stringify!(stGigEInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_CC_DEVICE_INFO___bindgen_ty_1>())).stUsb3VInfo as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CC_DEVICE_INFO___bindgen_ty_1),
            "::",
            stringify!(stUsb3VInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_CC_DEVICE_INFO___bindgen_ty_1>())).stCamLInfo as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CC_DEVICE_INFO___bindgen_ty_1),
            "::",
            stringify!(stCamLInfo)
        )
    );
}
#[test]
fn bindgen_test_layout__MV_CC_DEVICE_INFO_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_CC_DEVICE_INFO_>(),
        572usize,
        concat!("Size of: ", stringify!(_MV_CC_DEVICE_INFO_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_CC_DEVICE_INFO_>(),
        4usize,
        concat!("Alignment of ", stringify!(_MV_CC_DEVICE_INFO_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_CC_DEVICE_INFO_>())).nMajorVer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CC_DEVICE_INFO_),
            "::",
            stringify!(nMajorVer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_CC_DEVICE_INFO_>())).nMinorVer as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CC_DEVICE_INFO_),
            "::",
            stringify!(nMinorVer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_CC_DEVICE_INFO_>())).nMacAddrHigh as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CC_DEVICE_INFO_),
            "::",
            stringify!(nMacAddrHigh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_CC_DEVICE_INFO_>())).nMacAddrLow as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CC_DEVICE_INFO_),
            "::",
            stringify!(nMacAddrLow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_CC_DEVICE_INFO_>())).nTLayerType as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CC_DEVICE_INFO_),
            "::",
            stringify!(nTLayerType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_CC_DEVICE_INFO_>())).nReserved as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CC_DEVICE_INFO_),
            "::",
            stringify!(nReserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_CC_DEVICE_INFO_>())).SpecialInfo as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CC_DEVICE_INFO_),
            "::",
            stringify!(SpecialInfo)
        )
    );
}
pub type MV_CC_DEVICE_INFO = _MV_CC_DEVICE_INFO_;
#[doc = " \\~chinese \u{8bbe}\u{5907}\u{4fe1}\u{606f}\u{5217}\u{8868}    \\~english Device Information List"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_CC_DEVICE_INFO_LIST_ {
    #[doc = "< [OUT] \\~chinese \u{5728}\u{7ebf}\u{8bbe}\u{5907}\u{6570}\u{91cf}       \\~english Online Device Number"]
    pub nDeviceNum: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{652f}\u{6301}\u{6700}\u{591a}256\u{4e2a}\u{8bbe}\u{5907}  \\~english Support up to 256 devices"]
    pub pDeviceInfo: [*mut MV_CC_DEVICE_INFO; 256usize],
}
#[test]
fn bindgen_test_layout__MV_CC_DEVICE_INFO_LIST_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_CC_DEVICE_INFO_LIST_>(),
        2056usize,
        concat!("Size of: ", stringify!(_MV_CC_DEVICE_INFO_LIST_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_CC_DEVICE_INFO_LIST_>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_CC_DEVICE_INFO_LIST_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_CC_DEVICE_INFO_LIST_>())).nDeviceNum as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CC_DEVICE_INFO_LIST_),
            "::",
            stringify!(nDeviceNum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_CC_DEVICE_INFO_LIST_>())).pDeviceInfo as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CC_DEVICE_INFO_LIST_),
            "::",
            stringify!(pDeviceInfo)
        )
    );
}
pub type MV_CC_DEVICE_INFO_LIST = _MV_CC_DEVICE_INFO_LIST_;
#[doc = " \\~chinese Chunk\u{5185}\u{5bb9}    \\~english The content of ChunkData"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MV_CHUNK_DATA_CONTENT_ {
    #[doc = "< [OUT] \\~chinese Chunk\u{6570}\u{636e}                \\~english Chunk Data"]
    pub pChunkData: *mut ::std::os::raw::c_uchar,
    #[doc = "< [OUT] \\~chinese Chunk ID                 \\~english Chunk ID"]
    pub nChunkID: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese Chunk\u{7684}\u{957f}\u{5ea6}              \\~english Chunk Length"]
    pub nChunkLen: ::std::os::raw::c_uint,
    #[doc = "<       \\~chinese \u{9884}\u{7559}                     \\~english Reserved"]
    pub nReserved: [::std::os::raw::c_uint; 8usize],
}
#[test]
fn bindgen_test_layout__MV_CHUNK_DATA_CONTENT_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_CHUNK_DATA_CONTENT_>(),
        48usize,
        concat!("Size of: ", stringify!(_MV_CHUNK_DATA_CONTENT_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_CHUNK_DATA_CONTENT_>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_CHUNK_DATA_CONTENT_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_CHUNK_DATA_CONTENT_>())).pChunkData as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CHUNK_DATA_CONTENT_),
            "::",
            stringify!(pChunkData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_CHUNK_DATA_CONTENT_>())).nChunkID as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CHUNK_DATA_CONTENT_),
            "::",
            stringify!(nChunkID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_CHUNK_DATA_CONTENT_>())).nChunkLen as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CHUNK_DATA_CONTENT_),
            "::",
            stringify!(nChunkLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_CHUNK_DATA_CONTENT_>())).nReserved as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CHUNK_DATA_CONTENT_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_CHUNK_DATA_CONTENT = _MV_CHUNK_DATA_CONTENT_;
#[doc = " \\~chinese \u{8f93}\u{51fa}\u{5e27}\u{7684}\u{4fe1}\u{606f}    \\~english Output Frame Information"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_FRAME_OUT_INFO_EX_ {
    #[doc = "< [OUT] \\~chinese \u{56fe}\u{50cf}\u{5bbd}                   \\~english Image Width"]
    pub nWidth: ::std::os::raw::c_ushort,
    #[doc = "< [OUT] \\~chinese \u{56fe}\u{50cf}\u{9ad8}                   \\~english Image Height"]
    pub nHeight: ::std::os::raw::c_ushort,
    #[doc = "< [OUT] \\~chinese \u{50cf}\u{7d20}\u{683c}\u{5f0f}                 \\~english Pixel Type"]
    pub enPixelType: MvGvspPixelType,
    #[doc = "< [OUT] \\~chinese \u{5e27}\u{53f7}                     \\~english Frame Number"]
    pub nFrameNum: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{65f6}\u{95f4}\u{6233}\u{9ad8}32\u{4f4d}             \\~english Timestamp high 32 bits"]
    pub nDevTimeStampHigh: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{65f6}\u{95f4}\u{6233}\u{4f4e}32\u{4f4d}             \\~english Timestamp low 32 bits"]
    pub nDevTimeStampLow: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{4fdd}\u{7559}\u{ff0c}8\u{5b57}\u{8282}\u{5bf9}\u{9f50}          \\~english Reserved, 8-byte aligned"]
    pub nReserved0: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{4e3b}\u{673a}\u{751f}\u{6210}\u{7684}\u{65f6}\u{95f4}\u{6233}         \\~english Host-generated timestamp"]
    pub nHostTimeStamp: i64,
    #[doc = "< [OUT] \\~chinese \u{5e27}\u{7684}\u{957f}\u{5ea6}                 \\~english The Length of Frame"]
    pub nFrameLen: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{79d2}\u{6570}                     \\~english The Seconds"]
    pub nSecondCount: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{5468}\u{671f}\u{6570}                   \\~english The Count of Cycle"]
    pub nCycleCount: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{5468}\u{671f}\u{504f}\u{79fb}\u{91cf}               \\~english The Offset of Cycle"]
    pub nCycleOffset: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{589e}\u{76ca}                     \\~english Gain"]
    pub fGain: f32,
    #[doc = "< [OUT] \\~chinese \u{66dd}\u{5149}\u{65f6}\u{95f4}                 \\~english Exposure Time"]
    pub fExposureTime: f32,
    #[doc = "< [OUT] \\~chinese \u{5e73}\u{5747}\u{4eae}\u{5ea6}                 \\~english Average brightness"]
    pub nAverageBrightness: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{7ea2}\u{8272}                     \\~english Red"]
    pub nRed: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{7eff}\u{8272}                     \\~english Green"]
    pub nGreen: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{84dd}\u{8272}                     \\~english Blue"]
    pub nBlue: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{603b}\u{5e27}\u{6570}                   \\~english Frame Counter"]
    pub nFrameCounter: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{89e6}\u{53d1}\u{8ba1}\u{6570}                 \\~english Trigger Counting"]
    pub nTriggerIndex: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{8f93}\u{5165}                     \\~english Input"]
    pub nInput: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{8f93}\u{51fa}                     \\~english Output"]
    pub nOutput: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{6c34}\u{5e73}\u{504f}\u{79fb}\u{91cf}               \\~english OffsetX"]
    pub nOffsetX: ::std::os::raw::c_ushort,
    #[doc = "< [OUT] \\~chinese \u{5782}\u{76f4}\u{504f}\u{79fb}\u{91cf}               \\~english OffsetY"]
    pub nOffsetY: ::std::os::raw::c_ushort,
    #[doc = "< [OUT] \\~chinese Chunk\u{5bbd}                  \\~english The Width of Chunk"]
    pub nChunkWidth: ::std::os::raw::c_ushort,
    #[doc = "< [OUT] \\~chinese Chunk\u{9ad8}                  \\~english The Height of Chunk"]
    pub nChunkHeight: ::std::os::raw::c_ushort,
    #[doc = "< [OUT] \\~chinese \u{672c}\u{5e27}\u{4e22}\u{5305}\u{6570}               \\~english Lost Packet Number In This Frame"]
    pub nLostPacket: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{672a}\u{89e3}\u{6790}\u{7684}Chunkdata\u{4e2a}\u{6570}    \\~english Unparsed Chunk Number"]
    pub nUnparsedChunkNum: ::std::os::raw::c_uint,
    pub UnparsedChunkList: _MV_FRAME_OUT_INFO_EX___bindgen_ty_1,
    #[doc = "<       \\~chinese \u{9884}\u{7559}                     \\~english Reserved"]
    pub nReserved: [::std::os::raw::c_uint; 36usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _MV_FRAME_OUT_INFO_EX___bindgen_ty_1 {
    #[doc = "< [OUT] \\~chinese \u{672a}\u{89e3}\u{6790}\u{7684}Chunk   \\~english Unparsed Chunk Content"]
    pub pUnparsedChunkContent: *mut MV_CHUNK_DATA_CONTENT,
    #[doc = "< [OUT] \\~chinese \u{6821}\u{51c6}                     \\~english Aligning"]
    pub nAligning: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__MV_FRAME_OUT_INFO_EX___bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_MV_FRAME_OUT_INFO_EX___bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_MV_FRAME_OUT_INFO_EX___bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_FRAME_OUT_INFO_EX___bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_MV_FRAME_OUT_INFO_EX___bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX___bindgen_ty_1>())).pUnparsedChunkContent
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX___bindgen_ty_1),
            "::",
            stringify!(pUnparsedChunkContent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX___bindgen_ty_1>())).nAligning as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX___bindgen_ty_1),
            "::",
            stringify!(nAligning)
        )
    );
}
#[test]
fn bindgen_test_layout__MV_FRAME_OUT_INFO_EX_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_FRAME_OUT_INFO_EX_>(),
        264usize,
        concat!("Size of: ", stringify!(_MV_FRAME_OUT_INFO_EX_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_FRAME_OUT_INFO_EX_>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_FRAME_OUT_INFO_EX_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nWidth as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nHeight as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).enPixelType as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(enPixelType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nFrameNum as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nFrameNum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nDevTimeStampHigh as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nDevTimeStampHigh)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nDevTimeStampLow as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nDevTimeStampLow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nReserved0 as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nReserved0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nHostTimeStamp as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nHostTimeStamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nFrameLen as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nFrameLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nSecondCount as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nSecondCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nCycleCount as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nCycleCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nCycleOffset as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nCycleOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).fGain as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(fGain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).fExposureTime as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(fExposureTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nAverageBrightness as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nAverageBrightness)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nRed as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nRed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nGreen as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nGreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nBlue as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nBlue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nFrameCounter as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nFrameCounter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nTriggerIndex as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nTriggerIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nInput as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nInput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nOutput as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nOutput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nOffsetX as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nOffsetX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nOffsetY as *const _ as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nOffsetY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nChunkWidth as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nChunkWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nChunkHeight as *const _ as usize
        },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nChunkHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nLostPacket as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nLostPacket)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nUnparsedChunkNum as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nUnparsedChunkNum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).UnparsedChunkList as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(UnparsedChunkList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_EX_>())).nReserved as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_EX_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_FRAME_OUT_INFO_EX = _MV_FRAME_OUT_INFO_EX_;
#[doc = " \\~chinese \u{56fe}\u{50cf}\u{7ed3}\u{6784}\u{4f53}\u{ff0c}\u{8f93}\u{51fa}\u{56fe}\u{50cf}\u{6307}\u{9488}\u{5730}\u{5740}\u{53ca}\u{56fe}\u{50cf}\u{4fe1}\u{606f}    \\~english Image Struct, output the pointer of Image and the information of the specific image"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_FRAME_OUT_ {
    #[doc = "< [IN]  \\~chinese \u{56fe}\u{50cf}\u{6307}\u{9488}\u{5730}\u{5740}             \\~english  pointer of image"]
    pub pBufAddr: *mut ::std::os::raw::c_uchar,
    #[doc = "< [OUT] \\~chinese \u{56fe}\u{50cf}\u{4fe1}\u{606f}                 \\~english information of the specific image"]
    pub stFrameInfo: MV_FRAME_OUT_INFO_EX,
    #[doc = "<       \\~chinese \u{9884}\u{7559}                     \\~english Reserved"]
    pub nRes: [::std::os::raw::c_uint; 16usize],
}
#[test]
fn bindgen_test_layout__MV_FRAME_OUT_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_FRAME_OUT_>(),
        336usize,
        concat!("Size of: ", stringify!(_MV_FRAME_OUT_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_FRAME_OUT_>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_FRAME_OUT_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_FRAME_OUT_>())).pBufAddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_),
            "::",
            stringify!(pBufAddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_FRAME_OUT_>())).stFrameInfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_),
            "::",
            stringify!(stFrameInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_FRAME_OUT_>())).nRes as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_),
            "::",
            stringify!(nRes)
        )
    );
}
pub type MV_FRAME_OUT = _MV_FRAME_OUT_;
#[doc = " \\~chinese \u{7f51}\u{7edc}\u{4f20}\u{8f93}\u{7684}\u{76f8}\u{5173}\u{4fe1}\u{606f}    \\~english Network transmission information"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MV_NETTRANS_INFO_ {
    #[doc = "< [OUT] \\~chinese \u{5df2}\u{63a5}\u{6536}\u{6570}\u{636e}\u{5927}\u{5c0f} [\u{7edf}\u{8ba1}StartGrabbing\u{548c}StopGrabbing\u{4e4b}\u{95f4}\u{7684}\u{6570}\u{636e}\u{91cf}] \\~english Received Data Size  [Calculate the Data Size between StartGrabbing and StopGrabbing]"]
    pub nReceiveDataSize: i64,
    #[doc = "< [OUT] \\~chinese \u{4e22}\u{5e27}\u{6570}\u{91cf}                                                     \\~english Throw frame number"]
    pub nThrowFrameCount: ::std::os::raw::c_int,
    #[doc = "< [OUT] \\~chinese \u{5df2}\u{63a5}\u{6536}\u{7684}\u{5e27}\u{6570}                                                 \\~english Received Frame Count"]
    pub nNetRecvFrameCount: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{8bf7}\u{6c42}\u{91cd}\u{53d1}\u{5305}\u{6570}                                                 \\~english Request Resend Packet Count"]
    pub nRequestResendPacketCount: __int64_t,
    #[doc = "< [OUT] \\~chinese \u{91cd}\u{53d1}\u{5305}\u{6570}                                                     \\~english Resend Packet Count"]
    pub nResendPacketCount: __int64_t,
}
#[test]
fn bindgen_test_layout__MV_NETTRANS_INFO_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_NETTRANS_INFO_>(),
        32usize,
        concat!("Size of: ", stringify!(_MV_NETTRANS_INFO_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_NETTRANS_INFO_>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_NETTRANS_INFO_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_NETTRANS_INFO_>())).nReceiveDataSize as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_NETTRANS_INFO_),
            "::",
            stringify!(nReceiveDataSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_NETTRANS_INFO_>())).nThrowFrameCount as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_NETTRANS_INFO_),
            "::",
            stringify!(nThrowFrameCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_NETTRANS_INFO_>())).nNetRecvFrameCount as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_NETTRANS_INFO_),
            "::",
            stringify!(nNetRecvFrameCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_NETTRANS_INFO_>())).nRequestResendPacketCount as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_NETTRANS_INFO_),
            "::",
            stringify!(nRequestResendPacketCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_NETTRANS_INFO_>())).nResendPacketCount as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_NETTRANS_INFO_),
            "::",
            stringify!(nResendPacketCount)
        )
    );
}
pub type MV_NETTRANS_INFO = _MV_NETTRANS_INFO_;
#[doc = " \\~chinese \u{5168}\u{5339}\u{914d}\u{7684}\u{4e00}\u{79cd}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}    \\~english A fully matched information structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MV_ALL_MATCH_INFO_ {
    #[doc = "< [IN]  \\~chinese \u{9700}\u{8981}\u{8f93}\u{51fa}\u{7684}\u{4fe1}\u{606f}\u{7c7b}\u{578b}\u{ff0c}e.g. MV_MATCH_TYPE_NET_DETECT \\~english Information type need to output ,e.g. MV_MATCH_TYPE_NET_DETECT"]
    pub nType: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{8f93}\u{51fa}\u{7684}\u{4fe1}\u{606f}\u{7f13}\u{5b58}\u{ff0c}\u{7531}\u{8c03}\u{7528}\u{8005}\u{5206}\u{914d}                      \\~english Output information cache, which is allocated by the caller"]
    pub pInfo: *mut ::std::os::raw::c_void,
    #[doc = "< [IN]  \\~chinese \u{4fe1}\u{606f}\u{7f13}\u{5b58}\u{7684}\u{5927}\u{5c0f}                                   \\ ~english Information cache size"]
    pub nInfoSize: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__MV_ALL_MATCH_INFO_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_ALL_MATCH_INFO_>(),
        24usize,
        concat!("Size of: ", stringify!(_MV_ALL_MATCH_INFO_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_ALL_MATCH_INFO_>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_ALL_MATCH_INFO_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_ALL_MATCH_INFO_>())).nType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_ALL_MATCH_INFO_),
            "::",
            stringify!(nType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_ALL_MATCH_INFO_>())).pInfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_ALL_MATCH_INFO_),
            "::",
            stringify!(pInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_ALL_MATCH_INFO_>())).nInfoSize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_ALL_MATCH_INFO_),
            "::",
            stringify!(nInfoSize)
        )
    );
}
pub type MV_ALL_MATCH_INFO = _MV_ALL_MATCH_INFO_;
#[doc = " \\~chinese \u{7f51}\u{7edc}\u{6d41}\u{91cf}\u{548c}\u{4e22}\u{5305}\u{4fe1}\u{606f}\u{53cd}\u{9988}\u{7ed3}\u{6784}\u{4f53}\u{ff0c}\u{5bf9}\u{5e94}\u{7c7b}\u{578b}\u{4e3a} MV_MATCH_TYPE_NET_DETECT    \\~english Network traffic and packet loss feedback structure, the corresponding type is MV_MATCH_TYPE_NET_DETECT"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MV_MATCH_INFO_NET_DETECT_ {
    #[doc = "< [OUT] \\~chinese \u{5df2}\u{63a5}\u{6536}\u{6570}\u{636e}\u{5927}\u{5c0f} [\u{7edf}\u{8ba1}StartGrabbing\u{548c}StopGrabbing\u{4e4b}\u{95f4}\u{7684}\u{6570}\u{636e}\u{91cf}] \\~english Received data size"]
    pub nReceiveDataSize: i64,
    #[doc = "< [OUT] \\~chinese \u{4e22}\u{5931}\u{7684}\u{5305}\u{6570}\u{91cf}                                                 \\~english Number of packets lost"]
    pub nLostPacketCount: i64,
    #[doc = "< [OUT] \\~chinese \u{4e22}\u{5e27}\u{6570}\u{91cf}                                                     \\~english Number of frames lost"]
    pub nLostFrameCount: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{4fdd}\u{7559}                                                         \\~english Received Frame Count"]
    pub nNetRecvFrameCount: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{8bf7}\u{6c42}\u{91cd}\u{53d1}\u{5305}\u{6570}                                                 \\~english Request Resend Packet Count"]
    pub nRequestResendPacketCount: __int64_t,
    #[doc = "< [OUT] \\~chinese \u{91cd}\u{53d1}\u{5305}\u{6570}                                                     \\~english Resend Packet Count"]
    pub nResendPacketCount: __int64_t,
}
#[test]
fn bindgen_test_layout__MV_MATCH_INFO_NET_DETECT_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_MATCH_INFO_NET_DETECT_>(),
        40usize,
        concat!("Size of: ", stringify!(_MV_MATCH_INFO_NET_DETECT_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_MATCH_INFO_NET_DETECT_>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_MATCH_INFO_NET_DETECT_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_MATCH_INFO_NET_DETECT_>())).nReceiveDataSize as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_MATCH_INFO_NET_DETECT_),
            "::",
            stringify!(nReceiveDataSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_MATCH_INFO_NET_DETECT_>())).nLostPacketCount as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_MATCH_INFO_NET_DETECT_),
            "::",
            stringify!(nLostPacketCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_MATCH_INFO_NET_DETECT_>())).nLostFrameCount as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_MATCH_INFO_NET_DETECT_),
            "::",
            stringify!(nLostFrameCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_MATCH_INFO_NET_DETECT_>())).nNetRecvFrameCount as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_MATCH_INFO_NET_DETECT_),
            "::",
            stringify!(nNetRecvFrameCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_MATCH_INFO_NET_DETECT_>())).nRequestResendPacketCount
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_MATCH_INFO_NET_DETECT_),
            "::",
            stringify!(nRequestResendPacketCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_MATCH_INFO_NET_DETECT_>())).nResendPacketCount as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_MATCH_INFO_NET_DETECT_),
            "::",
            stringify!(nResendPacketCount)
        )
    );
}
pub type MV_MATCH_INFO_NET_DETECT = _MV_MATCH_INFO_NET_DETECT_;
#[doc = " \\~chinese host\u{6536}\u{5230}\u{4ece}u3v\u{8bbe}\u{5907}\u{7aef}\u{7684}\u{603b}\u{5b57}\u{8282}\u{6570}\u{ff0c}\u{5bf9}\u{5e94}\u{7c7b}\u{578b}\u{4e3a} MV_MATCH_TYPE_USB_DETECT    \\~english The total number of bytes host received from the u3v device side, the corresponding type is MV_MATCH_TYPE_USB_DETECT"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MV_MATCH_INFO_USB_DETECT_ {
    #[doc = "< [OUT] \\~chinese \u{5df2}\u{63a5}\u{6536}\u{6570}\u{636e}\u{5927}\u{5c0f} [\u{7edf}\u{8ba1}OpenDevicce\u{548c}CloseDevice\u{4e4b}\u{95f4}\u{7684}\u{6570}\u{636e}\u{91cf}] \\~english Received data size"]
    pub nReceiveDataSize: i64,
    #[doc = "< [OUT] \\~chinese \u{5df2}\u{6536}\u{5230}\u{7684}\u{5e27}\u{6570}                                              \\~english Number of frames received"]
    pub nReceivedFrameCount: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{9519}\u{8bef}\u{5e27}\u{6570}                                                  \\~english Number of error frames"]
    pub nErrorFrameCount: ::std::os::raw::c_uint,
    #[doc = "<       \\~chinese \u{4fdd}\u{7559}                                                      \\~english Reserved"]
    pub nReserved: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout__MV_MATCH_INFO_USB_DETECT_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_MATCH_INFO_USB_DETECT_>(),
        24usize,
        concat!("Size of: ", stringify!(_MV_MATCH_INFO_USB_DETECT_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_MATCH_INFO_USB_DETECT_>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_MATCH_INFO_USB_DETECT_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_MATCH_INFO_USB_DETECT_>())).nReceiveDataSize as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_MATCH_INFO_USB_DETECT_),
            "::",
            stringify!(nReceiveDataSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_MATCH_INFO_USB_DETECT_>())).nReceivedFrameCount as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_MATCH_INFO_USB_DETECT_),
            "::",
            stringify!(nReceivedFrameCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_MATCH_INFO_USB_DETECT_>())).nErrorFrameCount as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_MATCH_INFO_USB_DETECT_),
            "::",
            stringify!(nErrorFrameCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_MATCH_INFO_USB_DETECT_>())).nReserved as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_MATCH_INFO_USB_DETECT_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_MATCH_INFO_USB_DETECT = _MV_MATCH_INFO_USB_DETECT_;
#[doc = " \\~chinese \u{663e}\u{793a}\u{5e27}\u{4fe1}\u{606f}   \\~english Display frame information"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MV_DISPLAY_FRAME_INFO_ {
    #[doc = "< [IN] \\~chinese \u{7a97}\u{53e3}\u{53e5}\u{67c4}       \\~english HWND"]
    pub hWnd: *mut ::std::os::raw::c_void,
    #[doc = "< [IN] \\~chinese \u{663e}\u{793a}\u{7684}\u{6570}\u{636e}     \\~english Data Buffer"]
    pub pData: *mut ::std::os::raw::c_uchar,
    #[doc = "< [IN] \\~chinese \u{6570}\u{636e}\u{957f}\u{5ea6}       \\~english Data Size"]
    pub nDataLen: ::std::os::raw::c_uint,
    #[doc = "< [IN] \\~chinese \u{56fe}\u{50cf}\u{5bbd}         \\~english Width"]
    pub nWidth: ::std::os::raw::c_ushort,
    #[doc = "< [IN] \\~chinese \u{56fe}\u{50cf}\u{9ad8}         \\~english Height"]
    pub nHeight: ::std::os::raw::c_ushort,
    #[doc = "< [IN] \\~chinese \u{50cf}\u{7d20}\u{683c}\u{5f0f}       \\~english Pixel format"]
    pub enPixelType: MvGvspPixelType,
    #[doc = "<      \\~chinese \u{4fdd}\u{7559}           \\~english Reserved"]
    pub nRes: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout__MV_DISPLAY_FRAME_INFO_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_DISPLAY_FRAME_INFO_>(),
        48usize,
        concat!("Size of: ", stringify!(_MV_DISPLAY_FRAME_INFO_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_DISPLAY_FRAME_INFO_>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_DISPLAY_FRAME_INFO_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_DISPLAY_FRAME_INFO_>())).hWnd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_DISPLAY_FRAME_INFO_),
            "::",
            stringify!(hWnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_DISPLAY_FRAME_INFO_>())).pData as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_DISPLAY_FRAME_INFO_),
            "::",
            stringify!(pData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_DISPLAY_FRAME_INFO_>())).nDataLen as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_DISPLAY_FRAME_INFO_),
            "::",
            stringify!(nDataLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_DISPLAY_FRAME_INFO_>())).nWidth as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_DISPLAY_FRAME_INFO_),
            "::",
            stringify!(nWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_DISPLAY_FRAME_INFO_>())).nHeight as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_DISPLAY_FRAME_INFO_),
            "::",
            stringify!(nHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_DISPLAY_FRAME_INFO_>())).enPixelType as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_DISPLAY_FRAME_INFO_),
            "::",
            stringify!(enPixelType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_DISPLAY_FRAME_INFO_>())).nRes as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_DISPLAY_FRAME_INFO_),
            "::",
            stringify!(nRes)
        )
    );
}
pub type MV_DISPLAY_FRAME_INFO = _MV_DISPLAY_FRAME_INFO_;
#[doc = "< \\~chinese \u{672a}\u{5b9a}\u{4e49}\u{7684}\u{56fe}\u{50cf}\u{683c}\u{5f0f}      \\~english Undefined Image Type"]
pub const MV_SAVE_IAMGE_TYPE_MV_Image_Undefined: MV_SAVE_IAMGE_TYPE = 0;
#[doc = "< \\~chinese BMP\u{56fe}\u{50cf}\u{683c}\u{5f0f}           \\~english BMP Image Type"]
pub const MV_SAVE_IAMGE_TYPE_MV_Image_Bmp: MV_SAVE_IAMGE_TYPE = 1;
#[doc = "< \\~chinese JPEG\u{56fe}\u{50cf}\u{683c}\u{5f0f}          \\~english Jpeg Image Type"]
pub const MV_SAVE_IAMGE_TYPE_MV_Image_Jpeg: MV_SAVE_IAMGE_TYPE = 2;
#[doc = " \\~chinese \u{4fdd}\u{5b58}\u{56fe}\u{7247}\u{683c}\u{5f0f}    \\~english Save image type"]
pub type MV_SAVE_IAMGE_TYPE = u32;
#[doc = " \\~chinese \u{56fe}\u{7247}\u{4fdd}\u{5b58}\u{53c2}\u{6570}    \\~english Save Image Parameters"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MV_SAVE_IMAGE_PARAM_T_EX_ {
    #[doc = "< [IN]  \\~chinese \u{8f93}\u{5165}\u{6570}\u{636e}\u{7f13}\u{5b58}                     \\~english Input Data Buffer"]
    pub pData: *mut ::std::os::raw::c_uchar,
    #[doc = "< [IN]  \\~chinese \u{8f93}\u{5165}\u{6570}\u{636e}\u{5927}\u{5c0f}                     \\~english Input Data Size"]
    pub nDataLen: ::std::os::raw::c_uint,
    #[doc = "< [IN]  \\~chinese \u{8f93}\u{5165}\u{6570}\u{636e}\u{7684}\u{50cf}\u{7d20}\u{683c}\u{5f0f}               \\~english Input Data Pixel Format"]
    pub enPixelType: MvGvspPixelType,
    #[doc = "< [IN]  \\~chinese \u{56fe}\u{50cf}\u{5bbd}                           \\~english Image Width"]
    pub nWidth: ::std::os::raw::c_ushort,
    #[doc = "< [IN]  \\~chinese \u{56fe}\u{50cf}\u{9ad8}                           \\~english Image Height"]
    pub nHeight: ::std::os::raw::c_ushort,
    #[doc = "< [OUT] \\~chinese \u{8f93}\u{51fa}\u{56fe}\u{7247}\u{7f13}\u{5b58}                     \\~english Output Image Buffer"]
    pub pImageBuffer: *mut ::std::os::raw::c_uchar,
    #[doc = "< [OUT] \\~chinese \u{8f93}\u{51fa}\u{56fe}\u{7247}\u{5927}\u{5c0f}                     \\~english Output Image Size"]
    pub nImageLen: ::std::os::raw::c_uint,
    #[doc = "< [IN]  \\~chinese \u{63d0}\u{4f9b}\u{7684}\u{8f93}\u{51fa}\u{7f13}\u{51b2}\u{533a}\u{5927}\u{5c0f}             \\~english Output buffer size provided"]
    pub nBufferSize: ::std::os::raw::c_uint,
    #[doc = "< [IN]  \\~chinese \u{8f93}\u{51fa}\u{56fe}\u{7247}\u{683c}\u{5f0f}                     \\~english Output Image Format"]
    pub enImageType: MV_SAVE_IAMGE_TYPE,
    #[doc = "< [IN]  \\~chinese JPG\u{7f16}\u{7801}\u{8d28}\u{91cf}(50-99]\u{ff0c}\u{5176}\u{5b83}\u{683c}\u{5f0f}\u{65e0}\u{6548} \\~english Encoding quality(50-99]\u{ff0c}Other formats are invalid"]
    pub nJpgQuality: ::std::os::raw::c_uint,
    #[doc = "< [IN]  \\~chinese \u{63d2}\u{503c}\u{65b9}\u{6cd5}                         \\~english Method Value"]
    pub iMethodValue: ::std::os::raw::c_uint,
    #[doc = "<       \\~chinese \u{9884}\u{7559}                             \\~english Reserved"]
    pub nReserved: [::std::os::raw::c_uint; 3usize],
}
#[test]
fn bindgen_test_layout__MV_SAVE_IMAGE_PARAM_T_EX_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_SAVE_IMAGE_PARAM_T_EX_>(),
        72usize,
        concat!("Size of: ", stringify!(_MV_SAVE_IMAGE_PARAM_T_EX_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_SAVE_IMAGE_PARAM_T_EX_>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_SAVE_IMAGE_PARAM_T_EX_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_SAVE_IMAGE_PARAM_T_EX_>())).pData as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_SAVE_IMAGE_PARAM_T_EX_),
            "::",
            stringify!(pData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_SAVE_IMAGE_PARAM_T_EX_>())).nDataLen as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_SAVE_IMAGE_PARAM_T_EX_),
            "::",
            stringify!(nDataLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_SAVE_IMAGE_PARAM_T_EX_>())).enPixelType as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_SAVE_IMAGE_PARAM_T_EX_),
            "::",
            stringify!(enPixelType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_SAVE_IMAGE_PARAM_T_EX_>())).nWidth as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_SAVE_IMAGE_PARAM_T_EX_),
            "::",
            stringify!(nWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_SAVE_IMAGE_PARAM_T_EX_>())).nHeight as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_SAVE_IMAGE_PARAM_T_EX_),
            "::",
            stringify!(nHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_SAVE_IMAGE_PARAM_T_EX_>())).pImageBuffer as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_SAVE_IMAGE_PARAM_T_EX_),
            "::",
            stringify!(pImageBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_SAVE_IMAGE_PARAM_T_EX_>())).nImageLen as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_SAVE_IMAGE_PARAM_T_EX_),
            "::",
            stringify!(nImageLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_SAVE_IMAGE_PARAM_T_EX_>())).nBufferSize as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_SAVE_IMAGE_PARAM_T_EX_),
            "::",
            stringify!(nBufferSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_SAVE_IMAGE_PARAM_T_EX_>())).enImageType as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_SAVE_IMAGE_PARAM_T_EX_),
            "::",
            stringify!(enImageType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_SAVE_IMAGE_PARAM_T_EX_>())).nJpgQuality as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_SAVE_IMAGE_PARAM_T_EX_),
            "::",
            stringify!(nJpgQuality)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_SAVE_IMAGE_PARAM_T_EX_>())).iMethodValue as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_SAVE_IMAGE_PARAM_T_EX_),
            "::",
            stringify!(iMethodValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_SAVE_IMAGE_PARAM_T_EX_>())).nReserved as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_SAVE_IMAGE_PARAM_T_EX_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_SAVE_IMAGE_PARAM_EX = _MV_SAVE_IMAGE_PARAM_T_EX_;
#[doc = " \\~chinese \u{56fe}\u{50cf}\u{8f6c}\u{6362}\u{7ed3}\u{6784}\u{4f53}    \\~english Pixel convert structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MV_PIXEL_CONVERT_PARAM_T_ {
    #[doc = "< [IN]  \\~chinese \u{56fe}\u{50cf}\u{5bbd}                          \\~english Width"]
    pub nWidth: ::std::os::raw::c_ushort,
    #[doc = "< [IN]  \\~chinese \u{56fe}\u{50cf}\u{9ad8}                          \\~english Height"]
    pub nHeight: ::std::os::raw::c_ushort,
    #[doc = "< [IN]  \\~chinese \u{6e90}\u{50cf}\u{7d20}\u{683c}\u{5f0f}                      \\~english Source pixel format"]
    pub enSrcPixelType: MvGvspPixelType,
    #[doc = "< [IN]  \\~chinese \u{8f93}\u{5165}\u{6570}\u{636e}\u{7f13}\u{5b58}                    \\~english Input data buffer"]
    pub pSrcData: *mut ::std::os::raw::c_uchar,
    #[doc = "< [IN]  \\~chinese \u{8f93}\u{5165}\u{6570}\u{636e}\u{5927}\u{5c0f}                    \\~english Input data size"]
    pub nSrcDataLen: ::std::os::raw::c_uint,
    #[doc = "< [IN]  \\~chinese \u{76ee}\u{6807}\u{50cf}\u{7d20}\u{683c}\u{5f0f}                    \\~english Destination pixel format"]
    pub enDstPixelType: MvGvspPixelType,
    #[doc = "< [OUT] \\~chinese \u{8f93}\u{51fa}\u{6570}\u{636e}\u{7f13}\u{5b58}                    \\~english Output data buffer"]
    pub pDstBuffer: *mut ::std::os::raw::c_uchar,
    #[doc = "< [OUT] \\~chinese \u{8f93}\u{51fa}\u{6570}\u{636e}\u{5927}\u{5c0f}                    \\~english Output data size"]
    pub nDstLen: ::std::os::raw::c_uint,
    #[doc = "< [IN]  \\~chinese \u{63d0}\u{4f9b}\u{7684}\u{8f93}\u{51fa}\u{7f13}\u{51b2}\u{533a}\u{5927}\u{5c0f}            \\~english Provided outbut buffer size"]
    pub nDstBufferSize: ::std::os::raw::c_uint,
    #[doc = "<       \\~chinese \u{9884}\u{7559}                            \\~english Reserved"]
    pub nRes: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout__MV_PIXEL_CONVERT_PARAM_T_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_PIXEL_CONVERT_PARAM_T_>(),
        72usize,
        concat!("Size of: ", stringify!(_MV_PIXEL_CONVERT_PARAM_T_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_PIXEL_CONVERT_PARAM_T_>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_PIXEL_CONVERT_PARAM_T_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_PIXEL_CONVERT_PARAM_T_>())).nWidth as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_PIXEL_CONVERT_PARAM_T_),
            "::",
            stringify!(nWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_PIXEL_CONVERT_PARAM_T_>())).nHeight as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_PIXEL_CONVERT_PARAM_T_),
            "::",
            stringify!(nHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_PIXEL_CONVERT_PARAM_T_>())).enSrcPixelType as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_PIXEL_CONVERT_PARAM_T_),
            "::",
            stringify!(enSrcPixelType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_PIXEL_CONVERT_PARAM_T_>())).pSrcData as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_PIXEL_CONVERT_PARAM_T_),
            "::",
            stringify!(pSrcData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_PIXEL_CONVERT_PARAM_T_>())).nSrcDataLen as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_PIXEL_CONVERT_PARAM_T_),
            "::",
            stringify!(nSrcDataLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_PIXEL_CONVERT_PARAM_T_>())).enDstPixelType as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_PIXEL_CONVERT_PARAM_T_),
            "::",
            stringify!(enDstPixelType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_PIXEL_CONVERT_PARAM_T_>())).pDstBuffer as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_PIXEL_CONVERT_PARAM_T_),
            "::",
            stringify!(pDstBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_PIXEL_CONVERT_PARAM_T_>())).nDstLen as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_PIXEL_CONVERT_PARAM_T_),
            "::",
            stringify!(nDstLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_PIXEL_CONVERT_PARAM_T_>())).nDstBufferSize as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_PIXEL_CONVERT_PARAM_T_),
            "::",
            stringify!(nDstBufferSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_PIXEL_CONVERT_PARAM_T_>())).nRes as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_PIXEL_CONVERT_PARAM_T_),
            "::",
            stringify!(nRes)
        )
    );
}
pub type MV_CC_PIXEL_CONVERT_PARAM = _MV_PIXEL_CONVERT_PARAM_T_;
#[doc = "< \\~chinese \u{5355}\u{5e27}\u{6a21}\u{5f0f}             \\~english Single Mode"]
pub const _MV_CAM_ACQUISITION_MODE__MV_ACQ_MODE_SINGLE: _MV_CAM_ACQUISITION_MODE_ = 0;
#[doc = "< \\~chinese \u{591a}\u{5e27}\u{6a21}\u{5f0f}             \\~english Multi Mode"]
pub const _MV_CAM_ACQUISITION_MODE__MV_ACQ_MODE_MUTLI: _MV_CAM_ACQUISITION_MODE_ = 1;
#[doc = "< \\~chinese \u{6301}\u{7eed}\u{91c7}\u{96c6}\u{6a21}\u{5f0f}         \\~english Continuous Mode"]
pub const _MV_CAM_ACQUISITION_MODE__MV_ACQ_MODE_CONTINUOUS: _MV_CAM_ACQUISITION_MODE_ = 2;
#[doc = " \\~chinese \u{91c7}\u{96c6}\u{6a21}\u{5f0f}    \\~english Acquisition mode"]
pub type _MV_CAM_ACQUISITION_MODE_ = u32;
pub use self::_MV_CAM_ACQUISITION_MODE_ as MV_CAM_ACQUISITION_MODE;
#[doc = "< \\~chinese \u{5173}\u{95ed}                 \\~english Single Mode"]
pub const _MV_CAM_GAIN_MODE__MV_GAIN_MODE_OFF: _MV_CAM_GAIN_MODE_ = 0;
#[doc = "< \\~chinese \u{4e00}\u{6b21}                 \\~english Multi Mode"]
pub const _MV_CAM_GAIN_MODE__MV_GAIN_MODE_ONCE: _MV_CAM_GAIN_MODE_ = 1;
#[doc = "< \\~chinese \u{8fde}\u{7eed}                 \\~english Continuous Mode"]
pub const _MV_CAM_GAIN_MODE__MV_GAIN_MODE_CONTINUOUS: _MV_CAM_GAIN_MODE_ = 2;
#[doc = " \\~chinese \u{589e}\u{76ca}\u{6a21}\u{5f0f}    \\~english Gain Mode"]
pub type _MV_CAM_GAIN_MODE_ = u32;
pub use self::_MV_CAM_GAIN_MODE_ as MV_CAM_GAIN_MODE;
#[doc = "< \\~chinese \u{65f6}\u{95f4}             \\~english Timed"]
pub const _MV_CAM_EXPOSURE_MODE__MV_EXPOSURE_MODE_TIMED: _MV_CAM_EXPOSURE_MODE_ = 0;
#[doc = "< \\~chinese \u{89e6}\u{53d1}\u{8109}\u{51b2}\u{5bbd}\u{5ea6}     \\~english TriggerWidth"]
pub const _MV_CAM_EXPOSURE_MODE__MV_EXPOSURE_MODE_TRIGGER_WIDTH: _MV_CAM_EXPOSURE_MODE_ = 1;
#[doc = " \\~chinese \u{66dd}\u{5149}\u{6a21}\u{5f0f}    \\~english Exposure Mode"]
pub type _MV_CAM_EXPOSURE_MODE_ = u32;
pub use self::_MV_CAM_EXPOSURE_MODE_ as MV_CAM_EXPOSURE_MODE;
#[doc = "< \\~chinese \u{5173}\u{95ed}              \\~english Off"]
pub const _MV_CAM_EXPOSURE_AUTO_MODE__MV_EXPOSURE_AUTO_MODE_OFF: _MV_CAM_EXPOSURE_AUTO_MODE_ = 0;
#[doc = "< \\~chinese \u{4e00}\u{6b21}              \\~english Once"]
pub const _MV_CAM_EXPOSURE_AUTO_MODE__MV_EXPOSURE_AUTO_MODE_ONCE: _MV_CAM_EXPOSURE_AUTO_MODE_ = 1;
#[doc = "< \\~chinese \u{8fde}\u{7eed}              \\~english Continuous"]
pub const _MV_CAM_EXPOSURE_AUTO_MODE__MV_EXPOSURE_AUTO_MODE_CONTINUOUS:
    _MV_CAM_EXPOSURE_AUTO_MODE_ = 2;
#[doc = " \\~chinese \u{81ea}\u{52a8}\u{66dd}\u{5149}\u{6a21}\u{5f0f}    \\~english Auto Exposure Mode"]
pub type _MV_CAM_EXPOSURE_AUTO_MODE_ = u32;
pub use self::_MV_CAM_EXPOSURE_AUTO_MODE_ as MV_CAM_EXPOSURE_AUTO_MODE;
#[doc = "< \\~chinese \u{5173}\u{95ed}               \\~english Off"]
pub const _MV_CAM_TRIGGER_MODE__MV_TRIGGER_MODE_OFF: _MV_CAM_TRIGGER_MODE_ = 0;
#[doc = "< \\~chinese \u{6253}\u{5f00}               \\~english ON"]
pub const _MV_CAM_TRIGGER_MODE__MV_TRIGGER_MODE_ON: _MV_CAM_TRIGGER_MODE_ = 1;
#[doc = " \\~chinese \u{89e6}\u{53d1}\u{6a21}\u{5f0f}    \\~english Trigger Mode"]
pub type _MV_CAM_TRIGGER_MODE_ = u32;
pub use self::_MV_CAM_TRIGGER_MODE_ as MV_CAM_TRIGGER_MODE;
#[doc = "< \\~chinese \u{7528}\u{6237}                 \\~english Gamma Selector User"]
pub const _MV_CAM_GAMMA_SELECTOR__MV_GAMMA_SELECTOR_USER: _MV_CAM_GAMMA_SELECTOR_ = 1;
#[doc = "< \\~chinese sRGB                 \\~english Gamma Selector sRGB"]
pub const _MV_CAM_GAMMA_SELECTOR__MV_GAMMA_SELECTOR_SRGB: _MV_CAM_GAMMA_SELECTOR_ = 2;
#[doc = " \\~chinese Gamma\u{9009}\u{62e9}\u{5668}    \\~english Gamma Selector"]
pub type _MV_CAM_GAMMA_SELECTOR_ = u32;
pub use self::_MV_CAM_GAMMA_SELECTOR_ as MV_CAM_GAMMA_SELECTOR;
#[doc = "< \\~chinese \u{5173}\u{95ed}         \\~english Off"]
pub const _MV_CAM_BALANCEWHITE_AUTO__MV_BALANCEWHITE_AUTO_OFF: _MV_CAM_BALANCEWHITE_AUTO_ = 0;
#[doc = "< \\~chinese \u{4e00}\u{6b21}         \\~english Once"]
pub const _MV_CAM_BALANCEWHITE_AUTO__MV_BALANCEWHITE_AUTO_ONCE: _MV_CAM_BALANCEWHITE_AUTO_ = 2;
#[doc = "< \\~chinese \u{8fde}\u{7eed}         \\~english Continuous"]
pub const _MV_CAM_BALANCEWHITE_AUTO__MV_BALANCEWHITE_AUTO_CONTINUOUS: _MV_CAM_BALANCEWHITE_AUTO_ =
    1;
#[doc = " \\~chinese \u{767d}\u{5e73}\u{8861}    \\~english White Balance"]
pub type _MV_CAM_BALANCEWHITE_AUTO_ = u32;
pub use self::_MV_CAM_BALANCEWHITE_AUTO_ as MV_CAM_BALANCEWHITE_AUTO;
#[doc = "< \\~chinese Line0        \\~english Line0"]
pub const _MV_CAM_TRIGGER_SOURCE__MV_TRIGGER_SOURCE_LINE0: _MV_CAM_TRIGGER_SOURCE_ = 0;
#[doc = "< \\~chinese Line1        \\~english Line0"]
pub const _MV_CAM_TRIGGER_SOURCE__MV_TRIGGER_SOURCE_LINE1: _MV_CAM_TRIGGER_SOURCE_ = 1;
#[doc = "< \\~chinese Line2        \\~english Line0"]
pub const _MV_CAM_TRIGGER_SOURCE__MV_TRIGGER_SOURCE_LINE2: _MV_CAM_TRIGGER_SOURCE_ = 2;
#[doc = "< \\~chinese Line3        \\~english Line3"]
pub const _MV_CAM_TRIGGER_SOURCE__MV_TRIGGER_SOURCE_LINE3: _MV_CAM_TRIGGER_SOURCE_ = 3;
#[doc = "< \\~chinese Conuter0     \\~english Conuter0"]
pub const _MV_CAM_TRIGGER_SOURCE__MV_TRIGGER_SOURCE_COUNTER0: _MV_CAM_TRIGGER_SOURCE_ = 4;
#[doc = "< \\~chinese \u{8f6f}\u{89e6}\u{53d1}       \\~english Software"]
pub const _MV_CAM_TRIGGER_SOURCE__MV_TRIGGER_SOURCE_SOFTWARE: _MV_CAM_TRIGGER_SOURCE_ = 7;
#[doc = "< \\~chinese \u{53d8}\u{9891}\u{5668}       \\~english Frequency Converter"]
pub const _MV_CAM_TRIGGER_SOURCE__MV_TRIGGER_SOURCE_FrequencyConverter: _MV_CAM_TRIGGER_SOURCE_ = 8;
#[doc = " \\~chinese \u{89e6}\u{53d1}\u{6e90}    \\~english Trigger Source"]
pub type _MV_CAM_TRIGGER_SOURCE_ = u32;
pub use self::_MV_CAM_TRIGGER_SOURCE_ as MV_CAM_TRIGGER_SOURCE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_EVENT_OUT_INFO_ {
    #[doc = "< [OUT] \\~chinese Event\u{540d}\u{79f0}     \\~english Event name"]
    pub EventName: [::std::os::raw::c_char; 128usize],
    #[doc = "< [OUT] \\~chinese Event\u{53f7}       \\~english Event ID"]
    pub nEventID: ::std::os::raw::c_ushort,
    #[doc = "< [OUT] \\~chinese \u{6d41}\u{901a}\u{9053}\u{5e8f}\u{53f7}    \\~english Circulation number"]
    pub nStreamChannel: ::std::os::raw::c_ushort,
    #[doc = "< [OUT] \\~chinese \u{5e27}\u{53f7}\u{9ad8}\u{4f4d}      \\~english BlockId high"]
    pub nBlockIdHigh: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{5e27}\u{53f7}\u{4f4e}\u{4f4d}      \\~english BlockId low"]
    pub nBlockIdLow: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{65f6}\u{95f4}\u{6233}\u{9ad8}\u{4f4d}    \\~english Timestramp high"]
    pub nTimestampHigh: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{65f6}\u{95f4}\u{6233}\u{4f4e}\u{4f4d}    \\~english Timestramp low"]
    pub nTimestampLow: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese Event\u{6570}\u{636e}     \\~english Event data"]
    pub pEventData: *mut ::std::os::raw::c_void,
    #[doc = "< [OUT] \\~chinese Event\u{6570}\u{636e}\u{957f}\u{5ea6} \\~english Event data len"]
    pub nEventDataSize: ::std::os::raw::c_uint,
    #[doc = "<       \\~chinese \u{9884}\u{7559}          \\~english Reserved"]
    pub nReserved: [::std::os::raw::c_uint; 16usize],
}
#[test]
fn bindgen_test_layout__MV_EVENT_OUT_INFO_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_EVENT_OUT_INFO_>(),
        232usize,
        concat!("Size of: ", stringify!(_MV_EVENT_OUT_INFO_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_EVENT_OUT_INFO_>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_EVENT_OUT_INFO_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_EVENT_OUT_INFO_>())).EventName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_EVENT_OUT_INFO_),
            "::",
            stringify!(EventName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_EVENT_OUT_INFO_>())).nEventID as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_EVENT_OUT_INFO_),
            "::",
            stringify!(nEventID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_EVENT_OUT_INFO_>())).nStreamChannel as *const _ as usize
        },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_EVENT_OUT_INFO_),
            "::",
            stringify!(nStreamChannel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_EVENT_OUT_INFO_>())).nBlockIdHigh as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_EVENT_OUT_INFO_),
            "::",
            stringify!(nBlockIdHigh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_EVENT_OUT_INFO_>())).nBlockIdLow as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_EVENT_OUT_INFO_),
            "::",
            stringify!(nBlockIdLow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_EVENT_OUT_INFO_>())).nTimestampHigh as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_EVENT_OUT_INFO_),
            "::",
            stringify!(nTimestampHigh)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_EVENT_OUT_INFO_>())).nTimestampLow as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_EVENT_OUT_INFO_),
            "::",
            stringify!(nTimestampLow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_EVENT_OUT_INFO_>())).pEventData as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_EVENT_OUT_INFO_),
            "::",
            stringify!(pEventData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_EVENT_OUT_INFO_>())).nEventDataSize as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_EVENT_OUT_INFO_),
            "::",
            stringify!(nEventDataSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_EVENT_OUT_INFO_>())).nReserved as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_EVENT_OUT_INFO_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_EVENT_OUT_INFO = _MV_EVENT_OUT_INFO_;
#[doc = " \\~chinese \u{6587}\u{4ef6}\u{5b58}\u{53d6}    \\~english File Access"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MV_CC_FILE_ACCESS_T {
    #[doc = "< [IN] \\~chinese \u{7528}\u{6237}\u{6587}\u{4ef6}\u{540d}     \\~english User file name"]
    pub pUserFileName: *const ::std::os::raw::c_char,
    #[doc = "< [IN] \\~chinese \u{8bbe}\u{5907}\u{6587}\u{4ef6}\u{540d}     \\~english Device file name"]
    pub pDevFileName: *const ::std::os::raw::c_char,
    #[doc = "<      \\~chinese \u{9884}\u{7559}           \\~english Reserved"]
    pub nReserved: [::std::os::raw::c_uint; 32usize],
}
#[test]
fn bindgen_test_layout__MV_CC_FILE_ACCESS_T() {
    assert_eq!(
        ::std::mem::size_of::<_MV_CC_FILE_ACCESS_T>(),
        144usize,
        concat!("Size of: ", stringify!(_MV_CC_FILE_ACCESS_T))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_CC_FILE_ACCESS_T>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_CC_FILE_ACCESS_T))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_CC_FILE_ACCESS_T>())).pUserFileName as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CC_FILE_ACCESS_T),
            "::",
            stringify!(pUserFileName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_CC_FILE_ACCESS_T>())).pDevFileName as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CC_FILE_ACCESS_T),
            "::",
            stringify!(pDevFileName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_CC_FILE_ACCESS_T>())).nReserved as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CC_FILE_ACCESS_T),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_CC_FILE_ACCESS = _MV_CC_FILE_ACCESS_T;
#[doc = " \\~chinese \u{6587}\u{4ef6}\u{5b58}\u{53d6}\u{8fdb}\u{5ea6}    \\~english File Access Progress"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MV_CC_FILE_ACCESS_PROGRESS_T {
    #[doc = "< [OUT] \\~chinese \u{5df2}\u{5b8c}\u{6210}\u{7684}\u{957f}\u{5ea6}   \\~english Completed Length"]
    pub nCompleted: i64,
    #[doc = "< [OUT] \\~chinese \u{603b}\u{957f}\u{5ea6}         \\~english Total Length"]
    pub nTotal: i64,
    #[doc = "<       \\~chinese \u{9884}\u{7559}           \\~english Reserved"]
    pub nReserved: [::std::os::raw::c_uint; 8usize],
}
#[test]
fn bindgen_test_layout__MV_CC_FILE_ACCESS_PROGRESS_T() {
    assert_eq!(
        ::std::mem::size_of::<_MV_CC_FILE_ACCESS_PROGRESS_T>(),
        48usize,
        concat!("Size of: ", stringify!(_MV_CC_FILE_ACCESS_PROGRESS_T))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_CC_FILE_ACCESS_PROGRESS_T>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_CC_FILE_ACCESS_PROGRESS_T))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_CC_FILE_ACCESS_PROGRESS_T>())).nCompleted as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CC_FILE_ACCESS_PROGRESS_T),
            "::",
            stringify!(nCompleted)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_CC_FILE_ACCESS_PROGRESS_T>())).nTotal as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CC_FILE_ACCESS_PROGRESS_T),
            "::",
            stringify!(nTotal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_CC_FILE_ACCESS_PROGRESS_T>())).nReserved as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_CC_FILE_ACCESS_PROGRESS_T),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_CC_FILE_ACCESS_PROGRESS = _MV_CC_FILE_ACCESS_PROGRESS_T;
#[doc = "< \\~chinese \u{8868}\u{793a}\u{5355}\u{64ad}(\u{9ed8}\u{8ba4})                           \\~english Unicast mode"]
pub const _MV_GIGE_TRANSMISSION_TYPE__MV_GIGE_TRANSTYPE_UNICAST: _MV_GIGE_TRANSMISSION_TYPE_ = 0;
#[doc = "< \\~chinese \u{8868}\u{793a}\u{7ec4}\u{64ad}                                 \\~english Multicast mode"]
pub const _MV_GIGE_TRANSMISSION_TYPE__MV_GIGE_TRANSTYPE_MULTICAST: _MV_GIGE_TRANSMISSION_TYPE_ = 1;
#[doc = "< \\~chinese \u{8868}\u{793a}\u{5c40}\u{57df}\u{7f51}\u{5185}\u{5e7f}\u{64ad}\u{ff0c}\u{6682}\u{4e0d}\u{652f}\u{6301}               \\~english Limited broadcast mode,not support"]
pub const _MV_GIGE_TRANSMISSION_TYPE__MV_GIGE_TRANSTYPE_LIMITEDBROADCAST:
    _MV_GIGE_TRANSMISSION_TYPE_ = 2;
#[doc = "< \\~chinese \u{8868}\u{793a}\u{5b50}\u{7f51}\u{5185}\u{5e7f}\u{64ad}\u{ff0c}\u{6682}\u{4e0d}\u{652f}\u{6301}                 \\~english Subnet broadcast mode,not support"]
pub const _MV_GIGE_TRANSMISSION_TYPE__MV_GIGE_TRANSTYPE_SUBNETBROADCAST:
    _MV_GIGE_TRANSMISSION_TYPE_ = 3;
#[doc = "< \\~chinese \u{8868}\u{793a}\u{4ece}\u{8bbe}\u{5907}\u{83b7}\u{53d6}\u{ff0c}\u{6682}\u{4e0d}\u{652f}\u{6301}                 \\~english Transtype from camera,not support"]
pub const _MV_GIGE_TRANSMISSION_TYPE__MV_GIGE_TRANSTYPE_CAMERADEFINED: _MV_GIGE_TRANSMISSION_TYPE_ =
    4;
#[doc = "< \\~chinese \u{8868}\u{793a}\u{7528}\u{6237}\u{81ea}\u{5b9a}\u{4e49}\u{5e94}\u{7528}\u{7aef}\u{63a5}\u{6536}\u{56fe}\u{50cf}\u{6570}\u{636e}Port\u{53f7}   \\~english User Defined Receive Data Port"]
pub const _MV_GIGE_TRANSMISSION_TYPE__MV_GIGE_TRANSTYPE_UNICAST_DEFINED_PORT:
    _MV_GIGE_TRANSMISSION_TYPE_ = 5;
#[doc = "< \\~chinese \u{8868}\u{793a}\u{8bbe}\u{7f6e}\u{4e86}\u{5355}\u{64ad}\u{ff0c}\u{4f46}\u{672c}\u{5b9e}\u{4f8b}\u{4e0d}\u{63a5}\u{6536}\u{56fe}\u{50cf}\u{6570}\u{636e}   \\~english Unicast without receive data"]
pub const _MV_GIGE_TRANSMISSION_TYPE__MV_GIGE_TRANSTYPE_UNICAST_WITHOUT_RECV:
    _MV_GIGE_TRANSMISSION_TYPE_ = 65536;
#[doc = "< \\~chinese \u{8868}\u{793a}\u{7ec4}\u{64ad}\u{6a21}\u{5f0f}\u{ff0c}\u{4f46}\u{672c}\u{5b9e}\u{4f8b}\u{4e0d}\u{63a5}\u{6536}\u{56fe}\u{50cf}\u{6570}\u{636e}     \\~english Multicast without receive data"]
pub const _MV_GIGE_TRANSMISSION_TYPE__MV_GIGE_TRANSTYPE_MULTICAST_WITHOUT_RECV:
    _MV_GIGE_TRANSMISSION_TYPE_ = 65537;
#[doc = " \\~chinese Gige\u{7684}\u{4f20}\u{8f93}\u{7c7b}\u{578b}    \\~english The transmission type of Gige"]
pub type _MV_GIGE_TRANSMISSION_TYPE_ = u32;
pub use self::_MV_GIGE_TRANSMISSION_TYPE_ as MV_GIGE_TRANSMISSION_TYPE;
#[doc = " \\~chinese \u{4f20}\u{8f93}\u{6a21}\u{5f0f}\u{ff0c}\u{53ef}\u{4ee5}\u{4e3a}\u{5355}\u{64ad}\u{6a21}\u{5f0f}\u{3001}\u{7ec4}\u{64ad}\u{6a21}\u{5f0f}\u{7b49}    \\~english Transmission type"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MV_TRANSMISSION_TYPE_T {
    #[doc = "< [IN] \\~chinese \u{4f20}\u{8f93}\u{6a21}\u{5f0f}                                  \\~english Transmission type"]
    pub enTransmissionType: MV_GIGE_TRANSMISSION_TYPE,
    #[doc = "< [IN] \\~chinese \u{76ee}\u{6807}IP\u{ff0c}\u{7ec4}\u{64ad}\u{6a21}\u{5f0f}\u{4e0b}\u{6709}\u{610f}\u{4e49}                  \\~english Destination IP"]
    pub nDestIp: ::std::os::raw::c_uint,
    #[doc = "< [IN] \\~chinese \u{76ee}\u{6807}Port\u{ff0c}\u{7ec4}\u{64ad}\u{6a21}\u{5f0f}\u{4e0b}\u{6709}\u{610f}\u{4e49}                \\~english Destination port"]
    pub nDestPort: ::std::os::raw::c_ushort,
    #[doc = "<      \\~chinese \u{9884}\u{7559}                                      \\~english Reserved"]
    pub nReserved: [::std::os::raw::c_uint; 32usize],
}
#[test]
fn bindgen_test_layout__MV_TRANSMISSION_TYPE_T() {
    assert_eq!(
        ::std::mem::size_of::<_MV_TRANSMISSION_TYPE_T>(),
        140usize,
        concat!("Size of: ", stringify!(_MV_TRANSMISSION_TYPE_T))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_TRANSMISSION_TYPE_T>(),
        4usize,
        concat!("Alignment of ", stringify!(_MV_TRANSMISSION_TYPE_T))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_TRANSMISSION_TYPE_T>())).enTransmissionType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_TRANSMISSION_TYPE_T),
            "::",
            stringify!(enTransmissionType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_TRANSMISSION_TYPE_T>())).nDestIp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_TRANSMISSION_TYPE_T),
            "::",
            stringify!(nDestIp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_TRANSMISSION_TYPE_T>())).nDestPort as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_TRANSMISSION_TYPE_T),
            "::",
            stringify!(nDestPort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_TRANSMISSION_TYPE_T>())).nReserved as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_TRANSMISSION_TYPE_T),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_TRANSMISSION_TYPE = _MV_TRANSMISSION_TYPE_T;
#[doc = " \\~chinese \u{52a8}\u{4f5c}\u{547d}\u{4ee4}\u{4fe1}\u{606f}    \\~english Action Command"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MV_ACTION_CMD_INFO_T {
    #[doc = "< [IN] \\~chinese \u{8bbe}\u{5907}\u{5bc6}\u{94a5}                                      \\~english Device Key;"]
    pub nDeviceKey: ::std::os::raw::c_uint,
    #[doc = "< [IN] \\~chinese \u{7ec4}\u{952e}                                          \\~english Group Key"]
    pub nGroupKey: ::std::os::raw::c_uint,
    #[doc = "< [IN] \\~chinese \u{7ec4}\u{63a9}\u{7801}                                        \\~english Group Mask"]
    pub nGroupMask: ::std::os::raw::c_uint,
    #[doc = "< [IN] \\~chinese \u{53ea}\u{6709}\u{8bbe}\u{7f6e}\u{6210}1\u{65f6}Action Time\u{624d}\u{6709}\u{6548}\u{ff0c}\u{975e}1\u{65f6}\u{65e0}\u{6548}     \\~english Action Time Enable"]
    pub bActionTimeEnable: ::std::os::raw::c_uint,
    #[doc = "< [IN] \\~chinese \u{9884}\u{5b9a}\u{7684}\u{65f6}\u{95f4}\u{ff0c}\u{548c}\u{4e3b}\u{9891}\u{6709}\u{5173}                        \\~english Action Time"]
    pub nActionTime: i64,
    #[doc = "< [IN] \\~chinese \u{5e7f}\u{64ad}\u{5305}\u{5730}\u{5740}                                    \\~english Broadcast Address"]
    pub pBroadcastAddress: *const ::std::os::raw::c_char,
    #[doc = "< [IN] \\~chinese \u{7b49}\u{5f85}ACK\u{7684}\u{8d85}\u{65f6}\u{65f6}\u{95f4}\u{ff0c}\u{5982}\u{679c}\u{4e3a}0\u{8868}\u{793a}\u{4e0d}\u{9700}\u{8981}ACK       \\~english TimeOut"]
    pub nTimeOut: ::std::os::raw::c_uint,
    #[doc = "<      \\~chinese \u{9884}\u{7559}                                          \\~english Reserved"]
    pub nReserved: [::std::os::raw::c_uint; 16usize],
}
#[test]
fn bindgen_test_layout__MV_ACTION_CMD_INFO_T() {
    assert_eq!(
        ::std::mem::size_of::<_MV_ACTION_CMD_INFO_T>(),
        104usize,
        concat!("Size of: ", stringify!(_MV_ACTION_CMD_INFO_T))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_ACTION_CMD_INFO_T>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_ACTION_CMD_INFO_T))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_ACTION_CMD_INFO_T>())).nDeviceKey as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_ACTION_CMD_INFO_T),
            "::",
            stringify!(nDeviceKey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_ACTION_CMD_INFO_T>())).nGroupKey as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_ACTION_CMD_INFO_T),
            "::",
            stringify!(nGroupKey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_ACTION_CMD_INFO_T>())).nGroupMask as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_ACTION_CMD_INFO_T),
            "::",
            stringify!(nGroupMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_ACTION_CMD_INFO_T>())).bActionTimeEnable as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_ACTION_CMD_INFO_T),
            "::",
            stringify!(bActionTimeEnable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_ACTION_CMD_INFO_T>())).nActionTime as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_ACTION_CMD_INFO_T),
            "::",
            stringify!(nActionTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_ACTION_CMD_INFO_T>())).pBroadcastAddress as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_ACTION_CMD_INFO_T),
            "::",
            stringify!(pBroadcastAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_ACTION_CMD_INFO_T>())).nTimeOut as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_ACTION_CMD_INFO_T),
            "::",
            stringify!(nTimeOut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_ACTION_CMD_INFO_T>())).nReserved as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_ACTION_CMD_INFO_T),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_ACTION_CMD_INFO = _MV_ACTION_CMD_INFO_T;
#[doc = " \\~chinese \u{52a8}\u{4f5c}\u{547d}\u{4ee4}\u{8fd4}\u{56de}\u{4fe1}\u{606f}    \\~english Action Command Result"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MV_ACTION_CMD_RESULT_T {
    #[doc = "< [OUT] \\~chinese               \\~english IP address of the device"]
    pub strDeviceAddress: [::std::os::raw::c_uchar; 16usize],
    #[doc = "< [OUT] \\~chinese               \\~english status code returned by the device"]
    pub nStatus: ::std::os::raw::c_int,
    #[doc = "<      \\~chinese \u{9884}\u{7559}         \\~english Reserved"]
    pub nReserved: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout__MV_ACTION_CMD_RESULT_T() {
    assert_eq!(
        ::std::mem::size_of::<_MV_ACTION_CMD_RESULT_T>(),
        36usize,
        concat!("Size of: ", stringify!(_MV_ACTION_CMD_RESULT_T))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_ACTION_CMD_RESULT_T>(),
        4usize,
        concat!("Alignment of ", stringify!(_MV_ACTION_CMD_RESULT_T))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_ACTION_CMD_RESULT_T>())).strDeviceAddress as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_ACTION_CMD_RESULT_T),
            "::",
            stringify!(strDeviceAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_ACTION_CMD_RESULT_T>())).nStatus as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_ACTION_CMD_RESULT_T),
            "::",
            stringify!(nStatus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_ACTION_CMD_RESULT_T>())).nReserved as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_ACTION_CMD_RESULT_T),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_ACTION_CMD_RESULT = _MV_ACTION_CMD_RESULT_T;
#[doc = " \\~chinese \u{52a8}\u{4f5c}\u{547d}\u{4ee4}\u{8fd4}\u{56de}\u{4fe1}\u{606f}\u{5217}\u{8868}    \\~english Action Command Result List"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MV_ACTION_CMD_RESULT_LIST_T {
    #[doc = "< [OUT] \\~chinese \u{8fd4}\u{56de}\u{503c}\u{4e2a}\u{6570}   \\~english"]
    pub nNumResults: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese              \\~english"]
    pub pResults: *mut MV_ACTION_CMD_RESULT,
}
#[test]
fn bindgen_test_layout__MV_ACTION_CMD_RESULT_LIST_T() {
    assert_eq!(
        ::std::mem::size_of::<_MV_ACTION_CMD_RESULT_LIST_T>(),
        16usize,
        concat!("Size of: ", stringify!(_MV_ACTION_CMD_RESULT_LIST_T))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_ACTION_CMD_RESULT_LIST_T>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_ACTION_CMD_RESULT_LIST_T))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_ACTION_CMD_RESULT_LIST_T>())).nNumResults as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_ACTION_CMD_RESULT_LIST_T),
            "::",
            stringify!(nNumResults)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_ACTION_CMD_RESULT_LIST_T>())).pResults as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_ACTION_CMD_RESULT_LIST_T),
            "::",
            stringify!(pResults)
        )
    );
}
pub type MV_ACTION_CMD_RESULT_LIST = _MV_ACTION_CMD_RESULT_LIST_T;
#[doc = "< \\~chinese Value                        \\~english IValue interface"]
pub const MV_XML_InterfaceType_IFT_IValue: MV_XML_InterfaceType = 0;
#[doc = "< \\~chinese Base                         \\~english IBase interface"]
pub const MV_XML_InterfaceType_IFT_IBase: MV_XML_InterfaceType = 1;
#[doc = "< \\~chinese Integer                      \\~english IInteger interface"]
pub const MV_XML_InterfaceType_IFT_IInteger: MV_XML_InterfaceType = 2;
#[doc = "< \\~chinese Boolean                      \\~english IBoolean interface"]
pub const MV_XML_InterfaceType_IFT_IBoolean: MV_XML_InterfaceType = 3;
#[doc = "< \\~chinese Command                      \\~english ICommand interface"]
pub const MV_XML_InterfaceType_IFT_ICommand: MV_XML_InterfaceType = 4;
#[doc = "< \\~chinese Float                        \\~english IFloat interface"]
pub const MV_XML_InterfaceType_IFT_IFloat: MV_XML_InterfaceType = 5;
#[doc = "< \\~chinese String                       \\~english IString interface"]
pub const MV_XML_InterfaceType_IFT_IString: MV_XML_InterfaceType = 6;
#[doc = "< \\~chinese Register                     \\~english IRegister interface"]
pub const MV_XML_InterfaceType_IFT_IRegister: MV_XML_InterfaceType = 7;
#[doc = "< \\~chinese Category                     \\~english ICategory interface"]
pub const MV_XML_InterfaceType_IFT_ICategory: MV_XML_InterfaceType = 8;
#[doc = "< \\~chinese Enumeration                  \\~english IEnumeration interface"]
pub const MV_XML_InterfaceType_IFT_IEnumeration: MV_XML_InterfaceType = 9;
#[doc = "< \\~chinese EnumEntry                    \\~english IEnumEntry interface"]
pub const MV_XML_InterfaceType_IFT_IEnumEntry: MV_XML_InterfaceType = 10;
#[doc = "< \\~chinese Port                         \\~english IPort interface"]
pub const MV_XML_InterfaceType_IFT_IPort: MV_XML_InterfaceType = 11;
#[doc = " \\~chinese \u{6bcf}\u{4e2a}\u{8282}\u{70b9}\u{5bf9}\u{5e94}\u{7684}\u{63a5}\u{53e3}\u{7c7b}\u{578b}    \\~english Interface type corresponds to each node"]
pub type MV_XML_InterfaceType = u32;
#[doc = "< \\~chinese \u{4e0d}\u{53ef}\u{5b9e}\u{73b0}                     \\~english Not implemented"]
pub const MV_XML_AccessMode_AM_NI: MV_XML_AccessMode = 0;
#[doc = "< \\~chinese \u{4e0d}\u{53ef}\u{7528}                       \\~english Not available"]
pub const MV_XML_AccessMode_AM_NA: MV_XML_AccessMode = 1;
#[doc = "< \\~chinese \u{53ea}\u{5199}                         \\~english Write Only"]
pub const MV_XML_AccessMode_AM_WO: MV_XML_AccessMode = 2;
#[doc = "< \\~chinese \u{53ea}\u{8bfb}                         \\~english Read Only"]
pub const MV_XML_AccessMode_AM_RO: MV_XML_AccessMode = 3;
#[doc = "< \\~chinese \u{8bfb}\u{5199}                         \\~english Read and Write"]
pub const MV_XML_AccessMode_AM_RW: MV_XML_AccessMode = 4;
#[doc = "< \\~chinese \u{672a}\u{5b9a}\u{4e49}                       \\~english Object is not yet initialized"]
pub const MV_XML_AccessMode_AM_Undefined: MV_XML_AccessMode = 5;
#[doc = "< \\~chinese \u{5185}\u{90e8}\u{7528}\u{4e8e}AccessMode\u{5faa}\u{73af}\u{68c0}\u{6d4b}   \\~english used internally for AccessMode cycle detection"]
pub const MV_XML_AccessMode_AM_CycleDetect: MV_XML_AccessMode = 6;
#[doc = " \\~chinese \u{8282}\u{70b9}\u{7684}\u{8bbf}\u{95ee}\u{6a21}\u{5f0f}    \\~english Node Access Mode"]
pub type MV_XML_AccessMode = u32;
#[doc = " \\~chinese \u{6700}\u{5927}XML\u{7b26}\u{53f7}\u{6570}               \\~english Max XML Symbolic Number"]
#[doc = " \\~chinese \u{679a}\u{4e3e}\u{7c7b}\u{578b}\u{503c}    \\~english Enumeration Value"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MVCC_ENUMVALUE_T {
    #[doc = "< [OUT] \\~chinese \u{5f53}\u{524d}\u{503c}               \\~english Current Value"]
    pub nCurValue: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{6570}\u{636e}\u{7684}\u{6709}\u{6548}\u{6570}\u{636e}\u{4e2a}\u{6570}   \\~english Number of valid data"]
    pub nSupportedNum: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{652f}\u{6301}\u{7684}\u{679a}\u{4e3e}\u{503c}         \\~english Support Value"]
    pub nSupportValue: [::std::os::raw::c_uint; 64usize],
    #[doc = "<       \\~chinese \u{9884}\u{7559}                 \\~english Reserved"]
    pub nReserved: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout__MVCC_ENUMVALUE_T() {
    assert_eq!(
        ::std::mem::size_of::<_MVCC_ENUMVALUE_T>(),
        280usize,
        concat!("Size of: ", stringify!(_MVCC_ENUMVALUE_T))
    );
    assert_eq!(
        ::std::mem::align_of::<_MVCC_ENUMVALUE_T>(),
        4usize,
        concat!("Alignment of ", stringify!(_MVCC_ENUMVALUE_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MVCC_ENUMVALUE_T>())).nCurValue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MVCC_ENUMVALUE_T),
            "::",
            stringify!(nCurValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MVCC_ENUMVALUE_T>())).nSupportedNum as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MVCC_ENUMVALUE_T),
            "::",
            stringify!(nSupportedNum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MVCC_ENUMVALUE_T>())).nSupportValue as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MVCC_ENUMVALUE_T),
            "::",
            stringify!(nSupportValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MVCC_ENUMVALUE_T>())).nReserved as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_MVCC_ENUMVALUE_T),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MVCC_ENUMVALUE = _MVCC_ENUMVALUE_T;
#[doc = " \\~chinese Int\u{7c7b}\u{578b}\u{503c}    \\~english Int Value"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MVCC_INTVALUE_T {
    #[doc = "< [OUT] \\~chinese \u{5f53}\u{524d}\u{503c}               \\~english Current Value"]
    pub nCurValue: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{6700}\u{5927}\u{503c}               \\~english Max"]
    pub nMax: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese \u{6700}\u{5c0f}\u{503c}               \\~english Min"]
    pub nMin: ::std::os::raw::c_uint,
    #[doc = "< [OUT] \\~chinese                      \\~english Inc"]
    pub nInc: ::std::os::raw::c_uint,
    #[doc = "<       \\~chinese \u{9884}\u{7559}                 \\~english Reserved"]
    pub nReserved: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout__MVCC_INTVALUE_T() {
    assert_eq!(
        ::std::mem::size_of::<_MVCC_INTVALUE_T>(),
        32usize,
        concat!("Size of: ", stringify!(_MVCC_INTVALUE_T))
    );
    assert_eq!(
        ::std::mem::align_of::<_MVCC_INTVALUE_T>(),
        4usize,
        concat!("Alignment of ", stringify!(_MVCC_INTVALUE_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MVCC_INTVALUE_T>())).nCurValue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MVCC_INTVALUE_T),
            "::",
            stringify!(nCurValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MVCC_INTVALUE_T>())).nMax as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MVCC_INTVALUE_T),
            "::",
            stringify!(nMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MVCC_INTVALUE_T>())).nMin as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MVCC_INTVALUE_T),
            "::",
            stringify!(nMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MVCC_INTVALUE_T>())).nInc as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MVCC_INTVALUE_T),
            "::",
            stringify!(nInc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MVCC_INTVALUE_T>())).nReserved as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MVCC_INTVALUE_T),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MVCC_INTVALUE = _MVCC_INTVALUE_T;
#[doc = " \\~chinese Int\u{7c7b}\u{578b}\u{503c}Ex    \\~english Int Value Ex"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MVCC_INTVALUE_EX_T {
    #[doc = "< [OUT] \\~chinese \u{5f53}\u{524d}\u{503c}               \\~english Current Value"]
    pub nCurValue: i64,
    #[doc = "< [OUT] \\~chinese \u{6700}\u{5927}\u{503c}               \\~english Max"]
    pub nMax: i64,
    #[doc = "< [OUT] \\~chinese \u{6700}\u{5c0f}\u{503c}               \\~english Min"]
    pub nMin: i64,
    #[doc = "< [OUT] \\~chinese Inc                  \\~english Inc"]
    pub nInc: i64,
    #[doc = "<       \\~chinese \u{9884}\u{7559}                 \\~english Reserved"]
    pub nReserved: [::std::os::raw::c_uint; 16usize],
}
#[test]
fn bindgen_test_layout__MVCC_INTVALUE_EX_T() {
    assert_eq!(
        ::std::mem::size_of::<_MVCC_INTVALUE_EX_T>(),
        96usize,
        concat!("Size of: ", stringify!(_MVCC_INTVALUE_EX_T))
    );
    assert_eq!(
        ::std::mem::align_of::<_MVCC_INTVALUE_EX_T>(),
        8usize,
        concat!("Alignment of ", stringify!(_MVCC_INTVALUE_EX_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MVCC_INTVALUE_EX_T>())).nCurValue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MVCC_INTVALUE_EX_T),
            "::",
            stringify!(nCurValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MVCC_INTVALUE_EX_T>())).nMax as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MVCC_INTVALUE_EX_T),
            "::",
            stringify!(nMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MVCC_INTVALUE_EX_T>())).nMin as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MVCC_INTVALUE_EX_T),
            "::",
            stringify!(nMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MVCC_INTVALUE_EX_T>())).nInc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MVCC_INTVALUE_EX_T),
            "::",
            stringify!(nInc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MVCC_INTVALUE_EX_T>())).nReserved as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_MVCC_INTVALUE_EX_T),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MVCC_INTVALUE_EX = _MVCC_INTVALUE_EX_T;
#[doc = " \\~chinese Float\u{7c7b}\u{578b}\u{503c}    \\~english Float Value"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MVCC_FLOATVALUE_T {
    #[doc = "< [OUT] \\~chinese \u{5f53}\u{524d}\u{503c}               \\~english Current Value"]
    pub fCurValue: f32,
    #[doc = "< [OUT] \\~chinese \u{6700}\u{5927}\u{503c}               \\~english Max"]
    pub fMax: f32,
    #[doc = "< [OUT] \\~chinese \u{6700}\u{5c0f}\u{503c}               \\~english Min"]
    pub fMin: f32,
    #[doc = "<       \\~chinese \u{9884}\u{7559}                 \\~english Reserved"]
    pub nReserved: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout__MVCC_FLOATVALUE_T() {
    assert_eq!(
        ::std::mem::size_of::<_MVCC_FLOATVALUE_T>(),
        28usize,
        concat!("Size of: ", stringify!(_MVCC_FLOATVALUE_T))
    );
    assert_eq!(
        ::std::mem::align_of::<_MVCC_FLOATVALUE_T>(),
        4usize,
        concat!("Alignment of ", stringify!(_MVCC_FLOATVALUE_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MVCC_FLOATVALUE_T>())).fCurValue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MVCC_FLOATVALUE_T),
            "::",
            stringify!(fCurValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MVCC_FLOATVALUE_T>())).fMax as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MVCC_FLOATVALUE_T),
            "::",
            stringify!(fMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MVCC_FLOATVALUE_T>())).fMin as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MVCC_FLOATVALUE_T),
            "::",
            stringify!(fMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MVCC_FLOATVALUE_T>())).nReserved as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MVCC_FLOATVALUE_T),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MVCC_FLOATVALUE = _MVCC_FLOATVALUE_T;
#[doc = " \\~chinese String\u{7c7b}\u{578b}\u{503c}    \\~english String Value"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MVCC_STRINGVALUE_T {
    #[doc = "< [OUT] \\~chinese \u{5f53}\u{524d}\u{503c}              \\~english Current Value"]
    pub chCurValue: [::std::os::raw::c_char; 256usize],
    #[doc = "< [OUT] \\~chinese \u{6700}\u{5927}\u{957f}\u{5ea6}            \\~english MaxLength"]
    pub nMaxLength: i64,
    #[doc = "<       \\~chinese \u{9884}\u{7559}                \\~english Reserved"]
    pub nReserved: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout__MVCC_STRINGVALUE_T() {
    assert_eq!(
        ::std::mem::size_of::<_MVCC_STRINGVALUE_T>(),
        272usize,
        concat!("Size of: ", stringify!(_MVCC_STRINGVALUE_T))
    );
    assert_eq!(
        ::std::mem::align_of::<_MVCC_STRINGVALUE_T>(),
        8usize,
        concat!("Alignment of ", stringify!(_MVCC_STRINGVALUE_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MVCC_STRINGVALUE_T>())).chCurValue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MVCC_STRINGVALUE_T),
            "::",
            stringify!(chCurValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MVCC_STRINGVALUE_T>())).nMaxLength as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_MVCC_STRINGVALUE_T),
            "::",
            stringify!(nMaxLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MVCC_STRINGVALUE_T>())).nReserved as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_MVCC_STRINGVALUE_T),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MVCC_STRINGVALUE = _MVCC_STRINGVALUE_T;
#[doc = " \\~chinese \u{8f93}\u{51fa}\u{5e27}\u{7684}\u{4fe1}\u{606f}             \\~english Output Frame Information"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MV_FRAME_OUT_INFO_ {
    #[doc = "< [OUT]  \\~chinese \u{56fe}\u{50cf}\u{5bbd}            \\~english Image Width"]
    pub nWidth: ::std::os::raw::c_ushort,
    #[doc = "< [OUT]  \\~chinese \u{56fe}\u{50cf}\u{9ad8}            \\~english Image Height"]
    pub nHeight: ::std::os::raw::c_ushort,
    #[doc = "< [OUT]  \\~chinese \u{50cf}\u{7d20}\u{683c}\u{5f0f}          \\~english Pixel Type"]
    pub enPixelType: MvGvspPixelType,
    #[doc = "< [OUT]  \\~chinese \u{5e27}\u{53f7}              \\~english Frame Number"]
    pub nFrameNum: ::std::os::raw::c_uint,
    #[doc = "< [OUT]  \\~chinese \u{65f6}\u{95f4}\u{6233}\u{9ad8}32\u{4f4d}      \\~english Timestamp high 32 bits"]
    pub nDevTimeStampHigh: ::std::os::raw::c_uint,
    #[doc = "< [OUT]  \\~chinese \u{65f6}\u{95f4}\u{6233}\u{4f4e}32\u{4f4d}      \\~english Timestamp low 32 bits"]
    pub nDevTimeStampLow: ::std::os::raw::c_uint,
    #[doc = "< [OUT]  \\~chinese \u{4fdd}\u{7559}\u{ff0c}8\u{5b57}\u{8282}\u{5bf9}\u{9f50}   \\~english Reserved, 8-byte aligned"]
    pub nReserved0: ::std::os::raw::c_uint,
    #[doc = "< [OUT]  \\~chinese \u{4e3b}\u{673a}\u{751f}\u{6210}\u{7684}\u{65f6}\u{95f4}\u{6233}  \\~english Host-generated timestamp"]
    pub nHostTimeStamp: i64,
    pub nFrameLen: ::std::os::raw::c_uint,
    pub nLostPacket: ::std::os::raw::c_uint,
    pub nReserved: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout__MV_FRAME_OUT_INFO_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_FRAME_OUT_INFO_>(),
        56usize,
        concat!("Size of: ", stringify!(_MV_FRAME_OUT_INFO_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_FRAME_OUT_INFO_>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_FRAME_OUT_INFO_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_>())).nWidth as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_),
            "::",
            stringify!(nWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_>())).nHeight as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_),
            "::",
            stringify!(nHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_>())).enPixelType as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_),
            "::",
            stringify!(enPixelType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_>())).nFrameNum as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_),
            "::",
            stringify!(nFrameNum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_>())).nDevTimeStampHigh as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_),
            "::",
            stringify!(nDevTimeStampHigh)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_>())).nDevTimeStampLow as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_),
            "::",
            stringify!(nDevTimeStampLow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_>())).nReserved0 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_),
            "::",
            stringify!(nReserved0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_>())).nHostTimeStamp as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_),
            "::",
            stringify!(nHostTimeStamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_>())).nFrameLen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_),
            "::",
            stringify!(nFrameLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_>())).nLostPacket as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_),
            "::",
            stringify!(nLostPacket)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_FRAME_OUT_INFO_>())).nReserved as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_FRAME_OUT_INFO_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_FRAME_OUT_INFO = _MV_FRAME_OUT_INFO_;
#[doc = " \\~chinese \u{4fdd}\u{5b58}\u{56fe}\u{7247}\u{53c2}\u{6570}            \\~english Save image type"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MV_SAVE_IMAGE_PARAM_T_ {
    #[doc = "< [IN]   \\~chinese \u{8f93}\u{5165}\u{6570}\u{636e}\u{7f13}\u{5b58}      \\~english Input Data Buffer"]
    pub pData: *mut ::std::os::raw::c_uchar,
    #[doc = "< [IN]   \\~chinese \u{8f93}\u{5165}\u{6570}\u{636e}\u{5927}\u{5c0f}      \\~english Input Data Size"]
    pub nDataLen: ::std::os::raw::c_uint,
    #[doc = "< [IN]   \\~chinese \u{8f93}\u{5165}\u{50cf}\u{7d20}\u{683c}\u{5f0f}      \\~english Input Data Pixel Format"]
    pub enPixelType: MvGvspPixelType,
    #[doc = "< [IN]   \\~chinese \u{56fe}\u{50cf}\u{5bbd}            \\~english Image Width"]
    pub nWidth: ::std::os::raw::c_ushort,
    #[doc = "< [IN]   \\~chinese \u{56fe}\u{50cf}\u{9ad8}            \\~english Image Height"]
    pub nHeight: ::std::os::raw::c_ushort,
    #[doc = "< [OUT]  \\~chinese \u{8f93}\u{51fa}\u{56fe}\u{7247}\u{7f13}\u{5b58}      \\~english Output Image Buffer"]
    pub pImageBuffer: *mut ::std::os::raw::c_uchar,
    #[doc = "< [OUT]  \\~chinese \u{8f93}\u{51fa}\u{56fe}\u{7247}\u{5927}\u{5c0f}      \\~english Output Image Size"]
    pub nImageLen: ::std::os::raw::c_uint,
    #[doc = "< [IN]   \\~chinese \u{63d0}\u{4f9b}\u{7684}\u{8f93}\u{51fa}\u{7f13}\u{51b2}\u{533a}\u{5927}\u{5c0f}  \\~english Output buffer size provided"]
    pub nBufferSize: ::std::os::raw::c_uint,
    #[doc = "< [IN]   \\~chinese \u{8f93}\u{51fa}\u{56fe}\u{7247}\u{683c}\u{5f0f}      \\~english Output Image Format"]
    pub enImageType: MV_SAVE_IAMGE_TYPE,
}
#[test]
fn bindgen_test_layout__MV_SAVE_IMAGE_PARAM_T_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_SAVE_IMAGE_PARAM_T_>(),
        56usize,
        concat!("Size of: ", stringify!(_MV_SAVE_IMAGE_PARAM_T_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_SAVE_IMAGE_PARAM_T_>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_SAVE_IMAGE_PARAM_T_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_SAVE_IMAGE_PARAM_T_>())).pData as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_SAVE_IMAGE_PARAM_T_),
            "::",
            stringify!(pData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_SAVE_IMAGE_PARAM_T_>())).nDataLen as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_SAVE_IMAGE_PARAM_T_),
            "::",
            stringify!(nDataLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_SAVE_IMAGE_PARAM_T_>())).enPixelType as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_SAVE_IMAGE_PARAM_T_),
            "::",
            stringify!(enPixelType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_SAVE_IMAGE_PARAM_T_>())).nWidth as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_SAVE_IMAGE_PARAM_T_),
            "::",
            stringify!(nWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_SAVE_IMAGE_PARAM_T_>())).nHeight as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_SAVE_IMAGE_PARAM_T_),
            "::",
            stringify!(nHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_SAVE_IMAGE_PARAM_T_>())).pImageBuffer as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_SAVE_IMAGE_PARAM_T_),
            "::",
            stringify!(pImageBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_SAVE_IMAGE_PARAM_T_>())).nImageLen as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_SAVE_IMAGE_PARAM_T_),
            "::",
            stringify!(nImageLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_SAVE_IMAGE_PARAM_T_>())).nBufferSize as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_SAVE_IMAGE_PARAM_T_),
            "::",
            stringify!(nBufferSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_SAVE_IMAGE_PARAM_T_>())).enImageType as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_SAVE_IMAGE_PARAM_T_),
            "::",
            stringify!(enImageType)
        )
    );
}
pub type MV_SAVE_IMAGE_PARAM = _MV_SAVE_IMAGE_PARAM_T_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_IMAGE_BASIC_INFO_ {
    pub nWidthValue: ::std::os::raw::c_ushort,
    pub nWidthMin: ::std::os::raw::c_ushort,
    pub nWidthMax: ::std::os::raw::c_uint,
    pub nWidthInc: ::std::os::raw::c_uint,
    pub nHeightValue: ::std::os::raw::c_uint,
    pub nHeightMin: ::std::os::raw::c_uint,
    pub nHeightMax: ::std::os::raw::c_uint,
    pub nHeightInc: ::std::os::raw::c_uint,
    pub fFrameRateValue: f32,
    pub fFrameRateMin: f32,
    pub fFrameRateMax: f32,
    #[doc = "< [OUT]  \\~chinese \u{5f53}\u{524d}\u{7684}\u{50cf}\u{7d20}\u{683c}\u{5f0f}    \\~english Current pixel format"]
    pub enPixelType: ::std::os::raw::c_uint,
    #[doc = "< [OUT]  \\~chinese \u{652f}\u{6301}\u{7684}\u{50cf}\u{7d20}\u{683c}\u{5f0f}\u{79cd}\u{7c7b}    \\~english Support pixel format"]
    pub nSupportedPixelFmtNum: ::std::os::raw::c_uint,
    pub enPixelList: [::std::os::raw::c_uint; 64usize],
    pub nReserved: [::std::os::raw::c_uint; 8usize],
}
#[test]
fn bindgen_test_layout__MV_IMAGE_BASIC_INFO_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_IMAGE_BASIC_INFO_>(),
        336usize,
        concat!("Size of: ", stringify!(_MV_IMAGE_BASIC_INFO_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_IMAGE_BASIC_INFO_>(),
        4usize,
        concat!("Alignment of ", stringify!(_MV_IMAGE_BASIC_INFO_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_IMAGE_BASIC_INFO_>())).nWidthValue as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_IMAGE_BASIC_INFO_),
            "::",
            stringify!(nWidthValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_IMAGE_BASIC_INFO_>())).nWidthMin as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_IMAGE_BASIC_INFO_),
            "::",
            stringify!(nWidthMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_IMAGE_BASIC_INFO_>())).nWidthMax as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_IMAGE_BASIC_INFO_),
            "::",
            stringify!(nWidthMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_IMAGE_BASIC_INFO_>())).nWidthInc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_IMAGE_BASIC_INFO_),
            "::",
            stringify!(nWidthInc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_IMAGE_BASIC_INFO_>())).nHeightValue as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_IMAGE_BASIC_INFO_),
            "::",
            stringify!(nHeightValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_IMAGE_BASIC_INFO_>())).nHeightMin as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_IMAGE_BASIC_INFO_),
            "::",
            stringify!(nHeightMin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_IMAGE_BASIC_INFO_>())).nHeightMax as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_IMAGE_BASIC_INFO_),
            "::",
            stringify!(nHeightMax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_IMAGE_BASIC_INFO_>())).nHeightInc as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_IMAGE_BASIC_INFO_),
            "::",
            stringify!(nHeightInc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_IMAGE_BASIC_INFO_>())).fFrameRateValue as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_IMAGE_BASIC_INFO_),
            "::",
            stringify!(fFrameRateValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_IMAGE_BASIC_INFO_>())).fFrameRateMin as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_IMAGE_BASIC_INFO_),
            "::",
            stringify!(fFrameRateMin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_IMAGE_BASIC_INFO_>())).fFrameRateMax as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_IMAGE_BASIC_INFO_),
            "::",
            stringify!(fFrameRateMax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_IMAGE_BASIC_INFO_>())).enPixelType as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_IMAGE_BASIC_INFO_),
            "::",
            stringify!(enPixelType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_IMAGE_BASIC_INFO_>())).nSupportedPixelFmtNum as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_IMAGE_BASIC_INFO_),
            "::",
            stringify!(nSupportedPixelFmtNum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_IMAGE_BASIC_INFO_>())).enPixelList as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_IMAGE_BASIC_INFO_),
            "::",
            stringify!(enPixelList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_IMAGE_BASIC_INFO_>())).nReserved as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_IMAGE_BASIC_INFO_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_IMAGE_BASIC_INFO = _MV_IMAGE_BASIC_INFO_;
#[doc = "< Always visible"]
pub const MV_XML_Visibility_V_Beginner: MV_XML_Visibility = 0;
#[doc = "< Visible for experts or Gurus"]
pub const MV_XML_Visibility_V_Expert: MV_XML_Visibility = 1;
#[doc = "< Visible for Gurus"]
pub const MV_XML_Visibility_V_Guru: MV_XML_Visibility = 2;
#[doc = "< Not Visible"]
pub const MV_XML_Visibility_V_Invisible: MV_XML_Visibility = 3;
#[doc = "< Object is not yet initialized"]
pub const MV_XML_Visibility_V_Undefined: MV_XML_Visibility = 99;
pub type MV_XML_Visibility = u32;
#[doc = " \\~chinese \u{5355}\u{4e2a}\u{8282}\u{70b9}\u{57fa}\u{672c}\u{5c5e}\u{6027} | en:Single Node Basic Attributes"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_XML_NODE_FEATURE_ {
    #[doc = "< \\~chinese \u{8282}\u{70b9}\u{7c7b}\u{578b}         \\~english Node Type"]
    pub enType: MV_XML_InterfaceType,
    #[doc = "< \\~chinese \u{662f}\u{5426}\u{53ef}\u{89c1}         \\~english Is visibility"]
    pub enVisivility: MV_XML_Visibility,
    #[doc = "< \\~chinese \u{8282}\u{70b9}\u{63cf}\u{8ff0},\u{76ee}\u{524d}\u{6682}\u{4e0d}\u{652f}\u{6301}   \\~english Node Description, NOT SUPPORT NOW"]
    pub strDescription: [::std::os::raw::c_char; 512usize],
    #[doc = "< \\~chinese \u{663e}\u{793a}\u{540d}\u{79f0}         \\~english Display Name"]
    pub strDisplayName: [::std::os::raw::c_char; 64usize],
    #[doc = "< \\~chinese \u{8282}\u{70b9}\u{540d}           \\~english Node Name"]
    pub strName: [::std::os::raw::c_char; 64usize],
    #[doc = "< \\~chinese \u{63d0}\u{793a}             \\~english Notice"]
    pub strToolTip: [::std::os::raw::c_char; 512usize],
    pub nReserved: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout__MV_XML_NODE_FEATURE_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_XML_NODE_FEATURE_>(),
        1176usize,
        concat!("Size of: ", stringify!(_MV_XML_NODE_FEATURE_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_XML_NODE_FEATURE_>(),
        4usize,
        concat!("Alignment of ", stringify!(_MV_XML_NODE_FEATURE_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_XML_NODE_FEATURE_>())).enType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_NODE_FEATURE_),
            "::",
            stringify!(enType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_NODE_FEATURE_>())).enVisivility as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_NODE_FEATURE_),
            "::",
            stringify!(enVisivility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_NODE_FEATURE_>())).strDescription as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_NODE_FEATURE_),
            "::",
            stringify!(strDescription)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_NODE_FEATURE_>())).strDisplayName as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_NODE_FEATURE_),
            "::",
            stringify!(strDisplayName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_XML_NODE_FEATURE_>())).strName as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_NODE_FEATURE_),
            "::",
            stringify!(strName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_NODE_FEATURE_>())).strToolTip as *const _ as usize
        },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_NODE_FEATURE_),
            "::",
            stringify!(strToolTip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_XML_NODE_FEATURE_>())).nReserved as *const _ as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_NODE_FEATURE_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_XML_NODE_FEATURE = _MV_XML_NODE_FEATURE_;
#[doc = " \\~chinese \u{8282}\u{70b9}\u{5217}\u{8868} | en:Node List"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_XML_NODES_LIST_ {
    #[doc = "< \\~chinese \u{8282}\u{70b9}\u{4e2a}\u{6570}             \\~english Node Number"]
    pub nNodeNum: ::std::os::raw::c_uint,
    pub stNodes: [MV_XML_NODE_FEATURE; 128usize],
}
#[test]
fn bindgen_test_layout__MV_XML_NODES_LIST_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_XML_NODES_LIST_>(),
        150532usize,
        concat!("Size of: ", stringify!(_MV_XML_NODES_LIST_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_XML_NODES_LIST_>(),
        4usize,
        concat!("Alignment of ", stringify!(_MV_XML_NODES_LIST_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_XML_NODES_LIST_>())).nNodeNum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_NODES_LIST_),
            "::",
            stringify!(nNodeNum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_XML_NODES_LIST_>())).stNodes as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_NODES_LIST_),
            "::",
            stringify!(stNodes)
        )
    );
}
pub type MV_XML_NODES_LIST = _MV_XML_NODES_LIST_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_XML_FEATURE_Value_ {
    #[doc = "< \\~chinese \u{8282}\u{70b9}\u{7c7b}\u{578b}         \\~english Node Type"]
    pub enType: MV_XML_InterfaceType,
    #[doc = "< \\~chinese \u{8282}\u{70b9}\u{63cf}\u{8ff0},\u{76ee}\u{524d}\u{6682}\u{4e0d}\u{652f}\u{6301}   \\~english Node Description, NOT SUPPORT NOW"]
    pub strDescription: [::std::os::raw::c_char; 512usize],
    #[doc = "< \\~chinese \u{663e}\u{793a}\u{540d}\u{79f0}         \\~english Display Name"]
    pub strDisplayName: [::std::os::raw::c_char; 64usize],
    #[doc = "< \\~chinese \u{8282}\u{70b9}\u{540d}           \\~english Node Name"]
    pub strName: [::std::os::raw::c_char; 64usize],
    #[doc = "< \\~chinese \u{63d0}\u{793a}             \\~english Notice"]
    pub strToolTip: [::std::os::raw::c_char; 512usize],
    pub nReserved: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout__MV_XML_FEATURE_Value_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_XML_FEATURE_Value_>(),
        1172usize,
        concat!("Size of: ", stringify!(_MV_XML_FEATURE_Value_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_XML_FEATURE_Value_>(),
        4usize,
        concat!("Alignment of ", stringify!(_MV_XML_FEATURE_Value_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_XML_FEATURE_Value_>())).enType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Value_),
            "::",
            stringify!(enType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Value_>())).strDescription as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Value_),
            "::",
            stringify!(strDescription)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Value_>())).strDisplayName as *const _ as usize
        },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Value_),
            "::",
            stringify!(strDisplayName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_XML_FEATURE_Value_>())).strName as *const _ as usize },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Value_),
            "::",
            stringify!(strName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Value_>())).strToolTip as *const _ as usize
        },
        644usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Value_),
            "::",
            stringify!(strToolTip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Value_>())).nReserved as *const _ as usize
        },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Value_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_XML_FEATURE_Value = _MV_XML_FEATURE_Value_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MV_XML_FEATURE_Base_ {
    #[doc = "< \\~chinese \u{8bbf}\u{95ee}\u{6a21}\u{5f0f}         \\~english Access Mode"]
    pub enAccessMode: MV_XML_AccessMode,
}
#[test]
fn bindgen_test_layout__MV_XML_FEATURE_Base_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_XML_FEATURE_Base_>(),
        4usize,
        concat!("Size of: ", stringify!(_MV_XML_FEATURE_Base_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_XML_FEATURE_Base_>(),
        4usize,
        concat!("Alignment of ", stringify!(_MV_XML_FEATURE_Base_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Base_>())).enAccessMode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Base_),
            "::",
            stringify!(enAccessMode)
        )
    );
}
pub type MV_XML_FEATURE_Base = _MV_XML_FEATURE_Base_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_XML_FEATURE_Integer_ {
    pub strName: [::std::os::raw::c_char; 64usize],
    pub strDisplayName: [::std::os::raw::c_char; 64usize],
    #[doc = "< \\~chinese \u{76ee}\u{524d}\u{6682}\u{4e0d}\u{652f}\u{6301}     \\~english NOT SUPPORT NOW"]
    pub strDescription: [::std::os::raw::c_char; 512usize],
    pub strToolTip: [::std::os::raw::c_char; 512usize],
    #[doc = "< \\~chinese \u{662f}\u{5426}\u{53ef}\u{89c1}         \\~english Visible"]
    pub enVisivility: MV_XML_Visibility,
    #[doc = "< \\~chinese \u{8bbf}\u{95ee}\u{6a21}\u{5f0f}         \\~english Access Mode"]
    pub enAccessMode: MV_XML_AccessMode,
    #[doc = "< \\~chinese \u{662f}\u{5426}\u{9501}\u{5b9a}\u{3002}0-\u{5426}\u{ff1b}1-\u{662f},\u{76ee}\u{524d}\u{6682}\u{4e0d}\u{652f}\u{6301}    \\~english Locked. 0-NO; 1-YES, NOT SUPPORT NOW"]
    pub bIsLocked: ::std::os::raw::c_int,
    #[doc = "< \\~chinese \u{5f53}\u{524d}\u{503c}           \\~english Current Value"]
    pub nValue: i64,
    #[doc = "< \\~chinese \u{6700}\u{5c0f}\u{503c}           \\~english Min Value"]
    pub nMinValue: i64,
    #[doc = "< \\~chinese \u{6700}\u{5927}\u{503c}           \\~english Max Value"]
    pub nMaxValue: i64,
    #[doc = "< \\~chinese \u{589e}\u{91cf}             \\~english Increment"]
    pub nIncrement: i64,
    pub nReserved: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout__MV_XML_FEATURE_Integer_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_XML_FEATURE_Integer_>(),
        1216usize,
        concat!("Size of: ", stringify!(_MV_XML_FEATURE_Integer_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_XML_FEATURE_Integer_>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_XML_FEATURE_Integer_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Integer_>())).strName as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Integer_),
            "::",
            stringify!(strName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Integer_>())).strDisplayName as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Integer_),
            "::",
            stringify!(strDisplayName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Integer_>())).strDescription as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Integer_),
            "::",
            stringify!(strDescription)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Integer_>())).strToolTip as *const _ as usize
        },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Integer_),
            "::",
            stringify!(strToolTip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Integer_>())).enVisivility as *const _ as usize
        },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Integer_),
            "::",
            stringify!(enVisivility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Integer_>())).enAccessMode as *const _ as usize
        },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Integer_),
            "::",
            stringify!(enAccessMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Integer_>())).bIsLocked as *const _ as usize
        },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Integer_),
            "::",
            stringify!(bIsLocked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_XML_FEATURE_Integer_>())).nValue as *const _ as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Integer_),
            "::",
            stringify!(nValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Integer_>())).nMinValue as *const _ as usize
        },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Integer_),
            "::",
            stringify!(nMinValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Integer_>())).nMaxValue as *const _ as usize
        },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Integer_),
            "::",
            stringify!(nMaxValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Integer_>())).nIncrement as *const _ as usize
        },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Integer_),
            "::",
            stringify!(nIncrement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Integer_>())).nReserved as *const _ as usize
        },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Integer_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_XML_FEATURE_Integer = _MV_XML_FEATURE_Integer_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_XML_FEATURE_Boolean_ {
    pub strName: [::std::os::raw::c_char; 64usize],
    pub strDisplayName: [::std::os::raw::c_char; 64usize],
    #[doc = "< \\~chinese \u{76ee}\u{524d}\u{6682}\u{4e0d}\u{652f}\u{6301}     \\~english NOT SUPPORT NOW"]
    pub strDescription: [::std::os::raw::c_char; 512usize],
    pub strToolTip: [::std::os::raw::c_char; 512usize],
    #[doc = "< \\~chinese \u{662f}\u{5426}\u{53ef}\u{89c1}         \\~english Visible"]
    pub enVisivility: MV_XML_Visibility,
    #[doc = "< \\~chinese \u{8bbf}\u{95ee}\u{6a21}\u{5f0f}         \\~english Access Mode"]
    pub enAccessMode: MV_XML_AccessMode,
    #[doc = "< \\~chinese \u{662f}\u{5426}\u{9501}\u{5b9a}\u{3002}0-\u{5426}\u{ff1b}1-\u{662f},\u{76ee}\u{524d}\u{6682}\u{4e0d}\u{652f}\u{6301}    \\~english Locked. 0-NO; 1-YES, NOT SUPPORT NOW"]
    pub bIsLocked: ::std::os::raw::c_int,
    #[doc = "< \\~chinese \u{5f53}\u{524d}\u{503c}           \\~english Current Value"]
    pub bValue: bool_,
    pub nReserved: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout__MV_XML_FEATURE_Boolean_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_XML_FEATURE_Boolean_>(),
        1184usize,
        concat!("Size of: ", stringify!(_MV_XML_FEATURE_Boolean_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_XML_FEATURE_Boolean_>(),
        4usize,
        concat!("Alignment of ", stringify!(_MV_XML_FEATURE_Boolean_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Boolean_>())).strName as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Boolean_),
            "::",
            stringify!(strName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Boolean_>())).strDisplayName as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Boolean_),
            "::",
            stringify!(strDisplayName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Boolean_>())).strDescription as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Boolean_),
            "::",
            stringify!(strDescription)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Boolean_>())).strToolTip as *const _ as usize
        },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Boolean_),
            "::",
            stringify!(strToolTip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Boolean_>())).enVisivility as *const _ as usize
        },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Boolean_),
            "::",
            stringify!(enVisivility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Boolean_>())).enAccessMode as *const _ as usize
        },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Boolean_),
            "::",
            stringify!(enAccessMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Boolean_>())).bIsLocked as *const _ as usize
        },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Boolean_),
            "::",
            stringify!(bIsLocked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_XML_FEATURE_Boolean_>())).bValue as *const _ as usize },
        1164usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Boolean_),
            "::",
            stringify!(bValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Boolean_>())).nReserved as *const _ as usize
        },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Boolean_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_XML_FEATURE_Boolean = _MV_XML_FEATURE_Boolean_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_XML_FEATURE_Command_ {
    pub strName: [::std::os::raw::c_char; 64usize],
    pub strDisplayName: [::std::os::raw::c_char; 64usize],
    #[doc = "< \\~chinese \u{76ee}\u{524d}\u{6682}\u{4e0d}\u{652f}\u{6301}     \\~english NOT SUPPORT NOW"]
    pub strDescription: [::std::os::raw::c_char; 512usize],
    pub strToolTip: [::std::os::raw::c_char; 512usize],
    #[doc = "< \\~chinese \u{662f}\u{5426}\u{53ef}\u{89c1}         \\~english Visible"]
    pub enVisivility: MV_XML_Visibility,
    #[doc = "< \\~chinese \u{8bbf}\u{95ee}\u{6a21}\u{5f0f}         \\~english Access Mode"]
    pub enAccessMode: MV_XML_AccessMode,
    #[doc = "< \\~chinese \u{662f}\u{5426}\u{9501}\u{5b9a}\u{3002}0-\u{5426}\u{ff1b}1-\u{662f},\u{76ee}\u{524d}\u{6682}\u{4e0d}\u{652f}\u{6301}    \\~english Locked. 0-NO; 1-YES, NOT SUPPORT NOW"]
    pub bIsLocked: ::std::os::raw::c_int,
    pub nReserved: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout__MV_XML_FEATURE_Command_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_XML_FEATURE_Command_>(),
        1180usize,
        concat!("Size of: ", stringify!(_MV_XML_FEATURE_Command_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_XML_FEATURE_Command_>(),
        4usize,
        concat!("Alignment of ", stringify!(_MV_XML_FEATURE_Command_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Command_>())).strName as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Command_),
            "::",
            stringify!(strName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Command_>())).strDisplayName as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Command_),
            "::",
            stringify!(strDisplayName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Command_>())).strDescription as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Command_),
            "::",
            stringify!(strDescription)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Command_>())).strToolTip as *const _ as usize
        },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Command_),
            "::",
            stringify!(strToolTip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Command_>())).enVisivility as *const _ as usize
        },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Command_),
            "::",
            stringify!(enVisivility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Command_>())).enAccessMode as *const _ as usize
        },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Command_),
            "::",
            stringify!(enAccessMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Command_>())).bIsLocked as *const _ as usize
        },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Command_),
            "::",
            stringify!(bIsLocked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Command_>())).nReserved as *const _ as usize
        },
        1164usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Command_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_XML_FEATURE_Command = _MV_XML_FEATURE_Command_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_XML_FEATURE_Float_ {
    pub strName: [::std::os::raw::c_char; 64usize],
    pub strDisplayName: [::std::os::raw::c_char; 64usize],
    #[doc = "< \\~chinese \u{76ee}\u{524d}\u{6682}\u{4e0d}\u{652f}\u{6301}     \\~english NOT SUPPORT NOW"]
    pub strDescription: [::std::os::raw::c_char; 512usize],
    pub strToolTip: [::std::os::raw::c_char; 512usize],
    #[doc = "< \\~chinese \u{662f}\u{5426}\u{53ef}\u{89c1}         \\~english Visible"]
    pub enVisivility: MV_XML_Visibility,
    #[doc = "< \\~chinese \u{8bbf}\u{95ee}\u{6a21}\u{5f0f}         \\~english Access Mode"]
    pub enAccessMode: MV_XML_AccessMode,
    #[doc = "< \\~chinese \u{662f}\u{5426}\u{9501}\u{5b9a}\u{3002}0-\u{5426}\u{ff1b}1-\u{662f},\u{76ee}\u{524d}\u{6682}\u{4e0d}\u{652f}\u{6301}    \\~english Locked. 0-NO; 1-YES, NOT SUPPORT NOW"]
    pub bIsLocked: ::std::os::raw::c_int,
    #[doc = "< \\~chinese \u{5f53}\u{524d}\u{503c}           \\~english Current Value"]
    pub dfValue: f64,
    #[doc = "< \\~chinese \u{6700}\u{5c0f}\u{503c}           \\~english Min Value"]
    pub dfMinValue: f64,
    #[doc = "< \\~chinese \u{6700}\u{5927}\u{503c}           \\~english Max Value"]
    pub dfMaxValue: f64,
    #[doc = "< \\~chinese \u{589e}\u{91cf}             \\~english Increment"]
    pub dfIncrement: f64,
    pub nReserved: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout__MV_XML_FEATURE_Float_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_XML_FEATURE_Float_>(),
        1216usize,
        concat!("Size of: ", stringify!(_MV_XML_FEATURE_Float_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_XML_FEATURE_Float_>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_XML_FEATURE_Float_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_XML_FEATURE_Float_>())).strName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Float_),
            "::",
            stringify!(strName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Float_>())).strDisplayName as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Float_),
            "::",
            stringify!(strDisplayName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Float_>())).strDescription as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Float_),
            "::",
            stringify!(strDescription)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Float_>())).strToolTip as *const _ as usize
        },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Float_),
            "::",
            stringify!(strToolTip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Float_>())).enVisivility as *const _ as usize
        },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Float_),
            "::",
            stringify!(enVisivility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Float_>())).enAccessMode as *const _ as usize
        },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Float_),
            "::",
            stringify!(enAccessMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Float_>())).bIsLocked as *const _ as usize
        },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Float_),
            "::",
            stringify!(bIsLocked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_XML_FEATURE_Float_>())).dfValue as *const _ as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Float_),
            "::",
            stringify!(dfValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Float_>())).dfMinValue as *const _ as usize
        },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Float_),
            "::",
            stringify!(dfMinValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Float_>())).dfMaxValue as *const _ as usize
        },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Float_),
            "::",
            stringify!(dfMaxValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Float_>())).dfIncrement as *const _ as usize
        },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Float_),
            "::",
            stringify!(dfIncrement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Float_>())).nReserved as *const _ as usize
        },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Float_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_XML_FEATURE_Float = _MV_XML_FEATURE_Float_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_XML_FEATURE_String_ {
    pub strName: [::std::os::raw::c_char; 64usize],
    pub strDisplayName: [::std::os::raw::c_char; 64usize],
    #[doc = "< \\~chinese \u{76ee}\u{524d}\u{6682}\u{4e0d}\u{652f}\u{6301}     \\~english NOT SUPPORT NOW"]
    pub strDescription: [::std::os::raw::c_char; 512usize],
    pub strToolTip: [::std::os::raw::c_char; 512usize],
    #[doc = "< \\~chinese \u{662f}\u{5426}\u{53ef}\u{89c1}         \\~english Visible"]
    pub enVisivility: MV_XML_Visibility,
    #[doc = "< \\~chinese \u{8bbf}\u{95ee}\u{6a21}\u{5f0f}         \\~english Access Mode"]
    pub enAccessMode: MV_XML_AccessMode,
    #[doc = "< \\~chinese \u{662f}\u{5426}\u{9501}\u{5b9a}\u{3002}0-\u{5426}\u{ff1b}1-\u{662f},\u{76ee}\u{524d}\u{6682}\u{4e0d}\u{652f}\u{6301}    \\~english Locked. 0-NO; 1-YES, NOT SUPPORT NOW"]
    pub bIsLocked: ::std::os::raw::c_int,
    #[doc = "< \\~chinese \u{5f53}\u{524d}\u{503c}           \\~english Current Value"]
    pub strValue: [::std::os::raw::c_char; 64usize],
    pub nReserved: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout__MV_XML_FEATURE_String_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_XML_FEATURE_String_>(),
        1244usize,
        concat!("Size of: ", stringify!(_MV_XML_FEATURE_String_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_XML_FEATURE_String_>(),
        4usize,
        concat!("Alignment of ", stringify!(_MV_XML_FEATURE_String_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_XML_FEATURE_String_>())).strName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_String_),
            "::",
            stringify!(strName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_String_>())).strDisplayName as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_String_),
            "::",
            stringify!(strDisplayName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_String_>())).strDescription as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_String_),
            "::",
            stringify!(strDescription)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_String_>())).strToolTip as *const _ as usize
        },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_String_),
            "::",
            stringify!(strToolTip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_String_>())).enVisivility as *const _ as usize
        },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_String_),
            "::",
            stringify!(enVisivility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_String_>())).enAccessMode as *const _ as usize
        },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_String_),
            "::",
            stringify!(enAccessMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_String_>())).bIsLocked as *const _ as usize
        },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_String_),
            "::",
            stringify!(bIsLocked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_String_>())).strValue as *const _ as usize
        },
        1164usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_String_),
            "::",
            stringify!(strValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_String_>())).nReserved as *const _ as usize
        },
        1228usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_String_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_XML_FEATURE_String = _MV_XML_FEATURE_String_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_XML_FEATURE_Register_ {
    pub strName: [::std::os::raw::c_char; 64usize],
    pub strDisplayName: [::std::os::raw::c_char; 64usize],
    #[doc = "< \\~chinese \u{76ee}\u{524d}\u{6682}\u{4e0d}\u{652f}\u{6301}     \\~english NOT SUPPORT NOW"]
    pub strDescription: [::std::os::raw::c_char; 512usize],
    pub strToolTip: [::std::os::raw::c_char; 512usize],
    #[doc = "< \\~chinese \u{662f}\u{5426}\u{53ef}\u{89c1}         \\~english Visible"]
    pub enVisivility: MV_XML_Visibility,
    #[doc = "< \\~chinese \u{8bbf}\u{95ee}\u{6a21}\u{5f0f}         \\~english Access Mode"]
    pub enAccessMode: MV_XML_AccessMode,
    #[doc = "< \\~chinese \u{662f}\u{5426}\u{9501}\u{5b9a}\u{3002}0-\u{5426}\u{ff1b}1-\u{662f},\u{76ee}\u{524d}\u{6682}\u{4e0d}\u{652f}\u{6301}    \\~english Locked. 0-NO; 1-YES, NOT SUPPORT NOW"]
    pub bIsLocked: ::std::os::raw::c_int,
    #[doc = "< \\~chinese \u{5f53}\u{524d}\u{503c}           \\~english Current Value"]
    pub nAddrValue: i64,
    pub nReserved: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout__MV_XML_FEATURE_Register_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_XML_FEATURE_Register_>(),
        1192usize,
        concat!("Size of: ", stringify!(_MV_XML_FEATURE_Register_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_XML_FEATURE_Register_>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_XML_FEATURE_Register_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Register_>())).strName as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Register_),
            "::",
            stringify!(strName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Register_>())).strDisplayName as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Register_),
            "::",
            stringify!(strDisplayName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Register_>())).strDescription as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Register_),
            "::",
            stringify!(strDescription)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Register_>())).strToolTip as *const _ as usize
        },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Register_),
            "::",
            stringify!(strToolTip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Register_>())).enVisivility as *const _ as usize
        },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Register_),
            "::",
            stringify!(enVisivility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Register_>())).enAccessMode as *const _ as usize
        },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Register_),
            "::",
            stringify!(enAccessMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Register_>())).bIsLocked as *const _ as usize
        },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Register_),
            "::",
            stringify!(bIsLocked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Register_>())).nAddrValue as *const _ as usize
        },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Register_),
            "::",
            stringify!(nAddrValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Register_>())).nReserved as *const _ as usize
        },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Register_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_XML_FEATURE_Register = _MV_XML_FEATURE_Register_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_XML_FEATURE_Category_ {
    #[doc = "< \\~chinese \u{8282}\u{70b9}\u{63cf}\u{8ff0} \u{76ee}\u{524d}\u{6682}\u{4e0d}\u{652f}\u{6301}    \\~english Node Description, NOT SUPPORT NOW"]
    pub strDescription: [::std::os::raw::c_char; 512usize],
    #[doc = "< \\~chinese \u{663e}\u{793a}\u{540d}\u{79f0}         \\~english Display Name"]
    pub strDisplayName: [::std::os::raw::c_char; 64usize],
    #[doc = "< \\~chinese \u{8282}\u{70b9}\u{540d}           \\~english Node Name"]
    pub strName: [::std::os::raw::c_char; 64usize],
    #[doc = "< \\~chinese \u{63d0}\u{793a}             \\~english Notice"]
    pub strToolTip: [::std::os::raw::c_char; 512usize],
    #[doc = "< \\~chinese \u{662f}\u{5426}\u{53ef}\u{89c1}         \\~english Visible"]
    pub enVisivility: MV_XML_Visibility,
    pub nReserved: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout__MV_XML_FEATURE_Category_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_XML_FEATURE_Category_>(),
        1172usize,
        concat!("Size of: ", stringify!(_MV_XML_FEATURE_Category_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_XML_FEATURE_Category_>(),
        4usize,
        concat!("Alignment of ", stringify!(_MV_XML_FEATURE_Category_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Category_>())).strDescription as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Category_),
            "::",
            stringify!(strDescription)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Category_>())).strDisplayName as *const _
                as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Category_),
            "::",
            stringify!(strDisplayName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Category_>())).strName as *const _ as usize
        },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Category_),
            "::",
            stringify!(strName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Category_>())).strToolTip as *const _ as usize
        },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Category_),
            "::",
            stringify!(strToolTip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Category_>())).enVisivility as *const _ as usize
        },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Category_),
            "::",
            stringify!(enVisivility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Category_>())).nReserved as *const _ as usize
        },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Category_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_XML_FEATURE_Category = _MV_XML_FEATURE_Category_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_XML_FEATURE_EnumEntry_ {
    pub strName: [::std::os::raw::c_char; 64usize],
    pub strDisplayName: [::std::os::raw::c_char; 64usize],
    #[doc = "< \\~chinese \u{76ee}\u{524d}\u{6682}\u{4e0d}\u{652f}\u{6301}     \\~english NOT SUPPORT NOW"]
    pub strDescription: [::std::os::raw::c_char; 512usize],
    pub strToolTip: [::std::os::raw::c_char; 512usize],
    pub bIsImplemented: ::std::os::raw::c_int,
    pub nParentsNum: ::std::os::raw::c_int,
    pub stParentsList: [MV_XML_NODE_FEATURE; 8usize],
    #[doc = "< \\~chinese \u{662f}\u{5426}\u{53ef}\u{89c1}         \\~english Visible"]
    pub enVisivility: MV_XML_Visibility,
    #[doc = "< \\~chinese \u{5f53}\u{524d}\u{503c}           \\~english Current Value"]
    pub nValue: i64,
    #[doc = "< \\~chinese \u{8bbf}\u{95ee}\u{6a21}\u{5f0f}         \\~english Access Mode"]
    pub enAccessMode: MV_XML_AccessMode,
    #[doc = "< \\~chinese \u{662f}\u{5426}\u{9501}\u{5b9a}\u{3002}0-\u{5426}\u{ff1b}1-\u{662f},\u{76ee}\u{524d}\u{6682}\u{4e0d}\u{652f}\u{6301}    \\~english Locked. 0-NO; 1-YES, NOT SUPPORT NOW"]
    pub bIsLocked: ::std::os::raw::c_int,
    pub nReserved: [::std::os::raw::c_int; 8usize],
}
#[test]
fn bindgen_test_layout__MV_XML_FEATURE_EnumEntry_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_XML_FEATURE_EnumEntry_>(),
        10624usize,
        concat!("Size of: ", stringify!(_MV_XML_FEATURE_EnumEntry_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_XML_FEATURE_EnumEntry_>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_XML_FEATURE_EnumEntry_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_EnumEntry_>())).strName as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_EnumEntry_),
            "::",
            stringify!(strName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_EnumEntry_>())).strDisplayName as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_EnumEntry_),
            "::",
            stringify!(strDisplayName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_EnumEntry_>())).strDescription as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_EnumEntry_),
            "::",
            stringify!(strDescription)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_EnumEntry_>())).strToolTip as *const _ as usize
        },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_EnumEntry_),
            "::",
            stringify!(strToolTip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_EnumEntry_>())).bIsImplemented as *const _
                as usize
        },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_EnumEntry_),
            "::",
            stringify!(bIsImplemented)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_EnumEntry_>())).nParentsNum as *const _ as usize
        },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_EnumEntry_),
            "::",
            stringify!(nParentsNum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_EnumEntry_>())).stParentsList as *const _
                as usize
        },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_EnumEntry_),
            "::",
            stringify!(stParentsList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_EnumEntry_>())).enVisivility as *const _ as usize
        },
        10568usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_EnumEntry_),
            "::",
            stringify!(enVisivility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_EnumEntry_>())).nValue as *const _ as usize
        },
        10576usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_EnumEntry_),
            "::",
            stringify!(nValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_EnumEntry_>())).enAccessMode as *const _ as usize
        },
        10584usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_EnumEntry_),
            "::",
            stringify!(enAccessMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_EnumEntry_>())).bIsLocked as *const _ as usize
        },
        10588usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_EnumEntry_),
            "::",
            stringify!(bIsLocked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_EnumEntry_>())).nReserved as *const _ as usize
        },
        10592usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_EnumEntry_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_XML_FEATURE_EnumEntry = _MV_XML_FEATURE_EnumEntry_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_XML_FEATURE_Enumeration_ {
    #[doc = "< \\~chinese \u{662f}\u{5426}\u{53ef}\u{89c1}         \\~english Visible"]
    pub enVisivility: MV_XML_Visibility,
    #[doc = "< \\~chinese \u{8282}\u{70b9}\u{63cf}\u{8ff0} \u{76ee}\u{524d}\u{6682}\u{4e0d}\u{652f}\u{6301}    \\~english Node Description, NOT SUPPORT NOW"]
    pub strDescription: [::std::os::raw::c_char; 512usize],
    #[doc = "< \\~chinese \u{663e}\u{793a}\u{540d}\u{79f0}         \\~english Display Name"]
    pub strDisplayName: [::std::os::raw::c_char; 64usize],
    #[doc = "< \\~chinese \u{8282}\u{70b9}\u{540d}           \\~english Node Name"]
    pub strName: [::std::os::raw::c_char; 64usize],
    #[doc = "< \\~chinese \u{63d0}\u{793a}             \\~english Notice"]
    pub strToolTip: [::std::os::raw::c_char; 512usize],
    #[doc = "< \\~chinese ymbolic\u{6570}        \\~english Symbolic Number"]
    pub nSymbolicNum: ::std::os::raw::c_int,
    #[doc = "< \\~chinese \u{5f53}\u{524d}Symbolic\u{7d22}\u{5f15}    \\~english Current Symbolic Index"]
    pub strCurrentSymbolic: [::std::os::raw::c_char; 64usize],
    pub strSymbolic: [[::std::os::raw::c_char; 64usize]; 64usize],
    pub enAccessMode: MV_XML_AccessMode,
    #[doc = "< \\~chinese \u{662f}\u{5426}\u{9501}\u{5b9a}\u{3002}0-\u{5426}\u{ff1b}1-\u{662f},\u{76ee}\u{524d}\u{6682}\u{4e0d}\u{652f}\u{6301}    \\~english Locked. 0-NO; 1-YES, NOT SUPPORT NOW"]
    pub bIsLocked: ::std::os::raw::c_int,
    #[doc = "< \\~chinese \u{5f53}\u{524d}\u{503c}           \\~english Current Value"]
    pub nValue: i64,
    pub nReserved: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout__MV_XML_FEATURE_Enumeration_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_XML_FEATURE_Enumeration_>(),
        5352usize,
        concat!("Size of: ", stringify!(_MV_XML_FEATURE_Enumeration_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_XML_FEATURE_Enumeration_>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_XML_FEATURE_Enumeration_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Enumeration_>())).enVisivility as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Enumeration_),
            "::",
            stringify!(enVisivility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Enumeration_>())).strDescription as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Enumeration_),
            "::",
            stringify!(strDescription)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Enumeration_>())).strDisplayName as *const _
                as usize
        },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Enumeration_),
            "::",
            stringify!(strDisplayName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Enumeration_>())).strName as *const _ as usize
        },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Enumeration_),
            "::",
            stringify!(strName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Enumeration_>())).strToolTip as *const _ as usize
        },
        644usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Enumeration_),
            "::",
            stringify!(strToolTip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Enumeration_>())).nSymbolicNum as *const _
                as usize
        },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Enumeration_),
            "::",
            stringify!(nSymbolicNum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Enumeration_>())).strCurrentSymbolic as *const _
                as usize
        },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Enumeration_),
            "::",
            stringify!(strCurrentSymbolic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Enumeration_>())).strSymbolic as *const _
                as usize
        },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Enumeration_),
            "::",
            stringify!(strSymbolic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Enumeration_>())).enAccessMode as *const _
                as usize
        },
        5320usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Enumeration_),
            "::",
            stringify!(enAccessMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Enumeration_>())).bIsLocked as *const _ as usize
        },
        5324usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Enumeration_),
            "::",
            stringify!(bIsLocked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Enumeration_>())).nValue as *const _ as usize
        },
        5328usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Enumeration_),
            "::",
            stringify!(nValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Enumeration_>())).nReserved as *const _ as usize
        },
        5336usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Enumeration_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_XML_FEATURE_Enumeration = _MV_XML_FEATURE_Enumeration_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_XML_FEATURE_Port_ {
    #[doc = "< \\~chinese \u{662f}\u{5426}\u{53ef}\u{89c1}         \\~english Visible"]
    pub enVisivility: MV_XML_Visibility,
    #[doc = "< \\~chinese \u{8282}\u{70b9}\u{63cf}\u{8ff0},\u{76ee}\u{524d}\u{6682}\u{4e0d}\u{652f}\u{6301}    \\~english Node Description, NOT SUPPORT NOW"]
    pub strDescription: [::std::os::raw::c_char; 512usize],
    #[doc = "< \\~chinese \u{663e}\u{793a}\u{540d}\u{79f0}         \\~english Display Name"]
    pub strDisplayName: [::std::os::raw::c_char; 64usize],
    #[doc = "< \\~chinese \u{8282}\u{70b9}\u{540d}           \\~english Node Name"]
    pub strName: [::std::os::raw::c_char; 64usize],
    #[doc = "< \\~chinese \u{63d0}\u{793a}             \\~english Notice"]
    pub strToolTip: [::std::os::raw::c_char; 512usize],
    #[doc = "< \\~chinese \u{8bbf}\u{95ee}\u{6a21}\u{5f0f}         \\~english Access Mode"]
    pub enAccessMode: MV_XML_AccessMode,
    #[doc = "< \\~chinese \u{662f}\u{5426}\u{9501}\u{5b9a}\u{3002}0-\u{5426}\u{ff1b}1-\u{662f},\u{76ee}\u{524d}\u{6682}\u{4e0d}\u{652f}\u{6301}    \\~english Locked. 0-NO; 1-YES, NOT SUPPORT NOW"]
    pub bIsLocked: ::std::os::raw::c_int,
    pub nReserved: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout__MV_XML_FEATURE_Port_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_XML_FEATURE_Port_>(),
        1180usize,
        concat!("Size of: ", stringify!(_MV_XML_FEATURE_Port_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_XML_FEATURE_Port_>(),
        4usize,
        concat!("Alignment of ", stringify!(_MV_XML_FEATURE_Port_))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Port_>())).enVisivility as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Port_),
            "::",
            stringify!(enVisivility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Port_>())).strDescription as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Port_),
            "::",
            stringify!(strDescription)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Port_>())).strDisplayName as *const _ as usize
        },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Port_),
            "::",
            stringify!(strDisplayName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_XML_FEATURE_Port_>())).strName as *const _ as usize },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Port_),
            "::",
            stringify!(strName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Port_>())).strToolTip as *const _ as usize
        },
        644usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Port_),
            "::",
            stringify!(strToolTip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_FEATURE_Port_>())).enAccessMode as *const _ as usize
        },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Port_),
            "::",
            stringify!(enAccessMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_XML_FEATURE_Port_>())).bIsLocked as *const _ as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Port_),
            "::",
            stringify!(bIsLocked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_XML_FEATURE_Port_>())).nReserved as *const _ as usize },
        1164usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_FEATURE_Port_),
            "::",
            stringify!(nReserved)
        )
    );
}
pub type MV_XML_FEATURE_Port = _MV_XML_FEATURE_Port_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MV_XML_CAMERA_FEATURE_ {
    pub enType: MV_XML_InterfaceType,
    pub SpecialFeature: _MV_XML_CAMERA_FEATURE___bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _MV_XML_CAMERA_FEATURE___bindgen_ty_1 {
    pub stIntegerFeature: MV_XML_FEATURE_Integer,
    pub stFloatFeature: MV_XML_FEATURE_Float,
    pub stEnumerationFeature: MV_XML_FEATURE_Enumeration,
    pub stStringFeature: MV_XML_FEATURE_String,
    _bindgen_union_align: [u64; 669usize],
}
#[test]
fn bindgen_test_layout__MV_XML_CAMERA_FEATURE___bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_MV_XML_CAMERA_FEATURE___bindgen_ty_1>(),
        5352usize,
        concat!(
            "Size of: ",
            stringify!(_MV_XML_CAMERA_FEATURE___bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_XML_CAMERA_FEATURE___bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_MV_XML_CAMERA_FEATURE___bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_CAMERA_FEATURE___bindgen_ty_1>())).stIntegerFeature
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_CAMERA_FEATURE___bindgen_ty_1),
            "::",
            stringify!(stIntegerFeature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_CAMERA_FEATURE___bindgen_ty_1>())).stFloatFeature
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_CAMERA_FEATURE___bindgen_ty_1),
            "::",
            stringify!(stFloatFeature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_CAMERA_FEATURE___bindgen_ty_1>())).stEnumerationFeature
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_CAMERA_FEATURE___bindgen_ty_1),
            "::",
            stringify!(stEnumerationFeature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_CAMERA_FEATURE___bindgen_ty_1>())).stStringFeature
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_CAMERA_FEATURE___bindgen_ty_1),
            "::",
            stringify!(stStringFeature)
        )
    );
}
#[test]
fn bindgen_test_layout__MV_XML_CAMERA_FEATURE_() {
    assert_eq!(
        ::std::mem::size_of::<_MV_XML_CAMERA_FEATURE_>(),
        5360usize,
        concat!("Size of: ", stringify!(_MV_XML_CAMERA_FEATURE_))
    );
    assert_eq!(
        ::std::mem::align_of::<_MV_XML_CAMERA_FEATURE_>(),
        8usize,
        concat!("Alignment of ", stringify!(_MV_XML_CAMERA_FEATURE_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MV_XML_CAMERA_FEATURE_>())).enType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_CAMERA_FEATURE_),
            "::",
            stringify!(enType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MV_XML_CAMERA_FEATURE_>())).SpecialFeature as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MV_XML_CAMERA_FEATURE_),
            "::",
            stringify!(SpecialFeature)
        )
    );
}
pub type MV_XML_CAMERA_FEATURE = _MV_XML_CAMERA_FEATURE_;
extern "C" {
    #[doc = "  @fn     MV_CC_GetImageInfo"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{56fe}\u{50cf}\u{57fa}\u{672c}\u{4fe1}\u{606f}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pstInfo                     [IN][OUT]       \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{56fe}\u{50cf}\u{57fa}\u{672c}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CC_GetImageInfo"]
    #[doc = "  @brief  Get basic information of image"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  pstInfo                     [IN][OUT]       Structure pointer of image basic information"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_CC_GetImageInfo(
        handle: *mut ::std::os::raw::c_void,
        pstInfo: *mut MV_IMAGE_BASIC_INFO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CC_GetTlProxy"]
    #[doc = "  @brief  \u{83b7}\u{53d6}GenICam\u{4ee3}\u{7406}"]
    #[doc = "  @param  handle                 [IN]           \u{53e5}\u{67c4}\u{5730}\u{5740}"]
    #[doc = "  @return GenICam\u{4ee3}\u{7406}\u{7c7b}\u{6307}\u{9488} \u{ff0c}\u{6b63}\u{5e38}\u{8fd4}\u{56de}\u{503c}\u{975e}NULL\u{ff1b}\u{5f02}\u{5e38}\u{8fd4}\u{56de}NULL"]
    #[doc = ""]
    #[doc = "  @fn     MV_CC_GetTlProxy"]
    #[doc = "  @brief  Get GenICam proxy"]
    #[doc = "  @param  handle                 [IN]           Handle address"]
    #[doc = "  @return GenICam proxy pointer, normal, return non-NULL; exception, return NULL"]
    pub fn MV_CC_GetTlProxy(handle: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = "  @fn         MV_XML_GetRootNode"]
    #[doc = "  @brief      \u{83b7}\u{53d6}\u{6839}\u{8282}\u{70b9}"]
    #[doc = "  @param       handle                 [IN]          \u{53e5}\u{67c4}"]
    #[doc = "  @param       pstNode                [OUT]         \u{6839}\u{8282}\u{70b9}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn         MV_XML_GetRootNode"]
    #[doc = "  @brief      Get root node"]
    #[doc = "  @param       handle                 [IN]          Handle"]
    #[doc = "  @param       pstNode                [OUT]         Root node information structure"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_XML_GetRootNode(
        handle: *mut ::std::os::raw::c_void,
        pstNode: *mut MV_XML_NODE_FEATURE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn         MV_XML_GetChildren"]
    #[doc = "  @brief      \u{4ece}xml\u{4e2d}\u{83b7}\u{53d6}\u{6307}\u{5b9a}\u{8282}\u{70b9}\u{7684}\u{6240}\u{6709}\u{5b50}\u{8282}\u{70b9}\u{ff0c}\u{6839}\u{8282}\u{70b9}\u{4e3a}Root"]
    #[doc = "  @param       handle                 [IN]          \u{53e5}\u{67c4}"]
    #[doc = "  @param       pstNode                [IN]          \u{6839}\u{8282}\u{70b9}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "  @param       pstNodesList           [OUT]         \u{8282}\u{70b9}\u{5217}\u{8868}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn         MV_XML_GetChildren"]
    #[doc = "  @brief      Get all children node of specific node from xml, root node is Root"]
    #[doc = "  @param       handle                 [IN]          Handle"]
    #[doc = "  @param       pstNode                [IN]          Root node information structure"]
    #[doc = "  @param       pstNodesList           [OUT]         Node information structure"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_XML_GetChildren(
        handle: *mut ::std::os::raw::c_void,
        pstNode: *mut MV_XML_NODE_FEATURE,
        pstNodesList: *mut MV_XML_NODES_LIST,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn         MV_XML_GetNodeFeature"]
    #[doc = "  @brief      \u{83b7}\u{5f97}\u{5f53}\u{524d}\u{8282}\u{70b9}\u{7684}\u{5c5e}\u{6027}"]
    #[doc = "  @param       handle                 [IN]          \u{53e5}\u{67c4}"]
    #[doc = "  @param       pstNode                [IN]          \u{6839}\u{8282}\u{70b9}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "  @param       pstFeature             [OUT]         \u{5f53}\u{524d}\u{8282}\u{70b9}\u{5c5e}\u{6027}\u{7ed3}\u{6784}\u{4f53}\u{ff0c}"]
    #[doc = "pstFeature \u{5177}\u{4f53}\u{7ed3}\u{6784}\u{4f53}\u{5185}\u{5bb9}\u{53c2}\u{8003} MV_XML_FEATURE_x"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn         MV_XML_GetNodeFeature"]
    #[doc = "  @brief      Get current node feature"]
    #[doc = "  @param       handle                 [IN]          Handle"]
    #[doc = "  @param       pstNode                [IN]          Root node information structure"]
    #[doc = "  @param       pstFeature             [OUT]         Current node feature structure"]
    #[doc = "Details of pstFeature refer to MV_XML_FEATURE_x"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_XML_GetNodeFeature(
        handle: *mut ::std::os::raw::c_void,
        pstNode: *mut MV_XML_NODE_FEATURE,
        pstFeature: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn         MV_XML_UpdateNodeFeature"]
    #[doc = "  @brief      \u{66f4}\u{65b0}\u{8282}\u{70b9}"]
    #[doc = "  @param       handle                 [IN]          \u{53e5}\u{67c4}"]
    #[doc = "  @param       enType                 [IN]          \u{8282}\u{70b9}\u{7c7b}\u{578b}"]
    #[doc = "  @param       pstFeature             [OUT]         \u{5f53}\u{524d}\u{8282}\u{70b9}\u{5c5e}\u{6027}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn         MV_XML_UpdateNodeFeature"]
    #[doc = "  @brief      Update node"]
    #[doc = "  @param       handle                 [IN]          Handle"]
    #[doc = "  @param       enType                 [IN]          Node type"]
    #[doc = "  @param       pstFeature             [OUT]         Current node feature structure"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_XML_UpdateNodeFeature(
        handle: *mut ::std::os::raw::c_void,
        enType: MV_XML_InterfaceType,
        pstFeature: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn         MV_XML_RegisterUpdateCallBack"]
    #[doc = "  @brief      \u{6ce8}\u{518c}\u{66f4}\u{65b0}\u{56de}\u{8c03}"]
    #[doc = "  @param       handle                 [IN]          \u{53e5}\u{67c4}"]
    #[doc = "  @param       cbUpdate               [IN]          \u{56de}\u{8c03}\u{51fd}\u{6570}\u{6307}\u{9488}"]
    #[doc = "  @param       pUser                  [IN]          \u{7528}\u{6237}\u{81ea}\u{5b9a}\u{4e49}\u{53d8}\u{91cf}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn         MV_XML_RegisterUpdateCallBack"]
    #[doc = "  @brief      Register update callback"]
    #[doc = "  @param       handle                 [IN]          Handle"]
    #[doc = "  @param       cbUpdate               [IN]          Callback function pointer"]
    #[doc = "  @param       pUser                  [IN]          User defined variable"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_XML_RegisterUpdateCallBack(
        handle: *mut ::std::os::raw::c_void,
        cbUpdate: ::std::option::Option<
            unsafe extern "C" fn(
                enType: MV_XML_InterfaceType,
                pstFeature: *mut ::std::os::raw::c_void,
                pstNodesList: *mut MV_XML_NODES_LIST,
                pUser: *mut ::std::os::raw::c_void,
            ),
        >,
        pUser: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn         MV_CC_GetOneFrame"]
    #[doc = "  @brief      \u{83b7}\u{53d6}\u{4e00}\u{5e27}\u{56fe}\u{50cf}\u{ff0c}\u{6b64}\u{51fd}\u{6570}\u{4e3a}\u{67e5}\u{8be2}\u{5f0f}\u{83b7}\u{53d6}\u{ff0c}\u{6bcf}\u{6b21}\u{8c03}\u{7528}\u{67e5}\u{8be2}\u{5185}\u{90e8}\u{7f13}\u{5b58}\u{6709}"]
    #[doc = "\u{65e0}\u{6570}\u{636e}\u{ff0c}\u{6709}\u{6570}\u{636e}\u{5219}\u{8303}\u{56f4}\u{6570}\u{636e}\u{ff0c}\u{65e0}\u{6570}\u{636e}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "\u{ff08}\u{8be5}\u{63a5}\u{53e3}\u{5df2}\u{5f03}\u{7528}\u{ff0c}\u{5efa}\u{8bae}\u{6539}\u{7528} MV_CC_GetOneFrameTimeOut\u{63a5}\u{53e3}\u{ff09}"]
    #[doc = "  @param       handle                 [IN]          \u{53e5}\u{67c4}"]
    #[doc = "  @param       pData                  [OUT]         \u{56fe}\u{50cf}\u{6570}\u{636e}\u{63a5}\u{6536}\u{6307}\u{9488}"]
    #[doc = "  @param       nDataSize              [IN]          \u{63a5}\u{6536}\u{7f13}\u{5b58}\u{5927}\u{5c0f}"]
    #[doc = "  @param       pFrameInfo             [OUT]         \u{56fe}\u{50cf}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn         MV_CC_GetOneFrame"]
    #[doc = "  @brief      Get one frame data, this function is using query to get data,"]
    #[doc = "query whether the internal cache has data, return data if there has, return error code if no data"]
    #[doc = "(This interface is abandoned, it is recommended to use the MV_CC_GetOneFrameTimeOut)"]
    #[doc = "  @param       handle                 [IN]          Handle"]
    #[doc = "  @param       pData                  [OUT]         Recevied image data pointer"]
    #[doc = "  @param       nDataSize              [IN]          Recevied buffer size"]
    #[doc = "  @param       pFrameInfo             [OUT]         Image information structure"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_CC_GetOneFrame(
        handle: *mut ::std::os::raw::c_void,
        pData: *mut ::std::os::raw::c_uchar,
        nDataSize: ::std::os::raw::c_uint,
        pFrameInfo: *mut MV_FRAME_OUT_INFO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn         MV_CC_GetOneFrameEx"]
    #[doc = "  @brief      \u{83b7}\u{53d6}\u{4e00}\u{5e27}trunck\u{6570}\u{636e}\u{ff0c}\u{6b64}\u{51fd}\u{6570}\u{4e3a}\u{67e5}\u{8be2}\u{5f0f}\u{83b7}\u{53d6}\u{ff0c}\u{6bcf}\u{6b21}\u{8c03}\u{7528}\u{67e5}\u{8be2}\u{5185}\u{90e8}"]
    #[doc = "\u{7f13}\u{5b58}\u{6709}\u{65e0}\u{6570}\u{636e}\u{ff0c}\u{6709}\u{6570}\u{636e}\u{5219}\u{8303}\u{56f4}\u{6570}\u{636e}\u{ff0c}\u{65e0}\u{6570}\u{636e}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "\u{ff08}\u{8be5}\u{63a5}\u{53e3}\u{5df2}\u{5f03}\u{7528}\u{ff0c}\u{5efa}\u{8bae}\u{6539}\u{7528} MV_CC_GetOneFrameTimeOut\u{63a5}\u{53e3}\u{ff09}"]
    #[doc = "  @param       handle                 [IN]          \u{53e5}\u{67c4}"]
    #[doc = "  @param       pData                  [OUT]         \u{56fe}\u{50cf}\u{6570}\u{636e}\u{63a5}\u{6536}\u{6307}\u{9488}"]
    #[doc = "  @param       nDataSize              [IN]          \u{63a5}\u{6536}\u{7f13}\u{5b58}\u{5927}\u{5c0f}"]
    #[doc = "  @param       pFrameInfo             [OUT]         \u{56fe}\u{50cf}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn         MV_CC_GetOneFrameEx"]
    #[doc = "  @brief      Get one frame of trunck data, this function is using query to get data,"]
    #[doc = "query whether the internal cache has data, return data if there has, return error code if no data"]
    #[doc = "(This interface is abandoned, it is recommended to use the MV_CC_GetOneFrameTimeOut)"]
    #[doc = "  @param       handle                 [IN]          Handle"]
    #[doc = "  @param       pData                  [OUT]         Recevied image data pointer"]
    #[doc = "  @param       nDataSize              [IN]          Recevied buffer size"]
    #[doc = "  @param       pFrameInfo             [OUT]         Image information structure"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_CC_GetOneFrameEx(
        handle: *mut ::std::os::raw::c_void,
        pData: *mut ::std::os::raw::c_uchar,
        nDataSize: ::std::os::raw::c_uint,
        pFrameInfo: *mut MV_FRAME_OUT_INFO_EX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn         MV_CC_RegisterImageCallBack"]
    #[doc = "  @brief      \u{6ce8}\u{518c}\u{56fe}\u{50cf}\u{6570}\u{636e}\u{56de}\u{8c03}\u{ff08}\u{8be5}\u{63a5}\u{53e3}\u{5df2}\u{5f03}\u{7528}\u{ff0c}\u{5efa}\u{8bae}\u{6539}\u{7528} MV_CC_RegisterImageCallBackEx\u{63a5}\u{53e3}\u{ff09}"]
    #[doc = "  @param       handle                 [IN]          \u{53e5}\u{67c4}"]
    #[doc = "  @param       cbOutput               [IN]          \u{56de}\u{8c03}\u{51fd}\u{6570}\u{6307}\u{9488}"]
    #[doc = "  @param       pUser                  [IN]          \u{7528}\u{6237}\u{81ea}\u{5b9a}\u{4e49}\u{53d8}\u{91cf}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn         MV_CC_RegisterImageCallBack"]
    #[doc = "  @brief      Register image data callback (This interface is abandoned, it is recommended to use the MV_CC_RegisterImageCallBackEx)"]
    #[doc = "  @param       handle                 [IN]          Handle"]
    #[doc = "  @param       cbOutput               [IN]          Callback function pointer"]
    #[doc = "  @param       pUser                  [IN]          User defined variable"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_CC_RegisterImageCallBack(
        handle: *mut ::std::os::raw::c_void,
        cbOutput: ::std::option::Option<
            unsafe extern "C" fn(
                pData: *mut ::std::os::raw::c_uchar,
                pFrameInfo: *mut MV_FRAME_OUT_INFO,
                pUser: *mut ::std::os::raw::c_void,
            ),
        >,
        pUser: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CC_SaveImage"]
    #[doc = "  @brief  \u{4fdd}\u{5b58}\u{56fe}\u{7247}\u{ff08}\u{8be5}\u{63a5}\u{53e3}\u{5df2}\u{5f03}\u{7528}\u{ff0c}\u{5efa}\u{8bae}\u{6539}\u{7528} MV_CC_SaveImageEx2\u{63a5}\u{53e3}\u{ff09}"]
    #[doc = "  @param  pSaveParam             [IN][OUT]          \u{4fdd}\u{5b58}\u{56fe}\u{7247}\u{53c2}\u{6570}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "pData;              // [IN]     \u{8f93}\u{5165}\u{6570}\u{636e}\u{7f13}\u{5b58}"]
    #[doc = "nDataLen;           // [IN]     \u{8f93}\u{5165}\u{6570}\u{636e}\u{5927}\u{5c0f}"]
    #[doc = "enPixelType;        // [IN]     \u{8f93}\u{5165}\u{6570}\u{636e}\u{7684}\u{50cf}\u{7d20}\u{683c}\u{5f0f}"]
    #[doc = "nWidth;             // [IN]     \u{56fe}\u{50cf}\u{5bbd}"]
    #[doc = "nHeight;            // [IN]     \u{56fe}\u{50cf}\u{9ad8}"]
    #[doc = "pImageBuffer;       // [OUT]    \u{8f93}\u{51fa}\u{56fe}\u{7247}\u{7f13}\u{5b58}"]
    #[doc = "nImageLen;          // [OUT]    \u{8f93}\u{51fa}\u{56fe}\u{7247}\u{5927}\u{5c0f}"]
    #[doc = "nBufferSize;        // [IN]     \u{63d0}\u{4f9b}\u{7684}\u{8f93}\u{51fa}\u{7f13}\u{51b2}\u{533a}\u{5927}\u{5c0f}"]
    #[doc = "enImageType;        // [IN]     \u{8f93}\u{51fa}\u{56fe}\u{7247}\u{683c}\u{5f0f}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CC_SaveImage"]
    #[doc = "  @brief  Save image (This interface is abandoned, it is recommended to use the MV_CC_SaveImageEx)"]
    #[doc = "  @param  pSaveParam             [IN][OUT]          Save image parameters structure"]
    #[doc = "pData;              // [IN]     Input data buffer"]
    #[doc = "nDataLen;           // [IN]     Input data size"]
    #[doc = "enPixelType;        // [IN]     Input data pixel format"]
    #[doc = "nWidth;             // [IN]     Width"]
    #[doc = "nHeight;            // [IN]     Height"]
    #[doc = "pImageBuffer;       // [OUT]    Output image buffer"]
    #[doc = "nImageLen;          // [OUT]    Output image size"]
    #[doc = "nBufferSize;        // [IN]     Provided output buffer size"]
    #[doc = "enImageType;        // [IN]     Output image type"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_CC_SaveImage(pSaveParam: *mut MV_SAVE_IMAGE_PARAM) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CC_SaveImageEx"]
    #[doc = "  @brief  \u{4fdd}\u{5b58}\u{56fe}\u{7247}\u{ff0c}\u{652f}\u{6301}Bmp\u{548c}Jpeg.\u{7f16}\u{7801}\u{8d28}\u{91cf}\u{5728}50-99\u{4e4b}\u{524d} \u{ff08}\u{8be5}\u{63a5}\u{53e3}\u{5df2}\u{5f03}\u{7528}\u{ff0c}\u{5efa}\u{8bae}\u{6539}\u{7528} MV_CC_SaveImageEx2\u{63a5}\u{53e3}\u{ff09}"]
    #[doc = "  @param  pSaveParam             [IN][OUT]          \u{4fdd}\u{5b58}\u{56fe}\u{7247}\u{53c2}\u{6570}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "pData;              // [IN]     \u{8f93}\u{5165}\u{6570}\u{636e}\u{7f13}\u{5b58}"]
    #[doc = "nDataLen;           // [IN]     \u{8f93}\u{5165}\u{6570}\u{636e}\u{5927}\u{5c0f}"]
    #[doc = "enPixelType;        // [IN]     \u{8f93}\u{5165}\u{6570}\u{636e}\u{7684}\u{50cf}\u{7d20}\u{683c}\u{5f0f}"]
    #[doc = "nWidth;             // [IN]     \u{56fe}\u{50cf}\u{5bbd}"]
    #[doc = "nHeight;            // [IN]     \u{56fe}\u{50cf}\u{9ad8}"]
    #[doc = "pImageBuffer;       // [OUT]    \u{8f93}\u{51fa}\u{56fe}\u{7247}\u{7f13}\u{5b58}"]
    #[doc = "nImageLen;          // [OUT]    \u{8f93}\u{51fa}\u{56fe}\u{7247}\u{5927}\u{5c0f}"]
    #[doc = "nBufferSize;        // [IN]     \u{63d0}\u{4f9b}\u{7684}\u{8f93}\u{51fa}\u{7f13}\u{51b2}\u{533a}\u{5927}\u{5c0f}"]
    #[doc = "enImageType;        // [IN]     \u{8f93}\u{51fa}\u{56fe}\u{7247}\u{683c}\u{5f0f}"]
    #[doc = "nJpgQuality;        // [IN]     \u{7f16}\u{7801}\u{8d28}\u{91cf}, (50-99]"]
    #[doc = "nReserved[4];"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CC_SaveImageEx"]
    #[doc = "  @brief  Save image, support Bmp and Jpeg. Encoding quality, (50-99]"]
    #[doc = "  @param  pSaveParam             [IN][OUT]           Save image parameters structure"]
    #[doc = "pData;              // [IN]     Input data buffer"]
    #[doc = "nDataLen;           // [IN]     Input data size"]
    #[doc = "enPixelType;        // [IN]     Pixel format of input data"]
    #[doc = "nWidth;             // [IN]     Image width"]
    #[doc = "nHeight;            // [IN]     Image height"]
    #[doc = "pImageBuffer;       // [OUT]    Output image buffer"]
    #[doc = "nImageLen;          // [OUT]    Output image size"]
    #[doc = "nBufferSize;        // [IN]     Output buffer size provided"]
    #[doc = "enImageType;        // [IN]     Output image format"]
    #[doc = "nJpgQuality;        // [IN]     Encoding quality, (50-99]"]
    #[doc = "nReserved[4];"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_CC_SaveImageEx(pSaveParam: *mut MV_SAVE_IMAGE_PARAM_EX) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_GIGE_ForceIp"]
    #[doc = "  @brief  \u{5f3a}\u{5236}IP\u{ff08}\u{8be5}\u{63a5}\u{53e3}\u{5df2}\u{5f03}\u{7528}\u{ff0c}\u{5efa}\u{8bae}\u{6539}\u{7528} MV_GIGE_ForceIpEx\u{63a5}\u{53e3}\u{ff09}"]
    #[doc = "  @param  handle\u{ff1a}\u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  nIP               [IN]      \u{8bbe}\u{7f6e}\u{7684}IP"]
    #[doc = "  @return \u{89c1}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_GIGE_ForceIp"]
    #[doc = "  @brief  Force IP (This interface is abandoned, it is recommended to use the MV_GIGE_ForceIpEx)"]
    #[doc = "  @param  handle Handle"]
    #[doc = "  @param  nIP               [IN]      IP to set"]
    #[doc = "  @return Refer to error code"]
    pub fn MV_GIGE_ForceIp(
        handle: *mut ::std::os::raw::c_void,
        nIP: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CC_RegisterEventCallBack"]
    #[doc = "  @brief  \u{6ce8}\u{518c}\u{4e8b}\u{4ef6}\u{56de}\u{8c03}\u{ff08}\u{8be5}\u{63a5}\u{53e3}\u{5df2}\u{5f03}\u{7528}\u{ff0c}\u{5efa}\u{8bae}\u{6539}\u{7528} MV_CC_RegisterEventCallBackEx\u{63a5}\u{53e3}\u{ff09}"]
    #[doc = "  @param  handle\u{ff1a}\u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  cbEvent           [IN]      \u{4e8b}\u{4ef6}\u{56de}\u{8c03}\u{51fd}\u{6570}\u{6307}\u{9488}"]
    #[doc = "  @param  pUser             [IN]      \u{7528}\u{6237}\u{81ea}\u{5b9a}\u{4e49}\u{53d8}\u{91cf}"]
    #[doc = "  @return \u{89c1}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CC_RegisterEventCallBack"]
    #[doc = "  @brief  Register event callback (this interface has been deprecated and is recommended to be converted to the MV_CC_RegisterEventCallBackEx interface)"]
    #[doc = "  @param  handle\u{ff1a}\u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  cbEvent           [IN]      event callback pointer"]
    #[doc = "  @param  pUser             [IN]      User defined value"]
    #[doc = "  @return \u{89c1}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    pub fn MV_CC_RegisterEventCallBack(
        handle: *mut ::std::os::raw::c_void,
        cbEvent: ::std::option::Option<
            unsafe extern "C" fn(
                nExternalEventId: ::std::os::raw::c_uint,
                pUser: *mut ::std::os::raw::c_void,
            ),
        >,
        pUser: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn         MV_CC_Display"]
    #[doc = "  @brief      \u{663e}\u{793a}\u{56fe}\u{50cf}\u{ff0c}\u{6ce8}\u{518c}\u{663e}\u{793a}\u{7a97}\u{53e3}\u{ff0c}\u{5185}\u{90e8}\u{81ea}\u{52a8}\u{663e}\u{793a}\u{ff08}\u{4e0e}MV_CC_GetImageBuffer\u{4e0d}\u{80fd}\u{540c}\u{65f6}\u{4f7f}\u{7528}\u{ff0c}\u{5efa}\u{8bae}\u{6539}\u{7528}MV_CC_DisplayOneFrame\u{63a5}\u{53e3}\u{ff09}"]
    #[doc = "  @param       handle                 [IN]          \u{53e5}\u{67c4}"]
    #[doc = "  @param       hWnd                   [IN]          \u{663e}\u{793a}\u{7a97}\u{53e3}\u{53e5}\u{67c4}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn         MV_CC_Display"]
    #[doc = "  @brief      Display one frame image, register display window, automatic display internally"]
    #[doc = "  @param      handle                 [IN]          Handle"]
    #[doc = "  @param      hWnd                   [IN]          Display Window Handle"]
    #[doc = "  @return     Success, return MV_OK. Failure, return error code"]
    pub fn MV_CC_Display(
        handle: *mut ::std::os::raw::c_void,
        hWnd: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetIntValue(IN void* handle,"]
    #[doc = "IN const char* strKey,"]
    #[doc = "OUT MVCC_INTVALUE *pIntValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}Integer\u{5c5e}\u{6027}\u{503c}\u{ff08}\u{5efa}\u{8bae}\u{6539}\u{7528}MV_CC_GetIntValueEx\u{63a5}\u{53e3}\u{ff09}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  char* strKey                [IN]        \u{5c5e}\u{6027}\u{952e}\u{503c}\u{ff0c}\u{5982}\u{83b7}\u{53d6}\u{5bbd}\u{5ea6}\u{4fe1}\u{606f}\u{5219}\u{4e3a}\"Width\""]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{5c5e}\u{6027}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetIntValue(IN void* handle,"]
    #[doc = "IN const char* strKey,"]
    #[doc = "OUT MVCC_INTVALUE *pIntValue);"]
    #[doc = "  @brief  Get Integer value"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "  @param  char* strKey                [IN]        Key value, for example, using \"Width\" to get width"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of camera features"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_CC_GetIntValue(
        handle: *mut ::std::os::raw::c_void,
        strKey: *const ::std::os::raw::c_char,
        pIntValue: *mut MVCC_INTVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetIntValue(IN void* handle,"]
    #[doc = "IN const char* strKey,"]
    #[doc = "IN unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}Integer\u{578b}\u{5c5e}\u{6027}\u{503c}\u{ff08}\u{5efa}\u{8bae}\u{6539}\u{7528}MV_CC_SetIntValueEx\u{63a5}\u{53e3}\u{ff09}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  char* strKey                [IN]        \u{5c5e}\u{6027}\u{952e}\u{503c}\u{ff0c}\u{5982}\u{83b7}\u{53d6}\u{5bbd}\u{5ea6}\u{4fe1}\u{606f}\u{5219}\u{4e3a}\"Width\""]
    #[doc = "          const unsigned int nValue   [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{76f8}\u{673a}\u{7684}\u{5c5e}\u{6027}\u{503c}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetIntValue(IN void* handle,"]
    #[doc = "IN const char* strKey,"]
    #[doc = "IN unsigned int nValue);"]
    #[doc = "  @brief  Set Integer value"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "  @param  char* strKey                [IN]        Key value, for example, using \"Width\" to set width"]
    #[doc = "          const unsigned int nValue   [IN]        Feature value to set"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_CC_SetIntValue(
        handle: *mut ::std::os::raw::c_void,
        strKey: *const ::std::os::raw::c_char,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetWidth(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{56fe}\u{50cf}\u{5bbd}\u{5ea6}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{5bbd}\u{5ea6}\u{7684}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "          \u{8fd4}\u{56de}\u{7684}pstValue\u{7ed3}\u{6784}\u{4f53}\u{7684}\u{610f}\u{4e49}"]
    #[doc = "                  unsigned int    nCurValue;      // \u{4ee3}\u{8868}\u{76f8}\u{673a}\u{5f53}\u{524d}\u{7684}\u{5bbd}\u{5ea6}\u{503c}"]
    #[doc = "                  unsigned int    nMax;           // \u{8868}\u{793a}\u{76f8}\u{673a}\u{5141}\u{8bb8}\u{7684}\u{6700}\u{5927}\u{53ef}\u{8bbe}\u{7f6e}\u{7684}\u{5bbd}\u{5ea6}\u{503c}"]
    #[doc = "                  unsigned int    nMin;           // \u{8868}\u{793a}\u{76f8}\u{673a}\u{5141}\u{8bb8}\u{7684}\u{6700}\u{5c0f}\u{53ef}\u{8bbe}\u{7f6e}\u{7684}\u{5bbd}\u{5ea6}\u{503c}"]
    #[doc = "                  unsigned int    nInc;           // \u{8868}\u{793a}\u{76f8}\u{673a}\u{8bbe}\u{7f6e}\u{7684}\u{5bbd}\u{5ea6}\u{589e}\u{91cf}\u{5fc5}\u{987b}\u{662f}nInc\u{7684}\u{500d}\u{6570}\u{ff0c}\u{5426}\u{5219}\u{65e0}\u{6548}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{83b7}\u{5f97}\u{76f8}\u{5e94}\u{53c2}\u{6570}\u{4fe1}\u{606f}\u{7684}\u{7ed3}\u{6784}\u{4f53}, \u{5931}\u{8d25}, \u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{5176}\u{4ed6}\u{6574}\u{578b}\u{7ed3}\u{6784}\u{4f53}\u{53c2}\u{6570}\u{7684}\u{63a5}\u{53e3}\u{53ef}\u{53c2}\u{7167}\u{6b64}\u{63a5}\u{53e3}"]
    #[doc = ""]
    #[doc = " @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetWidth(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  Get image width"]
    #[doc = "  @param  void* handle                [IN]        Camera Handle"]
    #[doc = "          MVCC_INTVALUE* pstValue     [IN][OUT]   Returns the information structure pointer about the camera's width for the caller"]
    #[doc = "          The meaning of returns pstValue structure"]
    #[doc = "                  unsigned int    nCurValue;      // Represents the current width value of the camera"]
    #[doc = "                  unsigned int    nMax;           // Indicates the maximum settable width value allowed by the camera"]
    #[doc = "                  unsigned int    nMin;           // Indicates the minimum settable width value allowed by the camera"]
    #[doc = "                  unsigned int    nInc;           // Indicates that the width increment set by the camera must be a multiple of nInc, otherwise it is invalid"]
    #[doc = "  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Other Integer structure parameters interface can refer to this interface"]
    pub fn MV_CC_GetWidth(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_INTVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetWidth(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{56fe}\u{50cf}\u{5bbd}\u{5ea6}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{76f8}\u{673a}\u{5bbd}\u{5ea6}\u{7684}\u{503c},\u{6ce8}\u{610f}\u{6b64}\u{5bbd}\u{5ea6}\u{503c}\u{5fc5}\u{987b}\u{662f}MV_CC_GetWidth\u{63a5}\u{53e3}\u{8fd4}\u{56de}\u{7684}pstValue\u{4e2d}\u{7684}nInc\u{7684}\u{500d}\u{6570}\u{624d}\u{80fd}\u{8bbe}\u{7f6e}\u{6210}\u{529f}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{5bbd}\u{5ea6}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = " @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetWidth(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set image width"]
    #[doc = "  @param  void* handle                [IN]        Camera Handle"]
    #[doc = "          const unsigned int nValue   [IN]        To set the value of the camera width, note that the width value must be a multiple of nInc in the pstValue returned by the MV_CC_GetWidth interface"]
    #[doc = "  @return Success, return MV_OK, and the camera width will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetWidth(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetHeight(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{56fe}\u{50cf}\u{9ad8}\u{5ea6}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{9ad8}\u{5ea6}\u{7684}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{5c06}\u{9ad8}\u{5ea6}\u{4fe1}\u{606f}\u{8fd4}\u{56de}\u{5230}\u{7ed3}\u{6784}\u{4f53}\u{4e2d}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetWidth"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetHeight(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  Get image height"]
    #[doc = "  @param  void* handle                [IN]        Camera handle"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Return pointer of information structure related to camera height to user"]
    #[doc = "  @return Success, return MV_OK, and return height information to the structure. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Refer to MV_CC_GetWidth"]
    pub fn MV_CC_GetHeight(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_INTVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetHeight(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{56fe}\u{50cf}\u{9ad8}\u{5ea6}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{76f8}\u{673a}\u{5bbd}\u{5ea6}\u{7684}\u{503c},\u{6ce8}\u{610f}\u{6b64}\u{5bbd}\u{5ea6}\u{503c}\u{5fc5}\u{987b}\u{662f}MV_CC_GetWidth\u{63a5}\u{53e3}\u{8fd4}\u{56de}\u{7684}pstValue\u{4e2d}\u{7684}nInc\u{7684}\u{500d}\u{6570}\u{624d}\u{80fd}\u{8bbe}\u{7f6e}\u{6210}\u{529f}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{9ad8}\u{5ea6}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetHeight(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set image height"]
    #[doc = "  @param  void* handle                [IN]        Camera Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Camera height value to set, note that this value must be times of nInc of pstValue returned by MV_CC_GetWidth"]
    #[doc = "  @return Success, return MV_OK, and the camera height will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetHeight(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAOIoffsetX(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{56fe}\u{50cf}X\u{504f}\u{79fb}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}X\u{504f}\u{79fb}\u{7684}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetWidth"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAOIoffsetX(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  Get image X offset"]
    #[doc = "  @param  void* handle                [IN]        Camera Handle"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Return pointer of information structure related to camera X offset to user"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Refer to MV_CC_GetWidth"]
    pub fn MV_CC_GetAOIoffsetX(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_INTVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAOIoffsetX(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{56fe}\u{50cf}AOI\u{504f}\u{79fb}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{76f8}\u{673a}AOI\u{7684}\u{503c}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}AOI\u{504f}\u{79fb}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAOIoffsetX(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set image X offset"]
    #[doc = "  @param  void* handle                [IN]        Camera Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Camera X offset value to set"]
    #[doc = "  @return Success, return MV_OK, and the camera X offset will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetAOIoffsetX(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAOIoffsetY(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{56fe}\u{50cf}Y\u{504f}\u{79fb}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}Y\u{504f}\u{79fb}\u{7684}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetWidth"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAOIoffsetY(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  Get image Y offset"]
    #[doc = "  @param  void* handle                [IN]        Camera Handle"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Return pointer of information structure related to camera Y offset to user"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Refer to MV_CC_GetWidth"]
    pub fn MV_CC_GetAOIoffsetY(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_INTVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAOIoffsetX(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{56fe}\u{50cf}AOI\u{504f}\u{79fb}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{76f8}\u{673a}AOI\u{7684}\u{503c}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}AOI\u{504f}\u{79fb}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAOIoffsetY(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set image Y offset"]
    #[doc = "  @param  void* handle                [IN]        Camera Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Camera Y offset value to set"]
    #[doc = "  @return Success, return MV_OK, and the camera Y offset will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetAOIoffsetY(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAutoExposureTimeLower(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{66dd}\u{5149}\u{4e0b}\u{9650}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{66dd}\u{5149}\u{503c}\u{4e0b}\u{9650}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetWidth"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAutoExposureTimeLower(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  Get exposure lower limit"]
    #[doc = "  @param  void* handle                [IN]        Camera Handle"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Return pointer of information structure related to camera exposure lower to user"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Refer to MV_CC_GetWidth"]
    pub fn MV_CC_GetAutoExposureTimeLower(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_INTVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAutoExposureTimeLower(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{66dd}\u{5149}\u{503c}\u{4e0b}\u{9650}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{66dd}\u{5149}\u{503c}\u{4e0b}\u{9650}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{66dd}\u{5149}\u{4e0b}\u{9650}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAutoExposureTimeLower(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set exposure lower limit"]
    #[doc = "  @param  void* handle                [IN]        Camera Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Exposure lower to set"]
    #[doc = "  @return Success, return MV_OK, and the camera exposure time lower limit value will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetAutoExposureTimeLower(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAutoExposureTimeUpper(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{66dd}\u{5149}\u{4e0a}\u{9650}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{66dd}\u{5149}\u{503c}\u{4e0a}\u{9650}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetWidth"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAutoExposureTimeUpper(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  Get exposure upper limit"]
    #[doc = "  @param  void* handle                [IN]        Camera Handle"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Return pointer of information structure related to camera exposure upper to user"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Refer to MV_CC_GetWidth"]
    pub fn MV_CC_GetAutoExposureTimeUpper(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_INTVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAutoExposureTimeUpper(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{66dd}\u{5149}\u{503c}\u{4e0a}\u{9650}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{66dd}\u{5149}\u{503c}\u{4e0a}\u{9650}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{66dd}\u{5149}\u{4e0a}\u{9650}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAutoExposureTimeUpper(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set exposure upper limit"]
    #[doc = "  @param  void* handle                [IN]        Camera Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Exposure upper to set"]
    #[doc = "  @return Success, return MV_OK, and the camera exposure time upper limit value will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetAutoExposureTimeUpper(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBrightness(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{4eae}\u{5ea6}\u{503c}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{4eae}\u{5ea6}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetWidth"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBrightness(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  Get brightness"]
    #[doc = "  @param  void* handle                [IN]        Camera Handle"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Return pointer of information structure related to camera brightness to user"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Refer to MV_CC_GetWidth"]
    pub fn MV_CC_GetBrightness(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_INTVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBrightness(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{4eae}\u{5ea6}\u{503c}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{4eae}\u{5ea6}\u{503c}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{4eae}\u{5ea6}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBrightness(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set brightness"]
    #[doc = "  @param  void* handle                [IN]        Camera Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Brightness upper to set"]
    #[doc = "  @return Success, return MV_OK, and the camera brightness value will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetBrightness(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetFrameRate(IN void* handle, IN OUT MVCC_FLOATVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{5e27}\u{7387}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          MVCC_FLOATVALUE* pstValue   [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{5e27}\u{7387}\u{7684}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "          \u{8fd4}\u{56de}\u{7684}pstValue\u{7ed3}\u{6784}\u{4f53}\u{7684}\u{610f}\u{4e49}"]
    #[doc = "                                      float           fCurValue;      // \u{8868}\u{793a}\u{76f8}\u{673a}\u{5f53}\u{524d}\u{7684}\u{5e27}\u{7387}"]
    #[doc = "                                      float           fMax;           // \u{8868}\u{793a}\u{76f8}\u{673a}\u{5141}\u{8bb8}\u{8bbe}\u{7f6e}\u{7684}\u{6700}\u{5927}\u{5e27}\u{7387}"]
    #[doc = "                                      float           fMin;           // \u{8868}\u{793a}\u{76f8}\u{673a}\u{5141}\u{8bb8}\u{8bbe}\u{7f6e}\u{7684}\u{6700}\u{5c0f}\u{5e27}\u{7387}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{83b7}\u{5f97}\u{76f8}\u{5e94}\u{53c2}\u{6570}\u{4fe1}\u{606f}\u{7684}\u{7ed3}\u{6784}\u{4f53}, \u{5931}\u{8d25}, \u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{5176}\u{4ed6}\u{6d6e}\u{70b9}\u{578b}\u{7ed3}\u{6784}\u{4f53}\u{53c2}\u{6570}\u{7684}\u{63a5}\u{53e3}\u{53ef}\u{53c2}\u{7167}\u{6b64}\u{63a5}\u{53e3}"]
    #[doc = ""]
    #[doc = " @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetFrameRate(IN void* handle, IN OUT MVCC_FLOATVALUE* pstValue);"]
    #[doc = "  @brief  Get Frame Rate"]
    #[doc = "  @param  void* handle                [IN]        Camera Handle"]
    #[doc = "          MVCC_FLOATVALUE* pstValue   [IN][OUT]   Return pointer of information structure related to camera frame rate to user"]
    #[doc = "          The meaning of returns pstValue structure"]
    #[doc = "                                      float           fCurValue;      // Indicates the current frame rate of the camera"]
    #[doc = "                                      float           fMax;           // Indicates the maximum frame rate allowed by the camera"]
    #[doc = "                                      float           fMin;           // Indicates the minimum frame rate allowed by the camera"]
    #[doc = "  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Other interface of Float structure parameters can refer to this interface"]
    pub fn MV_CC_GetFrameRate(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_FLOATVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetFrameRate(IN void* handle, IN const float fValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{5e27}\u{7387}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const float fValue          [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{76f8}\u{673a}\u{5e27}\u{7387}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{5e27}\u{7387}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = " @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetFrameRate(IN void* handle, IN const float fValue);"]
    #[doc = "  @brief  Set frame rate"]
    #[doc = "  @param  void* handle                [IN]        Camera Handle"]
    #[doc = "          const float fValue          [IN]        Camera frame rate to set"]
    #[doc = "  @return Success, return MV_OK, and camera frame rate will be changed to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetFrameRate(
        handle: *mut ::std::os::raw::c_void,
        fValue: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetGain(IN void* handle, IN OUT MVCC_FLOATVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{589e}\u{76ca}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          MVCC_FLOATVALUE* pstValue   [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{589e}\u{76ca}\u{7684}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "          \u{8fd4}\u{56de}\u{7684}pstValue\u{7ed3}\u{6784}\u{4f53}\u{7684}\u{610f}\u{4e49}"]
    #[doc = "                                      float           fCurValue;      // \u{8868}\u{793a}\u{76f8}\u{673a}\u{5f53}\u{524d}\u{7684}\u{5e27}\u{7387}"]
    #[doc = "                                      float           fMax;           // \u{8868}\u{793a}\u{76f8}\u{673a}\u{5141}\u{8bb8}\u{8bbe}\u{7f6e}\u{7684}\u{6700}\u{5927}\u{5e27}\u{7387}"]
    #[doc = "                                      float           fMin;           // \u{8868}\u{793a}\u{76f8}\u{673a}\u{5141}\u{8bb8}\u{8bbe}\u{7f6e}\u{7684}\u{6700}\u{5c0f}\u{5e27}\u{7387}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{83b7}\u{5f97}\u{76f8}\u{5e94}\u{53c2}\u{6570}\u{4fe1}\u{606f}\u{7684}\u{7ed3}\u{6784}\u{4f53}, \u{5931}\u{8d25}, \u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{5176}\u{4ed6}\u{6d6e}\u{70b9}\u{578b}\u{7ed3}\u{6784}\u{4f53}\u{53c2}\u{6570}\u{7684}\u{63a5}\u{53e3}\u{53ef}\u{53c2}\u{7167}\u{6b64}\u{63a5}\u{53e3}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetGain(IN void* handle, IN OUT MVCC_FLOATVALUE* pstValue);"]
    #[doc = "  @brief  Get Gain"]
    #[doc = "  @param  void* handle                [IN]        Camera Handle"]
    #[doc = "          MVCC_FLOATVALUE* pstValue   [IN][OUT]   Return pointer of information structure related to gain to user"]
    #[doc = "  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code"]
    #[doc = "                                      float           fCurValue;      // Camera current gain"]
    #[doc = "                                      float           fMax;           // The maximum gain camera allowed"]
    #[doc = "                                      float           fMin;           // The minimum gain camera allowed"]
    #[doc = "  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Other interface of Float structure parameters can refer to this interface"]
    pub fn MV_CC_GetGain(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_FLOATVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetGain(IN void* handle, IN const float fValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{5e27}\u{7387}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const float fValue          [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{76f8}\u{673a}\u{5e27}\u{7387}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{5e27}\u{7387}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetGain(IN void* handle, IN const float fValue);"]
    #[doc = "  @brief  Set Gain"]
    #[doc = "  @param  void* handle                [IN]        Camera Handle"]
    #[doc = "          const float fValue          [IN]        Gain value to set"]
    #[doc = "  @return Success, return MV_OK, and the camera gain value will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetGain(handle: *mut ::std::os::raw::c_void, fValue: f32)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetExposureTime(IN void* handle, IN OUT MVCC_FLOATVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{66dd}\u{5149}\u{65f6}\u{95f4}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          MVCC_FLOATVALUE* pstValue   [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{66dd}\u{5149}\u{65f6}\u{95f4}\u{7684}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "          \u{8fd4}\u{56de}\u{7684}pstValue\u{7ed3}\u{6784}\u{4f53}\u{7684}\u{610f}\u{4e49}"]
    #[doc = "                                      float           fCurValue;      // \u{8868}\u{793a}\u{76f8}\u{673a}\u{5f53}\u{524d}\u{7684}\u{5e27}\u{7387}"]
    #[doc = "                                      float           fMax;           // \u{8868}\u{793a}\u{76f8}\u{673a}\u{5141}\u{8bb8}\u{8bbe}\u{7f6e}\u{7684}\u{6700}\u{5927}\u{5e27}\u{7387}"]
    #[doc = "                                      float           fMin;           // \u{8868}\u{793a}\u{76f8}\u{673a}\u{5141}\u{8bb8}\u{8bbe}\u{7f6e}\u{7684}\u{6700}\u{5c0f}\u{5e27}\u{7387}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{83b7}\u{5f97}\u{76f8}\u{5e94}\u{53c2}\u{6570}\u{4fe1}\u{606f}\u{7684}\u{7ed3}\u{6784}\u{4f53}, \u{5931}\u{8d25}, \u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{5176}\u{4ed6}\u{6d6e}\u{70b9}\u{578b}\u{7ed3}\u{6784}\u{4f53}\u{53c2}\u{6570}\u{7684}\u{63a5}\u{53e3}\u{53ef}\u{53c2}\u{7167}\u{6b64}\u{63a5}\u{53e3}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetExposureTime(IN void* handle, IN OUT MVCC_FLOATVALUE* pstValue);"]
    #[doc = "  @brief  Get exposure time"]
    #[doc = "  @param  void* handle                [IN]        Camera Handle"]
    #[doc = "          MVCC_FLOATVALUE* pstValue   [IN][OUT]   Return pointer of information structure related to exposure time to user"]
    #[doc = "  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code"]
    #[doc = "                                      float           fCurValue;      // Camera current exposure time"]
    #[doc = "                                      float           fMax;           // The maximum exposure time camera allowed"]
    #[doc = "                                      float           fMin;           // The minimum exposure time camera allowed"]
    #[doc = "  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Other interface of Float structure parameters can refer to this interface"]
    pub fn MV_CC_GetExposureTime(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_FLOATVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetExposureTime(IN void* handle, IN const float fValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{66dd}\u{5149}\u{65f6}\u{95f4}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const float fValue          [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{76f8}\u{673a}\u{5e27}\u{7387}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{5e27}\u{7387}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetExposureTime(IN void* handle, IN const float fValue);"]
    #[doc = "  @brief  Set exposure time"]
    #[doc = "  @param  void* handle                [IN]        Camera Handle"]
    #[doc = "          const float fValue          [IN]        Exposure time to set"]
    #[doc = "  @return Success, return MV_OK, and the camera exposure time value will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetExposureTime(
        handle: *mut ::std::os::raw::c_void,
        fValue: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetPixelFormat(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{50cf}\u{7d20}\u{683c}\u{5f0f}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          MVCC_ENUMVALUE* pstValue    [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{7684}\u{6709}\u{5173}\u{50cf}\u{7d20}\u{683c}\u{5f0f}\u{7684}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "          \u{8fd4}\u{56de}\u{7684}pstValue\u{7ed3}\u{6784}\u{4f53}\u{7684}\u{610f}\u{4e49}"]
    #[doc = "          unsigned int    nCurValue;                              //  \u{76f8}\u{673a}\u{5f53}\u{524d}\u{7684}\u{50cf}\u{7d20}\u{683c}\u{5f0f}\u{ff0c}\u{662f}\u{679a}\u{4e3e}\u{7c7b}\u{578b},\u{6bd4}\u{5982}\u{8bf4}PixelType_Gvsp_Mono8, \u{8fd9}\u{91cc}\u{83b7}\u{5f97}\u{7684}\u{662f}\u{5176}\u{6574}\u{578b}\u{503c},\u{5177}\u{4f53}\u{6570}\u{503c}\u{53c2}\u{7167}PixelType.h\u{7684}MvGvspPixelType\u{679a}\u{4e3e}\u{7c7b}\u{578b}"]
    #[doc = "          unsigned int    nSupportedNum;                          //  \u{76f8}\u{673a}\u{652f}\u{6301}\u{7684}\u{50cf}\u{7d20}\u{683c}\u{5f0f}\u{7684}\u{4e2a}\u{6570}"]
    #[doc = "          unsigned int    nSupportValue[MV_MAX_XML_SYMBOLIC_NUM]; //  \u{76f8}\u{673a}\u{6240}\u{6709}\u{652f}\u{6301}\u{7684}\u{50cf}\u{7d20}\u{683c}\u{5f0f}\u{5bf9}\u{5e94}\u{7684}\u{6574}\u{578b}\u{503c}\u{5217}\u{8868}\u{ff0c}\u{540e}\u{9762}\u{8981}\u{8bbe}\u{7f6e}\u{50cf}\u{7d20}\u{683c}\u{5f0f}\u{65f6}\u{ff0c}\u{53c2}\u{6570}\u{5fc5}\u{987b}\u{662f}\u{8fd9}\u{4e2a}\u{6570}\u{7ec4}\u{4e2d}\u{7684}\u{4e00}\u{79cd}\u{ff0c}\u{5426}\u{5219}\u{65e0}\u{6548}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{83b7}\u{5f97}\u{76f8}\u{5e94}\u{53c2}\u{6570}\u{4fe1}\u{606f}\u{7684}\u{7ed3}\u{6784}\u{4f53}, \u{5931}\u{8d25}, \u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "\u{5176}\u{4ed6}\u{679a}\u{4e3e}\u{7c7b}\u{578b}\u{53c2}\u{6570}\u{63a5}\u{53e3}\u{53ef}\u{53c2}\u{7167}\u{6b64}\u{63a5}\u{53e3}\u{ff0c}\u{6709}\u{5173}\u{76f8}\u{5e94}\u{53c2}\u{6570}\u{7684}\u{679a}\u{4e3e}\u{7c7b}\u{578b}\u{5bf9}\u{5e94}\u{7684}\u{6574}\u{578b}\u{503c}\u{8bf7}\u{67e5}\u{627e}PixelType.h \u{548c} CameraParams.h\u{4e2d}\u{76f8}\u{5e94}\u{7684}\u{5b9a}\u{4e49}"]
    #[doc = ""]
    #[doc = " @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetPixelFormat(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);"]
    #[doc = "  @brief  Get Pixel Format"]
    #[doc = "  @param  void* handle                [IN]        Camera Handle"]
    #[doc = "          MVCC_ENUMVALUE* pstValue    [IN][OUT]   Returns the information structure pointer about pixel format for the caller"]
    #[doc = "          The meaning of returns pstValue structure"]
    #[doc = "          unsigned int    nCurValue;                              //  The current pixel format of the camera, is the enumeration type, such as PixelType_Gvsp_Mono8, here is the integer value, the specific value please refer to MvGvspPixelType enumeration type in PixelType.h"]
    #[doc = "          unsigned int    nSupportedNum;                          //  Number of pixel formats supported by the camera"]
    #[doc = "          unsigned int    nSupportValue[MV_MAX_XML_SYMBOLIC_NUM]; //  The integer values list correspond to all supported pixel formats of the camera, followed by when set the pixel format, the parameter must be one of this list, otherwise invalid"]
    #[doc = "  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code"]
    #[doc = ""]
    #[doc = "Other interface of Enumeration structure parameters can refer to this interface, look for the corresponding definition in PixelType.h and CameraParams.h for the integer values of the enum type parameter"]
    pub fn MV_CC_GetPixelFormat(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_ENUMVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetPixelFormat(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{50cf}\u{7d20}\u{683c}\u{5f0f}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{50cf}\u{7d20}\u{683c}\u{5f0f}\u{5bf9}\u{5e94}\u{7684}\u{6574}\u{578b}\u{503c}\u{ff0c}\u{8c03}\u{7528}\u{6b64}\u{63a5}\u{53e3}\u{65f6}\u{53ef}\u{4ee5}\u{76f4}\u{63a5}\u{586b}\u{5199}\u{679a}\u{4e3e}\u{503c}\u{ff0c}\u{5982}MV_CC_SetPixelFormat(m_handle, PixelType_Gvsp_RGB8_Packed);"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{50cf}\u{7d20}\u{683c}\u{5f0f}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{679a}\u{4e3e}\u{7c7b}\u{578b}\u{5fc5}\u{987b}\u{662f}Get\u{63a5}\u{53e3}\u{8fd4}\u{56de}\u{7684}nSupportValue[MV_MAX_XML_SYMBOLIC_NUM]\u{4e2d}\u{7684}\u{4e00}\u{79cd}\u{ff0c}\u{5426}\u{5219}\u{4f1a}\u{5931}\u{8d25}"]
    #[doc = ""]
    #[doc = " @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetPixelFormat(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set Pixel Format"]
    #[doc = "  @param  void* handle                [IN]        Camera Handle"]
    #[doc = "          const unsigned int nValue   [IN]        The corresponding integer value for pixel format to be set, when calling this interface can be directly filled in enumeration values, such as MV_CC_SetPixelFormat(m_handle, PixelType_Gvsp_RGB8_Packed);"]
    #[doc = "  @return Success, return MV_OK, and the camera pixel format will change to the corresponding value. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Other interface of Enumeration structure parameters can refer to this interface, the enumeration type to be set must be one of the nSupportValue [MV_MAX_XML_SYMBOLIC_NUM] returned by the Get interface, otherwise it will fail"]
    pub fn MV_CC_SetPixelFormat(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAcquisitionMode(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{91c7}\u{96c6}\u{6a21}\u{5f0f}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          MVCC_ENUMVALUE* pstValue    [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{7684}\u{6709}\u{5173}\u{91c7}\u{96c6}\u{6a21}\u{5f0f}\u{7684}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{83b7}\u{5f97}\u{76f8}\u{5e94}\u{53c2}\u{6570}\u{4fe1}\u{606f}\u{7684}\u{7ed3}\u{6784}\u{4f53}, \u{5931}\u{8d25}, \u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "\u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetPixelFormat\u{ff0c}\u{53c2}\u{8003} CameraParam.h \u{4e2d}\u{7684} MV_CAM_ACQUISITION_MODE \u{5b9a}\u{4e49}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAcquisitionMode(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);"]
    #[doc = "  @brief  Get acquisition mode"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          MVCC_ENUMVALUE* pstValue    [IN][OUT]   Structure pointer of acquisition mode"]
    #[doc = "  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code"]
    #[doc = ""]
    #[doc = "Refer to MV_CC_GetPixelFormat and definition of MV_CAM_ACQUISITION_MODE in CameraParam.h"]
    pub fn MV_CC_GetAcquisitionMode(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_ENUMVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAcquisitionMode(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{50cf}\u{7d20}\u{683c}\u{5f0f}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{91c7}\u{96c6}\u{6a21}\u{5f0f}\u{5bf9}\u{5e94}\u{7684}\u{6574}\u{578b}\u{503c}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{91c7}\u{96c6}\u{6a21}\u{5f0f}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAcquisitionMode(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set acquisition mode"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Integer value to set corresponding to acquisition mode"]
    #[doc = "  @return Success, return MV_OK, and the camera acquisition mode will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetAcquisitionMode(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetGainMode(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{589e}\u{76ca}\u{6a21}\u{5f0f}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          MVCC_ENUMVALUE* pstValue    [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{7684}\u{6709}\u{5173}\u{589e}\u{76ca}\u{6a21}\u{5f0f}\u{7684}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{83b7}\u{5f97}\u{76f8}\u{5e94}\u{53c2}\u{6570}\u{4fe1}\u{606f}\u{7684}\u{7ed3}\u{6784}\u{4f53}, \u{5931}\u{8d25}, \u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "\u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetPixelFormat\u{ff0c}\u{53c2}\u{8003} CameraParam.h \u{4e2d}\u{7684} MV_CAM_GAIN_MODE \u{5b9a}\u{4e49}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetGainMode(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);"]
    #[doc = "  @brief  Get gain mode"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          MVCC_ENUMVALUE* pstValue    [IN][OUT]    Structure pointer of gain mode"]
    #[doc = "  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code"]
    #[doc = ""]
    #[doc = "Refer to MV_CC_GetPixelFormat and definition of MV_CAM_GAIN_MODE in CameraParam.h"]
    pub fn MV_CC_GetGainMode(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_ENUMVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetGainMode(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{589e}\u{76ca}\u{6a21}\u{5f0f}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{589e}\u{76ca}\u{6a21}\u{5f0f}\u{5bf9}\u{5e94}\u{7684}\u{6574}\u{578b}\u{503c}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{589e}\u{76ca}\u{6a21}\u{5f0f}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetGainMode(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set gain mode"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Integer value to set corresponding to gain mode"]
    #[doc = "  @return Success, return MV_OK, and the camera gain mode will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetGainMode(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetExposureAutoMode(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{81ea}\u{52a8}\u{66dd}\u{5149}\u{6a21}\u{5f0f}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          MVCC_ENUMVALUE* pstValue    [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{7684}\u{6709}\u{5173}\u{81ea}\u{52a8}\u{66dd}\u{5149}\u{6a21}\u{5f0f}\u{7684}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{83b7}\u{5f97}\u{76f8}\u{5e94}\u{53c2}\u{6570}\u{4fe1}\u{606f}\u{7684}\u{7ed3}\u{6784}\u{4f53}, \u{5931}\u{8d25}, \u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "\u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetPixelFormat\u{ff0c}\u{53c2}\u{8003} CameraParam.h \u{4e2d}\u{7684} MV_CAM_EXPOSURE_AUTO_MODE \u{5b9a}\u{4e49}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetExposureAutoMode(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);"]
    #[doc = "  @brief  Get auto exposure mode"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          MVCC_ENUMVALUE* pstValue    [IN][OUT]   Structure pointer of auto exposure mode"]
    #[doc = "  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code"]
    #[doc = ""]
    #[doc = "Refer to MV_CC_GetPixelFormat and definition of MV_CAM_EXPOSURE_AUTO_MODE in CameraParam.h"]
    pub fn MV_CC_GetExposureAutoMode(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_ENUMVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetExposureAutoMode(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{81ea}\u{52a8}\u{66dd}\u{5149}\u{6a21}\u{5f0f}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{81ea}\u{52a8}\u{66dd}\u{5149}\u{6a21}\u{5f0f}\u{5bf9}\u{5e94}\u{7684}\u{6574}\u{578b}\u{503c}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{81ea}\u{52a8}\u{66dd}\u{5149}\u{6a21}\u{5f0f}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetExposureAutoMode(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set auto exposure mode"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Integer value to set corresponding to auto exposure mode"]
    #[doc = "  @return Success, return MV_OK, and the camera auto exposure mode will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetExposureAutoMode(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetTriggerMode(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{89e6}\u{53d1}\u{6a21}\u{5f0f}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          MVCC_ENUMVALUE* pstValue    [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{7684}\u{6709}\u{5173}\u{89e6}\u{53d1}\u{6a21}\u{5f0f}\u{7684}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{83b7}\u{5f97}\u{76f8}\u{5e94}\u{53c2}\u{6570}\u{4fe1}\u{606f}\u{7684}\u{7ed3}\u{6784}\u{4f53}, \u{5931}\u{8d25}, \u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "\u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetPixelFormat\u{ff0c}\u{53c2}\u{8003} CameraParam.h \u{4e2d}\u{7684} MV_CAM_TRIGGER_MODE \u{5b9a}\u{4e49}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetTriggerMode(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);"]
    #[doc = "  @brief  Get trigger mode"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          MVCC_ENUMVALUE* pstValue    [IN][OUT]   Structure pointer of trigger mode"]
    #[doc = "  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code"]
    #[doc = ""]
    #[doc = "Refer to MV_CC_GetPixelFormat and definition of MV_CAM_TRIGGER_MODE in CameraParam.h"]
    pub fn MV_CC_GetTriggerMode(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_ENUMVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetTriggerMode(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{89e6}\u{53d1}\u{6a21}\u{5f0f}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{89e6}\u{53d1}\u{6a21}\u{5f0f}\u{5bf9}\u{5e94}\u{7684}\u{6574}\u{578b}\u{503c}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{89e6}\u{53d1}\u{6a21}\u{5f0f}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetTriggerMode(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set trigger mode"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Integer value to set corresponding to trigger mode"]
    #[doc = "  @return Success, return MV_OK, and the camera trigger mode will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetTriggerMode(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetTriggerDelay(IN void* handle, IN OUT MVCC_FLOATVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{89e6}\u{53d1}\u{5ef6}\u{65f6}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          MVCC_FLOATVALUE* pstValue   [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{89e6}\u{53d1}\u{5ef6}\u{65f6}\u{7684}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{83b7}\u{5f97}\u{76f8}\u{5e94}\u{53c2}\u{6570}\u{4fe1}\u{606f}\u{7684}\u{7ed3}\u{6784}\u{4f53}, \u{5931}\u{8d25}, \u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetFrameRate"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetTriggerDelay(IN void* handle, IN OUT MVCC_FLOATVALUE* pstValue);"]
    #[doc = "  @brief  Get tigger delay"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          MVCC_FLOATVALUE* pstValue   [IN][OUT]   Structure pointer of trigger delay"]
    #[doc = "  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Refer to MV_CC_GetFrameRate"]
    pub fn MV_CC_GetTriggerDelay(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_FLOATVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetTriggerDelay(IN void* handle, IN const float fValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{89e6}\u{53d1}\u{5ef6}\u{65f6}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const float fValue          [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{76f8}\u{673a}\u{89e6}\u{53d1}\u{5ef6}\u{65f6}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{89e6}\u{53d1}\u{5ef6}\u{65f6}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetTriggerDelay(IN void* handle, IN const float fValue);"]
    #[doc = "  @brief  Set tigger delay"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          const float fValue          [IN]        Trigger delay to set"]
    #[doc = "  @return Success, return MV_OK, and the camera trigger delay will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetTriggerDelay(
        handle: *mut ::std::os::raw::c_void,
        fValue: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetTriggerSource(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{89e6}\u{53d1}\u{6e90}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          MVCC_ENUMVALUE* pstValue    [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{7684}\u{6709}\u{5173}\u{89e6}\u{53d1}\u{6e90}\u{7684}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{83b7}\u{5f97}\u{76f8}\u{5e94}\u{53c2}\u{6570}\u{4fe1}\u{606f}\u{7684}\u{7ed3}\u{6784}\u{4f53}, \u{5931}\u{8d25}, \u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "\u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetPixelFormat\u{ff0c}\u{53c2}\u{8003} CameraParam.h \u{4e2d}\u{7684} MV_CAM_TRIGGER_SOURCE \u{5b9a}\u{4e49}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetTriggerSource(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);"]
    #[doc = "  @brief  Get trigger source"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          MVCC_ENUMVALUE* pstValue    [IN][OUT]   Structure pointer of trigger source"]
    #[doc = "  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code"]
    #[doc = ""]
    #[doc = "Refer to MV_CC_GetPixelFormat and definition of MV_CAM_TRIGGER_SOURCE in CameraParam.h"]
    pub fn MV_CC_GetTriggerSource(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_ENUMVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetTriggerSource(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{89e6}\u{53d1}\u{6e90}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{89e6}\u{53d1}\u{6e90}\u{5bf9}\u{5e94}\u{7684}\u{6574}\u{578b}\u{503c}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{89e6}\u{53d1}\u{6e90}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetTriggerSource(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set trigger source"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Integer value to set corresponding to trigger source"]
    #[doc = "  @return Success, return MV_OK, and the camera trigger source will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetTriggerSource(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_TriggerSoftwareExecute(IN void* handle);"]
    #[doc = "  @brief  \u{8f6f}\u{89e6}\u{53d1}\u{4e00}\u{6b21}\u{ff08}\u{63a5}\u{53e3}\u{4ec5}\u{5728}\u{5df2}\u{9009}\u{62e9}\u{7684}\u{89e6}\u{53d1}\u{6e90}\u{4e3a}\u{8f6f}\u{4ef6}\u{89e6}\u{53d1}\u{65f6}\u{6709}\u{6548}\u{ff09}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK, \u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_TriggerSoftwareExecute(IN void* handle);"]
    #[doc = "  @brief  Execute software trigger once (this interface only valid when the trigger source is set to software)"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_CC_TriggerSoftwareExecute(
        handle: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetGammaSelector(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}Gamma\u{7c7b}\u{578b}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          MVCC_ENUMVALUE* pstValue    [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{7684}\u{6709}\u{5173}Gamma\u{7c7b}\u{578b}\u{7684}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{83b7}\u{5f97}\u{76f8}\u{5e94}\u{53c2}\u{6570}\u{4fe1}\u{606f}\u{7684}\u{7ed3}\u{6784}\u{4f53}, \u{5931}\u{8d25}, \u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "\u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetPixelFormat\u{ff0c}\u{53c2}\u{8003} CameraParam.h \u{4e2d}\u{7684} MV_CAM_GAMMA_SELECTOR \u{5b9a}\u{4e49}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetGammaSelector(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);"]
    #[doc = "  @brief  Get Gamma mode"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          MVCC_ENUMVALUE* pstValue    [IN][OUT]   Structure pointer of gamma mode"]
    #[doc = "  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code"]
    #[doc = ""]
    #[doc = "Refer to MV_CC_GetPixelFormat and definition of MV_CAM_GAMMA_SELECTOR in CameraParam.h"]
    pub fn MV_CC_GetGammaSelector(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_ENUMVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetGammaSelector(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}Gamma\u{7c7b}\u{578b}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{8981}\u{8bbe}\u{7f6e}\u{7684}Gamma\u{7c7b}\u{578b}\u{5bf9}\u{5e94}\u{7684}\u{6574}\u{578b}\u{503c}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}Gamma\u{7c7b}\u{578b}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetGammaSelector(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set Gamma mode"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Integer value to set corresponding to gamma mode"]
    #[doc = "  @return Success, return MV_OK, and the camera gamma mode will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetGammaSelector(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetGamma(IN void* handle, IN OUT MVCC_FLOATVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}Gamma\u{503c}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          MVCC_FLOATVALUE* pstValue   [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}Gamma\u{503c}\u{7684}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{83b7}\u{5f97}\u{76f8}\u{5e94}\u{53c2}\u{6570}\u{4fe1}\u{606f}\u{7684}\u{7ed3}\u{6784}\u{4f53}, \u{5931}\u{8d25}, \u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetFrameRate"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetGamma(IN void* handle, IN OUT MVCC_FLOATVALUE* pstValue);"]
    #[doc = "  @brief  Get Gamma value"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          MVCC_FLOATVALUE* pstValue   [IN][OUT]   Structure pointer of gamma value"]
    #[doc = "  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Refer to MV_CC_GetFrameRate"]
    pub fn MV_CC_GetGamma(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_FLOATVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetGamma(IN void* handle, IN const float fValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}Gamma\u{503c}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const float fValue          [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{76f8}\u{673a}Gamma\u{503c}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}Gamma\u{503c}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetGamma(IN void* handle, IN const float fValue);"]
    #[doc = "  @brief  Set Gamma value"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          const float fValue          [IN]        Gamma value to set"]
    #[doc = "  @return Success, return MV_OK, and the camera gamma value will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetGamma(
        handle: *mut ::std::os::raw::c_void,
        fValue: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetSharpness(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{9510}\u{5ea6}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{9510}\u{5ea6}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetWidth"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetSharpness(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  Get sharpness"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of sharpness"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Refer to MV_CC_GetWidth"]
    pub fn MV_CC_GetSharpness(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_INTVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetSharpness(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{9510}\u{5ea6}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{9510}\u{5ea6}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{9510}\u{5ea6}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetSharpness(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set sharpness"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Sharpness to set"]
    #[doc = "  @return Success, return MV_OK, and the camera sharpness will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetSharpness(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetHue(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{7070}\u{5ea6}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{7070}\u{5ea6}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetWidth"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetHue(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  Get Hue"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of Hue"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Refer to MV_CC_GetWidth"]
    pub fn MV_CC_GetHue(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_INTVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetHue(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{7070}\u{5ea6}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{7070}\u{5ea6}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{7070}\u{5ea6}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetHue(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set Hue"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Hue to set"]
    #[doc = "  @return Success, return MV_OK, and the camera Hue will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetHue(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetSaturation(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{9971}\u{548c}\u{5ea6}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{9971}\u{548c}\u{5ea6}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetWidth"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetSaturation(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  Get Saturation"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of Saturation"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Refer to MV_CC_GetWidth"]
    pub fn MV_CC_GetSaturation(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_INTVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetSaturation(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{9971}\u{548c}\u{5ea6}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{9971}\u{548c}\u{5ea6}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{9971}\u{548c}\u{5ea6}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetSaturation(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set Saturation"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Saturation to set"]
    #[doc = "  @return Success, return MV_OK, and the camera Saturation will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetSaturation(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBalanceWhiteAuto(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{81ea}\u{52a8}\u{767d}\u{5e73}\u{8861}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          MVCC_ENUMVALUE* pstValue    [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{7684}\u{6709}\u{5173}\u{81ea}\u{52a8}\u{767d}\u{5e73}\u{8861}\u{7684}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{83b7}\u{5f97}\u{76f8}\u{5e94}\u{53c2}\u{6570}\u{4fe1}\u{606f}\u{7684}\u{7ed3}\u{6784}\u{4f53}, \u{5931}\u{8d25}, \u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "\u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetPixelFormat\u{ff0c}\u{53c2}\u{8003} CameraParam.h \u{4e2d}\u{7684} MV_CAM_BALANCEWHITE_AUTO \u{5b9a}\u{4e49}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBalanceWhiteAuto(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);"]
    #[doc = "  @brief  Get Auto white balance"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          MVCC_ENUMVALUE* pstValue    [IN][OUT]   Structure pointer of auto white balance"]
    #[doc = "  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code"]
    #[doc = ""]
    #[doc = "Refer to MV_CC_GetPixelFormat and definition of MV_CAM_BALANCEWHITE_AUTO in CameraParam.h"]
    pub fn MV_CC_GetBalanceWhiteAuto(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_ENUMVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBalanceWhiteAuto(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{81ea}\u{52a8}\u{767d}\u{5e73}\u{8861}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{81ea}\u{52a8}\u{767d}\u{5e73}\u{8861}\u{5bf9}\u{5e94}\u{7684}\u{6574}\u{578b}\u{503c}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{81ea}\u{52a8}\u{767d}\u{5e73}\u{8861}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBalanceWhiteAuto(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set Auto white balance"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Integer value to set corresponding to auto white balance"]
    #[doc = "  @return Success, return MV_OK, and the camera auto white balance will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetBalanceWhiteAuto(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBalanceRatioRed(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{767d}\u{5e73}\u{8861} \u{7ea2}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{767d}\u{5e73}\u{8861} \u{7ea2}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetWidth"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBalanceRatioRed(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  Get white balance red"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of white balance red"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Refer to MV_CC_GetWidth"]
    pub fn MV_CC_GetBalanceRatioRed(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_INTVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBalanceRatioRed(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{767d}\u{5e73}\u{8861} \u{7ea2}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{767d}\u{5e73}\u{8861} \u{7ea2}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{767d}\u{5e73}\u{8861} \u{7ea2}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBalanceRatioRed(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set white balance red"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          const unsigned int nValue   [IN]        White balance red to set"]
    #[doc = "  @return Success, return MV_OK, and the camera white balance red will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetBalanceRatioRed(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBalanceRatioGreen(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{767d}\u{5e73}\u{8861} \u{7eff}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{767d}\u{5e73}\u{8861} \u{7eff}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetWidth"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBalanceRatioGreen(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  Get white balance green"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of white balance green"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Refer to MV_CC_GetWidth"]
    pub fn MV_CC_GetBalanceRatioGreen(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_INTVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBalanceRatioGreen(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{767d}\u{5e73}\u{8861} \u{7eff}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{767d}\u{5e73}\u{8861} \u{7eff}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{767d}\u{5e73}\u{8861} \u{7eff}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBalanceRatioGreen(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set white balance green"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          const unsigned int nValue   [IN]        White balance green to set"]
    #[doc = "  @return Success, return MV_OK, and the camera white balance green will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetBalanceRatioGreen(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBalanceRatioBlue(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{767d}\u{5e73}\u{8861} \u{84dd}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{767d}\u{5e73}\u{8861} \u{84dd}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetWidth"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBalanceRatioBlue(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  Get white balance blue"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of white balance blue"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Refer to MV_CC_GetWidth"]
    pub fn MV_CC_GetBalanceRatioBlue(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_INTVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBalanceRatioBlue(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{767d}\u{5e73}\u{8861} \u{84dd}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{767d}\u{5e73}\u{8861} \u{84dd}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{767d}\u{5e73}\u{8861} \u{84dd}\u{5c06}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBalanceRatioBlue(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set white balance blue"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          const unsigned int nValue   [IN]        White balance blue to set"]
    #[doc = "  @return Success, return MV_OK, and the camera white balance blue will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetBalanceRatioBlue(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetFrameSpecInfoAbility(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{6c34}\u{5370}\u{4fe1}\u{606f}\u{5185}\u{5305}\u{542b}\u{7684}\u{4fe1}\u{606f}\u{7c7b}\u{578b}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{6c34}\u{5370}\u{4fe1}\u{606f}\u{5185}\u{5305}\u{542b}\u{7684}\u{4fe1}\u{606f}\u{7c7b}\u{578b}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetWidth"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetFrameSpecInfoAbility(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  Get information type included by frame stamp"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of information type included by frame stamp"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Refer to MV_CC_GetWidth"]
    pub fn MV_CC_GetFrameSpecInfoAbility(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_INTVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetFrameSpecInfoAbility(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{6c34}\u{5370}\u{4fe1}\u{606f}\u{5185}\u{5305}\u{542b}\u{7684}\u{4fe1}\u{606f}\u{7c7b}\u{578b}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{6c34}\u{5370}\u{4fe1}\u{606f}\u{5185}\u{5305}\u{542b}\u{7684}\u{4fe1}\u{606f}\u{7c7b}\u{578b}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{6c34}\u{5370}\u{4fe1}\u{606f}\u{5185}\u{5305}\u{542b}\u{7684}\u{4fe1}\u{606f}\u{7c7b}\u{578b}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetFrameSpecInfoAbility(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set information type included by frame stamp"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Information type included by frame stamp to set"]
    #[doc = "  @return Success, return MV_OK, and the camera information type included by frame stamp will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetFrameSpecInfoAbility(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetDeviceUserID(IN void* handle, IN OUT MVCC_STRINGVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{8bbe}\u{5907}\u{81ea}\u{5b9a}\u{4e49}\u{540d}\u{5b57}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          MVCC_STRINGVALUE* pstValue  [IN OUT]    \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{540d}\u{5b57}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{83b7}\u{53d6}\u{5230}\u{76f8}\u{673a}\u{7684}\u{81ea}\u{5b9a}\u{4e49}\u{540d}\u{5b57}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetDeviceUserID(IN void* handle, IN OUT MVCC_STRINGVALUE* pstValue);"]
    #[doc = "  @brief  Get device user defined name"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          MVCC_STRINGVALUE* pstValue  [IN OUT]    Structure pointer of device name"]
    #[doc = "  @return Success, return MV_OK, and get the camera user defined name. Failure, return error code"]
    pub fn MV_CC_GetDeviceUserID(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_STRINGVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetDeviceUserID(IN void* handle, IN const char* chValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{8bbe}\u{5907}\u{81ea}\u{5b9a}\u{4e49}\u{540d}\u{5b57}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          IN const char* chValue      [IN]        \u{8bbe}\u{5907}\u{540d}\u{5b57}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{8bbe}\u{7f6e}\u{8bbe}\u{5907}\u{81ea}\u{5b9a}\u{4e49}\u{540d}\u{5b57}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetDeviceUserID(IN void* handle, IN const char* chValue);"]
    #[doc = "  @brief  Set device user defined name"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          IN const char* chValue      [IN]        Device name"]
    #[doc = "  @return Success, return MV_OK, and set the camera user defined name. Failure, return error code"]
    pub fn MV_CC_SetDeviceUserID(
        handle: *mut ::std::os::raw::c_void,
        chValue: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBurstFrameCount(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{4e00}\u{6b21}\u{89e6}\u{53d1}\u{7684}\u{5e27}\u{6570}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{4e00}\u{6b21}\u{89e6}\u{53d1}\u{7684}\u{5e27}\u{6570}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetWidth"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBurstFrameCount(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  Get frame number trigger by once"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of frame number trigger by once"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Refer to MV_CC_GetWidth"]
    pub fn MV_CC_GetBurstFrameCount(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_INTVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBurstFrameCount(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{4e00}\u{6b21}\u{89e6}\u{53d1}\u{7684}\u{5e27}\u{6570}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{4e00}\u{6b21}\u{89e6}\u{53d1}\u{7684}\u{5e27}\u{6570}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{4e00}\u{6b21}\u{89e6}\u{53d1}\u{7684}\u{5e27}\u{6570}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBurstFrameCount(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set frame number trigger by once"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Frame number trigger by once to set"]
    #[doc = "  @return Success, return MV_OK, and the camera frame number trigger by once will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetBurstFrameCount(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAcquisitionLineRate(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{884c}\u{9891}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{884c}\u{9891}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetWidth"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAcquisitionLineRate(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  Get line rate"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of line rate"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Refer to MV_CC_GetWidth"]
    pub fn MV_CC_GetAcquisitionLineRate(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_INTVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAcquisitionLineRate(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{884c}\u{9891}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{884c}\u{9891}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{884c}\u{9891}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAcquisitionLineRate(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set line rate"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Line rate to set"]
    #[doc = "  @return Success, return MV_OK, and the camera line rate will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetAcquisitionLineRate(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetHeartBeatTimeout(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{5fc3}\u{8df3}\u{4fe1}\u{606f}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{5fc3}\u{8df3}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetWidth"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetHeartBeatTimeout(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  Get heartbeat information"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of heartbeat information"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Refer to MV_CC_GetWidth"]
    pub fn MV_CC_GetHeartBeatTimeout(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_INTVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetHeartBeatTimeout(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{5fc3}\u{8df3}\u{4fe1}\u{606f}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{5fc3}\u{8df3}\u{4fe1}\u{606f}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{5fc3}\u{8df3}\u{4fe1}\u{606f}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetHeartBeatTimeout(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set heartbeat information"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Heartbeat information to set"]
    #[doc = "  @return Success, return MV_OK, and the camera heartbeat information will change to the corresponding value. Failure, return error code"]
    pub fn MV_CC_SetHeartBeatTimeout(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_GetGevSCPSPacketSize(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{7f51}\u{7edc}\u{5305}\u{5927}\u{5c0f}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{7f51}\u{7edc}\u{5305}\u{5927}\u{5c0f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetWidth"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_GetGevSCPSPacketSize(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  Get network packet size"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of network packet size"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Refer to MV_CC_GetWidth"]
    pub fn MV_GIGE_GetGevSCPSPacketSize(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_INTVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_SetGevSCPSPacketSize(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{7f51}\u{7edc}\u{5305}\u{5927}\u{5c0f}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{7f51}\u{7edc}\u{5305}\u{5927}\u{5c0f}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{7f51}\u{7edc}\u{5305}\u{5927}\u{5c0f}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_SetGevSCPSPacketSize(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set network packet size"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Packet size to set"]
    #[doc = "  @return Success, return MV_OK, and change packet size to setting value. Failure, return error code"]
    pub fn MV_GIGE_SetGevSCPSPacketSize(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_GetGevSCPD(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{7f51}\u{7edc}\u{5305}\u{53d1}\u{9001}\u{95f4}\u{9694}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{76f8}\u{673a}\u{7f51}\u{7edc}\u{5305}\u{53d1}\u{9001}\u{95f4}\u{9694}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "          \u{53ef}\u{53c2}\u{7167}\u{63a5}\u{53e3}MV_CC_GetWidth"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_GetGevSCPD(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);"]
    #[doc = "  @brief  Get network packet sending delay"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of network packet sending delay"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = ""]
    #[doc = "          Refer to MV_CC_GetWidth"]
    pub fn MV_GIGE_GetGevSCPD(
        handle: *mut ::std::os::raw::c_void,
        pstValue: *mut MVCC_INTVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_SetGevSCPD(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{7f51}\u{7edc}\u{5305}\u{53d1}\u{9001}\u{95f4}\u{9694}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          const unsigned int nValue   [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{7f51}\u{7edc}\u{5305}\u{53d1}\u{9001}\u{95f4}\u{9694}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{7f51}\u{7edc}\u{5305}\u{53d1}\u{9001}\u{95f4}\u{9694}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_SetGevSCPD(IN void* handle, IN const unsigned int nValue);"]
    #[doc = "  @brief  Set network packet sending delay"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          const unsigned int nValue   [IN]        Packet delay to set"]
    #[doc = "  @return Success, return MV_OK, and change packet delay to setting value. Failure, return error code"]
    pub fn MV_GIGE_SetGevSCPD(
        handle: *mut ::std::os::raw::c_void,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_GetGevSCDA(IN void* handle, unsigned int* pnIP);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{63a5}\u{6536}\u{7aef}IP\u{5730}\u{5740}\u{ff0c}0xa9fe0102 \u{8868}\u{793a} 169.254.1.2"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  unsigned int* pnIP          [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{63a5}\u{6536}\u{7aef}IP\u{5730}\u{5740}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_GetGevSCDA(IN void* handle, unsigned int* pnIP);"]
    #[doc = "  @brief  Get receiver IP address, 0xa9fe0102 indicates 169.254.1.2"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "  @param  unsigned int* pnIP          [IN][OUT]   Receiver IP address"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_GIGE_GetGevSCDA(
        handle: *mut ::std::os::raw::c_void,
        pnIP: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_SetGevSCDA(IN void* handle, unsigned int nIP);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{63a5}\u{6536}\u{7aef}IP\u{5730}\u{5740}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          unsigned int nIP            [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{63a5}\u{6536}\u{7aef}IP\u{5730}\u{5740}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{63a5}\u{6536}\u{7aef}IP\u{5730}\u{5740}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_SetGevSCDA(IN void* handle, unsigned int nIP);"]
    #[doc = "  @brief  Set receiver IP address"]
    #[doc = "  @param  void* handle                [IN]        Handel"]
    #[doc = "          unsigned int nIP            [IN]        Receiver IP address to set"]
    #[doc = "  @return Success, return MV_OK, and change receiver IP address to setting value. Failure, return error code"]
    pub fn MV_GIGE_SetGevSCDA(
        handle: *mut ::std::os::raw::c_void,
        nIP: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_GetGevSCSP(IN void* handle, unsigned int* pnPort);"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{53d1}\u{9001}\u{7aef}\u{7684}\u{7aef}\u{53e3}\u{53f7}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "  @param  unsigned int* pnPort        [IN][OUT]   \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{53d1}\u{9001}\u{7aef}\u{7684}\u{7aef}\u{53e3}\u{53f7}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_GetGevSCSP(IN void* handle, unsigned int* pnPort);"]
    #[doc = "  @brief  Get transmitter port number"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "  @param  unsigned int* pnPort        [IN][OUT]   Transmitter port number"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_GIGE_GetGevSCSP(
        handle: *mut ::std::os::raw::c_void,
        pnPort: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_SetGevSCSP(IN void* handle, unsigned int nPort);"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{53d1}\u{9001}\u{7aef}\u{7684}\u{7aef}\u{53e3}\u{53f7}"]
    #[doc = "  @param  void* handle                [IN]        \u{76f8}\u{673a}\u{53e5}\u{67c4}"]
    #[doc = "          unsigned int nPort          [IN]        \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{53d1}\u{9001}\u{7aef}\u{7684}\u{7aef}\u{53e3}\u{53f7}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5e76}\u{4e14}\u{76f8}\u{673a}\u{53d1}\u{9001}\u{7aef}\u{7684}\u{7aef}\u{53e3}\u{53f7}\u{4f1a}\u{66f4}\u{6539}\u{4e3a}\u{76f8}\u{5e94}\u{503c}\u{ff0c}\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_SetGevSCSP(IN void* handle, unsigned int nPort);"]
    #[doc = "  @brief  Set transmitter port number"]
    #[doc = "  @param  void* handle                [IN]        Handle"]
    #[doc = "          unsigned int nPort          [IN]        Transmitter port number to set"]
    #[doc = "  @return Success, return MV_OK, and change transmitter port number to setting value. Failure, return error code"]
    pub fn MV_GIGE_SetGevSCSP(
        handle: *mut ::std::os::raw::c_void,
        nPort: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{83b7}\u{53d6}SDK\u{7248}\u{672c}\u{53f7}"]
    #[doc = "  @return \u{8fd4}\u{56de}4\u{5b57}\u{8282}\u{7248}\u{672c}\u{53f7}"]
    #[doc = "|\u{4e3b}    |\u{6b21}    |\u{4fee}\u{6b63}  |  \u{6d4b}\u{8bd5}|"]
    #[doc = "8bits  8bits  8bits  8bits"]
    #[doc = "  @remarks \u{6bd4}\u{5982}\u{8fd4}\u{56de}\u{503c}\u{4e3a}0x01000001\u{ff0c}\u{5373}SDK\u{7248}\u{672c}\u{53f7}\u{4e3a}V1.0.0.1\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Get SDK Version"]
    #[doc = "  @return Always return 4 Bytes of version number"]
    #[doc = "|Main    |Sub    |Rev  |  Test|"]
    #[doc = "8bits  8bits  8bits  8bits"]
    #[doc = "  @remarks For example, if the return value is 0x01000001, the SDK version is V1.0.0.1."]
    pub fn MV_CC_GetSDKVersion() -> ::std::os::raw::c_uint;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{652f}\u{6301}\u{7684}\u{4f20}\u{8f93}\u{5c42}"]
    #[doc = "  @return \u{652f}\u{6301}\u{7684}\u{4f20}\u{8f93}\u{5c42}\u{7f16}\u{53f7}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Get supported Transport Layer"]
    #[doc = "  @return Supported Transport Layer number"]
    pub fn MV_CC_EnumerateTls() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{679a}\u{4e3e}\u{8bbe}\u{5907}"]
    #[doc = "  @param  nTLayerType                 [IN]            \u{679a}\u{4e3e}\u{4f20}\u{8f93}\u{5c42}"]
    #[doc = "  @param  pstDevList                  [OUT]           \u{8bbe}\u{5907}\u{5217}\u{8868}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8bbe}\u{5907}\u{5217}\u{8868}\u{7684}\u{5185}\u{5b58}\u{662f}\u{5728}SDK\u{5185}\u{90e8}\u{5206}\u{914d}\u{7684}\u{ff0c}\u{591a}\u{7ebf}\u{7a0b}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{65f6}\u{4f1a}\u{8fdb}\u{884c}\u{8bbe}\u{5907}\u{5217}\u{8868}\u{5185}\u{5b58}\u{7684}\u{91ca}\u{653e}\u{548c}\u{7533}\u{8bf7}\u{ff0c}\\n"]
    #[doc = "\u{5efa}\u{8bae}\u{5c3d}\u{91cf}\u{907f}\u{514d}\u{591a}\u{7ebf}\u{7a0b}\u{679a}\u{4e3e}\u{64cd}\u{4f5c}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Enumerate Device"]
    #[doc = "  @param  nTLayerType                 [IN]            Enumerate TLs"]
    #[doc = "  @param  pstDevList                  [OUT]           Device List"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks The memory of the device list is allocated within the SDK. When the interface is invoked by multiple threads, the memory of the device list will be released and applied.\\n"]
    #[doc = "It is recommended to avoid multithreaded enumeration operations as much as possible."]
    pub fn MV_CC_EnumDevices(
        nTLayerType: ::std::os::raw::c_uint,
        pstDevList: *mut MV_CC_DEVICE_INFO_LIST,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{6839}\u{636e}\u{5382}\u{5546}\u{540d}\u{5b57}\u{679a}\u{4e3e}\u{8bbe}\u{5907}"]
    #[doc = "  @param  nTLayerType                 [IN]            \u{679a}\u{4e3e}\u{4f20}\u{8f93}\u{5c42}"]
    #[doc = "  @param  pstDevList                  [OUT]           \u{8bbe}\u{5907}\u{5217}\u{8868}"]
    #[doc = "  @param  strManufacturerName           [IN]            \u{5382}\u{5546}\u{540d}\u{5b57}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8bbe}\u{5907}\u{5217}\u{8868}\u{7684}\u{5185}\u{5b58}\u{662f}\u{5728}SDK\u{5185}\u{90e8}\u{5206}\u{914d}\u{7684}\u{ff0c}\u{591a}\u{7ebf}\u{7a0b}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{65f6}\u{4f1a}\u{8fdb}\u{884c}\u{8bbe}\u{5907}\u{5217}\u{8868}\u{5185}\u{5b58}\u{7684}\u{91ca}\u{653e}\u{548c}\u{7533}\u{8bf7}\u{ff0c}\\n"]
    #[doc = "\u{5efa}\u{8bae}\u{5c3d}\u{91cf}\u{907f}\u{514d}\u{591a}\u{7ebf}\u{7a0b}\u{679a}\u{4e3e}\u{64cd}\u{4f5c}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Enumerate device according to manufacture name"]
    #[doc = "  @param  nTLayerType                 [IN]            Transmission layer of enumeration"]
    #[doc = "  @param  pstDevList                  [OUT]           Device list"]
    #[doc = "  @param  strManufacturerName           [IN]            Manufacture Name"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks The memory of the device list is allocated within the SDK. When the interface is invoked by multiple threads, the memory of the device list will be released and applied.\\n"]
    #[doc = "It is recommended to avoid multithreaded enumeration operations as much as possible."]
    pub fn MV_CC_EnumDevicesEx(
        nTLayerType: ::std::os::raw::c_uint,
        pstDevList: *mut MV_CC_DEVICE_INFO_LIST,
        strManufacturerName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{8bbe}\u{5907}\u{662f}\u{5426}\u{53ef}\u{8fbe}"]
    #[doc = "  @param  pstDevInfo                  [IN]            \u{8bbe}\u{5907}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "  @param  nAccessMode                 [IN]            \u{8bbf}\u{95ee}\u{6743}\u{9650}"]
    #[doc = "  @return \u{53ef}\u{8fbe}\u{ff0c}\u{8fd4}\u{56de}true\u{ff1b}\u{4e0d}\u{53ef}\u{8fbe}\u{ff0c}\u{8fd4}\u{56de}false"]
    #[doc = "  @remarks \u{8bfb}\u{53d6}\u{8bbe}\u{5907}CCP\u{5bc4}\u{5b58}\u{5668}\u{7684}\u{503c}\u{ff0c}\u{5224}\u{65ad}\u{5f53}\u{524d}\u{72b6}\u{6001}\u{662f}\u{5426}\u{5177}\u{6709}\u{67d0}\u{79cd}\u{8bbf}\u{95ee}\u{6743}\u{9650}\u{3002} \\n"]
    #[doc = "\u{5982}\u{679c}\u{8bbe}\u{5907}\u{4e0d}\u{652f}\u{6301}MV_ACCESS_ExclusiveWithSwitch\u{3001}MV_ACCESS_ControlWithSwitch\u{3001}MV_ACCESS_ControlSwitchEnableWithKey\u{8fd9}\u{4e09}\u{79cd}\u{6a21}\u{5f0f}\u{ff0c}\u{63a5}\u{53e3}\u{8fd4}\u{56de}false\u{3002}\u{76ee}\u{524d}\u{8bbe}\u{5907}\u{4e0d}\u{652f}\u{6301}\u{8fd9}3\u{79cd}\u{62a2}\u{5360}\u{6a21}\u{5f0f}\u{ff0c}\u{56fd}\u{9645}\u{4e0a}\u{4e3b}\u{6d41}\u{7684}\u{5382}\u{5546}\u{7684}\u{8bbe}\u{5907}\u{4e5f}\u{90fd}\u{6682}\u{4e0d}\u{652f}\u{6301}\u{8fd9}3\u{79cd}\u{6a21}\u{5f0f}\u{3002} \\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{4e0d}\u{652f}\u{6301}CameraLink\u{8bbe}\u{5907}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Is the device accessible"]
    #[doc = "  @param  pstDevInfo                  [IN]            Device Information Structure"]
    #[doc = "  @param  nAccessMode                 [IN]            Access Right"]
    #[doc = "  @return Access, return true. Not access, return false"]
    #[doc = "  @remarks Read device CCP register value and determine current access permission.\\n"]
    #[doc = "Return false if the device does not support the modes MV_ACCESS_ExclusiveWithSwitch, MV_ACCESS_ControlWithSwitch, MV_ACCESS_ControlSwitchEnableWithKey. Currently the device does not support the 3 preemption modes, neither do the devices from other mainstream manufacturers. \\n"]
    #[doc = "This API is not supported by CameraLink device."]
    pub fn MV_CC_IsDeviceAccessible(
        pstDevInfo: *mut MV_CC_DEVICE_INFO,
        nAccessMode: ::std::os::raw::c_uint,
    ) -> bool_;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}SDK\u{65e5}\u{5fd7}\u{8def}\u{5f84}"]
    #[doc = "  @param  strSDKLogPath             [IN]           SDK\u{65e5}\u{5fd7}\u{8def}\u{5f84}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8bbe}\u{7f6e}\u{8def}\u{5f84}\u{4e4b}\u{540e}\u{ff0c}\u{53ef}\u{4ee5}\u{6307}\u{5b9a}\u{8def}\u{5f84}\u{5b58}\u{653e}\u{65e5}\u{5fd7}\u{3002}\\n"]
    #[doc = "v2.4.1\u{7248}\u{672c}\u{65b0}\u{589e}\u{65e5}\u{5fd7}\u{670d}\u{52a1}\u{ff0c}\u{5f00}\u{542f}\u{670d}\u{52a1}\u{4e4b}\u{540e}\u{8be5}\u{63a5}\u{53e3}\u{65e0}\u{6548}\u{ff0c}\u{9ed8}\u{8ba4}\u{65e5}\u{5fd7}\u{670d}\u{52a1}\u{4e3a}\u{5f00}\u{542f}\u{72b6}\u{6001}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Set SDK log path"]
    #[doc = "  @param  strSDKLogPath             [IN]           SDK log path"]
    #[doc = "  @return Access, return true. Not access, return false"]
    #[doc = "  @remarks For version V2.4.1, added log service, this API is invalid when the service is enabled.And The logging service is enabled by default\\n"]
    #[doc = "This API is used to set the log file storing path."]
    pub fn MV_CC_SetSDKLogPath(
        strSDKLogPath: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{521b}\u{5efa}\u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  handle                      [OUT]           \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pstDevInfo                  [IN]            \u{8bbe}\u{5907}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{6839}\u{636e}\u{8f93}\u{5165}\u{7684}\u{8bbe}\u{5907}\u{4fe1}\u{606f}\u{ff0c}\u{521b}\u{5efa}\u{5e93}\u{5185}\u{90e8}\u{5fc5}\u{987b}\u{7684}\u{8d44}\u{6e90}\u{548c}\u{521d}\u{59cb}\u{5316}\u{5185}\u{90e8}\u{6a21}\u{5757}\u{3002}\u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{521b}\u{5efa}\u{53e5}\u{67c4}\u{ff0c}\u{8c03}\u{7528}SDK\u{63a5}\u{53e3}\u{ff0c}\u{4f1a}\u{9ed8}\u{8ba4}\u{751f}\u{6210}SDK\u{65e5}\u{5fd7}\u{6587}\u{4ef6}\u{ff0c}\u{5982}\u{679c}\u{4e0d}\u{9700}\u{8981}\u{751f}\u{6210}\u{65e5}\u{5fd7}\u{6587}\u{4ef6}\u{ff0c}\u{53ef}\u{4ee5}\u{901a}\u{8fc7} MV_CC_CreateHandleWithoutLog() \u{521b}\u{5efa}\u{53e5}\u{67c4}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Create Device Handle"]
    #[doc = "  @param  handle                      [OUT]           Device handle"]
    #[doc = "  @param  pstDevInfo                  [IN]            Device Information Structure"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Create required resources within library and initialize internal module according to input device information. Create handle and call SDK interface through this interface, and SDK log file will be created by default. Creating handle through MV_CC_CreateHandleWithoutLog() will not generate log files."]
    pub fn MV_CC_CreateHandle(
        handle: *mut *mut ::std::os::raw::c_void,
        pstDevInfo: *const MV_CC_DEVICE_INFO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{521b}\u{5efa}\u{8bbe}\u{5907}\u{53e5}\u{67c4}\u{ff0c}\u{4e0d}\u{751f}\u{6210}\u{65e5}\u{5fd7}"]
    #[doc = "  @param  handle                      [OUT]           \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pstDevInfo                  [IN]            \u{8bbe}\u{5907}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{6839}\u{636e}\u{8f93}\u{5165}\u{7684}\u{8bbe}\u{5907}\u{4fe1}\u{606f}\u{ff0c}\u{521b}\u{5efa}\u{5e93}\u{5185}\u{90e8}\u{5fc5}\u{987b}\u{7684}\u{8d44}\u{6e90}\u{548c}\u{521d}\u{59cb}\u{5316}\u{5185}\u{90e8}\u{6a21}\u{5757}\u{3002}\u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{521b}\u{5efa}\u{53e5}\u{67c4}\u{ff0c}\u{8c03}\u{7528}SDK\u{63a5}\u{53e3}\u{ff0c}\u{4e0d}\u{4f1a}\u{9ed8}\u{8ba4}\u{751f}\u{6210}SDK\u{65e5}\u{5fd7}\u{6587}\u{4ef6}\u{ff0c}\u{5982}\u{679c}\u{9700}\u{8981}\u{751f}\u{6210}\u{65e5}\u{5fd7}\u{6587}\u{4ef6}\u{53ef}\u{4ee5}\u{901a}\u{8fc7} MV_CC_CreateHandle() \u{521b}\u{5efa}\u{53e5}\u{67c4}\u{ff0c}\u{65e5}\u{5fd7}\u{6587}\u{4ef6}\u{81ea}\u{52a8}\u{751f}\u{6210}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Create Device Handle without log"]
    #[doc = "  @param  handle                      [OUT]           Device handle"]
    #[doc = "  @param  pstDevInfo                  [IN]            Device Information Structure"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Create required resources within library and initialize internal module according to input device information. Create handle and call SDK interface through this interface, and SDK log file will not be created. To create logs, create handle through MV_CC_CreateHandle() , and log files will be automatically generated."]
    pub fn MV_CC_CreateHandleWithoutLog(
        handle: *mut *mut ::std::os::raw::c_void,
        pstDevInfo: *const MV_CC_DEVICE_INFO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{9500}\u{6bc1}\u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Destroy Device Handle"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_CC_DestroyHandle(handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{6253}\u{5f00}\u{8bbe}\u{5907}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  nAccessMode                 [IN]            \u{8bbf}\u{95ee}\u{6743}\u{9650}"]
    #[doc = "  @param  nSwitchoverKey              [IN]            \u{5207}\u{6362}\u{8bbf}\u{95ee}\u{6743}\u{9650}\u{65f6}\u{7684}\u{5bc6}\u{94a5}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{6839}\u{636e}\u{8bbe}\u{7f6e}\u{7684}\u{8bbe}\u{5907}\u{53c2}\u{6570}\u{ff0c}\u{627e}\u{5230}\u{5bf9}\u{5e94}\u{7684}\u{8bbe}\u{5907}\u{ff0c}\u{8fde}\u{63a5}\u{8bbe}\u{5907}\u{3002}\\n"]
    #[doc = "\u{76ee}\u{524d}\u{8bbe}\u{5907}\u{6682}\u{4e0d}\u{652f}\u{6301}MV_ACCESS_ExclusiveWithSwitch\u{3001}MV_ACCESS_ControlWithSwitch\u{3001}MV_ACCESS_ControlSwitchEnable\u{3001}MV_ACCESS_ControlSwitchEnableWithKey\u{8fd9}\u{56db}\u{79cd}\u{62a2}\u{5360}\u{6a21}\u{5f0f}\u{3002}\\n"]
    #[doc = "\u{5bf9}\u{4e8e}U3V\u{8bbe}\u{5907}\u{ff0c}nAccessMode\u{3001}nSwitchoverKey\u{8fd9}\u{4e24}\u{4e2a}\u{53c2}\u{6570}\u{65e0}\u{6548}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Open Device"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  nAccessMode                 [IN]            Access Right"]
    #[doc = "  @param  nSwitchoverKey              [IN]            Switch key of access right"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Find specific device and connect according to set device parameters. \\n"]
    #[doc = "Currently the device does not support the following preemption modes: MV_ACCESS_ExclusiveWithSwitch, MV_ACCESS_ControlWithSwitch, MV_ACCESS_ControlSwitchEnableWithKey.\\n"]
    #[doc = "For USB3Vision device, nAccessMode, nSwitchoverKey are invalid."]
    pub fn MV_CC_OpenDevice(
        handle: *mut ::std::os::raw::c_void,
        nAccessMode: ::std::os::raw::c_uint,
        nSwitchoverKey: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{5173}\u{95ed}\u{8bbe}\u{5907}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{901a}\u{8fc7} MV_CC_OpenDevice() \u{8fde}\u{63a5}\u{8bbe}\u{5907}\u{540e}\u{ff0c}\u{53ef}\u{4ee5}\u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{65ad}\u{5f00}\u{8bbe}\u{5907}\u{8fde}\u{63a5}\u{ff0c}\u{91ca}\u{653e}\u{8d44}\u{6e90}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Close Device"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks After connecting to device through MV_CC_OpenDevice() , use this interface to disconnect and release resources."]
    pub fn MV_CC_CloseDevice(handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{5224}\u{65ad}\u{8bbe}\u{5907}\u{662f}\u{5426}\u{5904}\u{4e8e}\u{8fde}\u{63a5}\u{72b6}\u{6001}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @return \u{8bbe}\u{5907}\u{5904}\u{4e8e}\u{8fde}\u{63a5}\u{72b6}\u{6001}\u{ff0c}\u{8fd4}\u{56de}true\u{ff1b}\u{6ca1}\u{8fde}\u{63a5}\u{6216}\u{5931}\u{53bb}\u{8fde}\u{63a5}\u{ff0c}\u{8fd4}\u{56de}false"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Is The Device Connected"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @return Connected, return true. Not Connected or DIsconnected, return false"]
    pub fn MV_CC_IsDeviceConnected(handle: *mut ::std::os::raw::c_void) -> bool_;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{6ce8}\u{518c}\u{56fe}\u{50cf}\u{6570}\u{636e}\u{56de}\u{8c03}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  cbOutput                    [IN]            \u{56de}\u{8c03}\u{51fd}\u{6570}\u{6307}\u{9488}"]
    #[doc = "  @param  pUser                       [IN]            \u{7528}\u{6237}\u{81ea}\u{5b9a}\u{4e49}\u{53d8}\u{91cf}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{8bbe}\u{7f6e}\u{56fe}\u{50cf}\u{6570}\u{636e}\u{56de}\u{8c03}\u{51fd}\u{6570}\u{ff0c}\u{5728} MV_CC_CreateHandle() \u{4e4b}\u{540e}\u{5373}\u{53ef}\u{8c03}\u{7528}\u{3002} \\n"]
    #[doc = "\u{56fe}\u{50cf}\u{6570}\u{636e}\u{91c7}\u{96c6}\u{6709}\u{4e24}\u{79cd}\u{65b9}\u{5f0f}\u{ff0c}\u{4e24}\u{79cd}\u{65b9}\u{5f0f}\u{4e0d}\u{80fd}\u{590d}\u{7528}\u{ff1a}\\n"]
    #[doc = "\u{65b9}\u{5f0f}\u{4e00}\u{ff1a}\u{8c03}\u{7528} MV_CC_RegisterImageCallBackEx() \u{8bbe}\u{7f6e}\u{56fe}\u{50cf}\u{6570}\u{636e}\u{56de}\u{8c03}\u{51fd}\u{6570}\u{ff0c}\u{7136}\u{540e}\u{8c03}\u{7528} MV_CC_StartGrabbing() \u{5f00}\u{59cb}\u{91c7}\u{96c6}\u{ff0c}\u{91c7}\u{96c6}\u{7684}\u{56fe}\u{50cf}\u{6570}\u{636e}\u{5728}\u{8bbe}\u{7f6e}\u{7684}\u{56de}\u{8c03}\u{51fd}\u{6570}\u{4e2d}\u{8fd4}\u{56de}\u{3002}\\n"]
    #[doc = "\u{65b9}\u{5f0f}\u{4e8c}\u{ff1a}\u{8c03}\u{7528} MV_CC_StartGrabbing() \u{5f00}\u{59cb}\u{91c7}\u{96c6}\u{ff0c}\u{7136}\u{540e}\u{5728}\u{5e94}\u{7528}\u{5c42}\u{5faa}\u{73af}\u{8c03}\u{7528} MV_CC_GetOneFrame() \u{83b7}\u{53d6}\u{6307}\u{5b9a}\u{50cf}\u{7d20}\u{683c}\u{5f0f}\u{7684}\u{5e27}\u{6570}\u{636e}\u{ff0c}\u{83b7}\u{53d6}\u{5e27}\u{6570}\u{636e}\u{65f6}\u{4e0a}\u{5c42}\u{5e94}\u{7528}\u{7a0b}\u{5e8f}\u{9700}\u{8981}\u{6839}\u{636e}\u{5e27}\u{7387}\u{63a7}\u{5236}\u{597d}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{7684}\u{9891}\u{7387}\u{3002} \\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{4e0d}\u{652f}\u{6301}CameraLink\u{8bbe}\u{5907}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Register the image callback function"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  cbOutput                    [IN]            Callback function pointer"]
    #[doc = "  @param  pUser                       [IN]            User defined variable"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks After MV_CC_CreateHandle() , call this interface to set image data callback function.\\n"]
    #[doc = "There are two available image data acquisition modes, and cannot be used together: \\n"]
    #[doc = "Mode 1: Call MV_CC_RegisterImageCallBack() to set image data callback function, and then call MV_CC_StartGrabbing() to start acquiring. The acquired image data will return in the set callback function.\\n"]
    #[doc = "Mode 2: Call MV_CC_StartGrabbing() to start acquiring, and then call MV_CC_GetOneFrame() repeatedly in application layer to get frame data of specified pixel format. When getting frame data, the frequency of calling this interface should be controlled by upper layer application according to frame rate. \\n"]
    #[doc = "This API is not supported by CameraLink device."]
    pub fn MV_CC_RegisterImageCallBackEx(
        handle: *mut ::std::os::raw::c_void,
        cbOutput: ::std::option::Option<
            unsafe extern "C" fn(
                pData: *mut ::std::os::raw::c_uchar,
                pstFrameInfo: *mut MV_FRAME_OUT_INFO_EX,
                pUser: *mut ::std::os::raw::c_void,
            ),
        >,
        pUser: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{6ce8}\u{518c}\u{56fe}\u{50cf}\u{6570}\u{636e}\u{56de}\u{8c03}\u{ff0c}RGB"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  cbOutput                    [IN]            \u{56de}\u{8c03}\u{51fd}\u{6570}\u{6307}\u{9488}"]
    #[doc = "  @param  pUser                       [IN]            \u{7528}\u{6237}\u{81ea}\u{5b9a}\u{4e49}\u{53d8}\u{91cf}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{8bbe}\u{7f6e}\u{56fe}\u{50cf}\u{6570}\u{636e}\u{56de}\u{8c03}\u{51fd}\u{6570}\u{ff0c}\u{5728} MV_CC_CreateHandle() \u{4e4b}\u{540e}\u{5373}\u{53ef}\u{8c03}\u{7528}\u{3002} \\n"]
    #[doc = "\u{56fe}\u{50cf}\u{6570}\u{636e}\u{91c7}\u{96c6}\u{6709}\u{4e24}\u{79cd}\u{65b9}\u{5f0f}\u{ff0c}\u{4e24}\u{79cd}\u{65b9}\u{5f0f}\u{4e0d}\u{80fd}\u{590d}\u{7528}\u{ff1a}\\n"]
    #[doc = "\u{65b9}\u{5f0f}\u{4e00}\u{ff1a}\u{8c03}\u{7528} MV_CC_RegisterImageCallBackForRGB() \u{8bbe}\u{7f6e}RGB24\u{683c}\u{5f0f}\u{56fe}\u{50cf}\u{6570}\u{636e}\u{56de}\u{8c03}\u{51fd}\u{6570}\u{ff0c}\u{7136}\u{540e}\u{8c03}\u{7528} MV_CC_StartGrabbing() \u{5f00}\u{59cb}\u{91c7}\u{96c6}\u{ff0c}\u{91c7}\u{96c6}\u{7684}\u{56fe}\u{50cf}\u{6570}\u{636e}\u{5728}\u{8bbe}\u{7f6e}\u{7684}\u{56de}\u{8c03}\u{51fd}\u{6570}\u{4e2d}\u{8fd4}\u{56de}\u{3002}\\n"]
    #[doc = "\u{65b9}\u{5f0f}\u{4e8c}\u{ff1a}\u{8c03}\u{7528} MV_CC_StartGrabbing() \u{5f00}\u{59cb}\u{91c7}\u{96c6}\u{ff0c}\u{7136}\u{540e}\u{5728}\u{5e94}\u{7528}\u{5c42}\u{5faa}\u{73af}\u{8c03}\u{7528} MV_CC_GetImageForRGB() \u{83b7}\u{53d6}RGB24\u{683c}\u{5f0f}\u{7684}\u{5e27}\u{6570}\u{636e}\u{ff0c}\u{83b7}\u{53d6}\u{5e27}\u{6570}\u{636e}\u{65f6}\u{4e0a}\u{5c42}\u{5e94}\u{7528}\u{7a0b}\u{5e8f}\u{9700}\u{8981}\u{6839}\u{636e}\u{5e27}\u{7387}\u{63a7}\u{5236}\u{597d}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{7684}\u{9891}\u{7387}\u{3002}\\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{4e0d}\u{652f}\u{6301}CameraLink\u{8bbe}\u{5907}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  register image data callback, RGB"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  cbOutput                    [IN]            Callback function pointer"]
    #[doc = "  @param  pUser                       [IN]            User defined variable"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Before calling this API to set image data callback function, you should call this API MV_CC_CreateHandle() .\\n"]
    #[doc = "There are two image acquisition modes, the two modes cannot be reused: \\n"]
    #[doc = "Mode 1: Call MV_CC_RegisterImageCallBackForRGB() to set RGB24 format image data callback function, and then call MV_CC_StartGrabbing() to start acquisition, the collected image data will be returned in the configured callback function.\\n"]
    #[doc = "Mode 2: Call MV_CC_StartGrabbing() to start acquisition, and the call MV_CC_GetImageForRGB() repeatedly in application layer to get frame data with RGB24 format. When getting frame data, the upper application program should control the frequency of calling this API according to frame rate. \\n"]
    #[doc = "This API is not supported by CameraLink device."]
    pub fn MV_CC_RegisterImageCallBackForRGB(
        handle: *mut ::std::os::raw::c_void,
        cbOutput: ::std::option::Option<
            unsafe extern "C" fn(
                pData: *mut ::std::os::raw::c_uchar,
                pstFrameInfo: *mut MV_FRAME_OUT_INFO_EX,
                pUser: *mut ::std::os::raw::c_void,
            ),
        >,
        pUser: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{6ce8}\u{518c}\u{56fe}\u{50cf}\u{6570}\u{636e}\u{56de}\u{8c03}\u{ff0c}BGR"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  cbOutput                    [IN]            \u{56de}\u{8c03}\u{51fd}\u{6570}\u{6307}\u{9488}"]
    #[doc = "  @param  pUser                       [IN]            \u{7528}\u{6237}\u{81ea}\u{5b9a}\u{4e49}\u{53d8}\u{91cf}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{8bbe}\u{7f6e}\u{56fe}\u{50cf}\u{6570}\u{636e}\u{56de}\u{8c03}\u{51fd}\u{6570}\u{ff0c}\u{5728} MV_CC_CreateHandle() \u{4e4b}\u{540e}\u{5373}\u{53ef}\u{8c03}\u{7528}\u{3002}\\n"]
    #[doc = "\u{56fe}\u{50cf}\u{6570}\u{636e}\u{91c7}\u{96c6}\u{6709}\u{4e24}\u{79cd}\u{65b9}\u{5f0f}\u{ff0c}\u{4e24}\u{79cd}\u{65b9}\u{5f0f}\u{4e0d}\u{80fd}\u{590d}\u{7528}\u{ff1a}\\n"]
    #[doc = "\u{65b9}\u{5f0f}\u{4e00}\u{ff1a}\u{8c03}\u{7528} MV_CC_RegisterImageCallBackForBGR() \u{8bbe}\u{7f6e}BGR24\u{56fe}\u{50cf}\u{6570}\u{636e}\u{56de}\u{8c03}\u{51fd}\u{6570}\u{ff0c}\u{7136}\u{540e}\u{8c03}\u{7528} MV_CC_StartGrabbing() \u{5f00}\u{59cb}\u{91c7}\u{96c6}\u{ff0c}\u{91c7}\u{96c6}\u{7684}\u{56fe}\u{50cf}\u{6570}\u{636e}\u{5728}\u{8bbe}\u{7f6e}\u{7684}\u{56de}\u{8c03}\u{51fd}\u{6570}\u{4e2d}\u{8fd4}\u{56de}\u{3002}\\n"]
    #[doc = "\u{65b9}\u{5f0f}\u{4e8c}\u{ff1a}\u{8c03}\u{7528} MV_CC_StartGrabbing() \u{5f00}\u{59cb}\u{91c7}\u{96c6}\u{ff0c}\u{7136}\u{540e}\u{5728}\u{5e94}\u{7528}\u{5c42}\u{5faa}\u{73af}\u{8c03}\u{7528} MV_CC_GetImageForBGR() \u{83b7}\u{53d6}BGR24\u{683c}\u{5f0f}\u{7684}\u{5e27}\u{6570}\u{636e}\u{ff0c}\u{83b7}\u{53d6}\u{5e27}\u{6570}\u{636e}\u{65f6}\u{4e0a}\u{5c42}\u{5e94}\u{7528}\u{7a0b}\u{5e8f}\u{9700}\u{8981}\u{6839}\u{636e}\u{5e27}\u{7387}\u{63a7}\u{5236}\u{597d}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{7684}\u{9891}\u{7387}\u{3002} \\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{4e0d}\u{652f}\u{6301}CameraLink\u{8bbe}\u{5907}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  register image data callback, BGR"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  cbOutput                    [IN]            Callback function pointer"]
    #[doc = "  @param  pUser                       [IN]            User defined variable"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Before calling this API to set image data callback function, you should call this API MV_CC_CreateHandle() . \\n"]
    #[doc = "There are two image acquisition modes, the two modes cannot be reused: \\n"]
    #[doc = "Mode 1: Call MV_CC_RegisterImageCallBackForBGR() to set RGB24 format image data callback function, and then call MV_CC_StartGrabbing() to start acquisition, the collected image data will be returned in the configured callback function.\\n"]
    #[doc = "Mode 2: Call MV_CC_StartGrabbing() to start acquisition, and the call MV_CC_GetImageForBGR() repeatedly in application layer to get frame data with BGR24 format. When getting frame data, the upper application program should control the frequency of calling this API according to frame rate.\\n"]
    #[doc = "This API is not supported by CameraLink device."]
    pub fn MV_CC_RegisterImageCallBackForBGR(
        handle: *mut ::std::os::raw::c_void,
        cbOutput: ::std::option::Option<
            unsafe extern "C" fn(
                pData: *mut ::std::os::raw::c_uchar,
                pstFrameInfo: *mut MV_FRAME_OUT_INFO_EX,
                pUser: *mut ::std::os::raw::c_void,
            ),
        >,
        pUser: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{5f00}\u{59cb}\u{53d6}\u{6d41}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8be5}\u{63a5}\u{53e3}\u{4e0d}\u{652f}\u{6301}CameraLink\u{8bbe}\u{5907}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Start Grabbing"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks This API is not supported by CameraLink device."]
    pub fn MV_CC_StartGrabbing(handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{505c}\u{6b62}\u{53d6}\u{6d41}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8be5}\u{63a5}\u{53e3}\u{4e0d}\u{652f}\u{6301}CameraLink\u{8bbe}\u{5907}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Stop Grabbing"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks This API is not supported by CameraLink device."]
    pub fn MV_CC_StopGrabbing(handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{4e00}\u{5e27}RGB\u{6570}\u{636e}\u{ff0c}\u{6b64}\u{51fd}\u{6570}\u{4e3a}\u{67e5}\u{8be2}\u{5f0f}\u{83b7}\u{53d6}\u{ff0c}\u{6bcf}\u{6b21}\u{8c03}\u{7528}\u{67e5}\u{8be2}\u{5185}\u{90e8}"]
    #[doc = "\u{7f13}\u{5b58}\u{6709}\u{65e0}\u{6570}\u{636e}\u{ff0c}\u{6709}\u{6570}\u{636e}\u{5219}\u{83b7}\u{53d6}\u{6570}\u{636e}\u{ff0c}\u{65e0}\u{6570}\u{636e}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pData                       [OUT]           \u{56fe}\u{50cf}\u{6570}\u{636e}\u{63a5}\u{6536}\u{6307}\u{9488}"]
    #[doc = "  @param  nDataSize                   [IN]            \u{63a5}\u{6536}\u{7f13}\u{5b58}\u{5927}\u{5c0f}"]
    #[doc = "  @param  pstFrameInfo                  [OUT]           \u{56fe}\u{50cf}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "  @param  nMsec                       [IN]            \u{7b49}\u{5f85}\u{8d85}\u{65f6}\u{65f6}\u{95f4}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{6bcf}\u{6b21}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{ff0c}\u{5c06}\u{67e5}\u{8be2}\u{5185}\u{90e8}\u{7f13}\u{5b58}\u{662f}\u{5426}\u{6709}\u{6570}\u{636e}\u{ff0c}\u{5982}\u{679c}\u{6709}\u{6570}\u{636e}\u{5219}\u{8f6c}\u{6362}\u{6210}RGB24\u{683c}\u{5f0f}\u{8fd4}\u{56de}\u{ff0c}\u{5982}\u{679c}\u{6ca1}\u{6709}\u{6570}\u{636e}\u{5219}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}\u{3002}\u{56e0}\u{4e3a}\u{56fe}\u{50cf}\u{8f6c}\u{6362}\u{6210}RGB24\u{683c}\u{5f0f}\u{6709}\u{8017}\u{65f6}\u{ff0c}\u{6240}\u{4ee5}\u{5f53}\u{6570}\u{636e}\u{5e27}\u{7387}\u{8fc7}\u{9ad8}\u{65f6}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{80fd}\u{4f1a}\u{5bfc}\u{81f4}\u{4e22}\u{5e27}\u{3002}\\n"]
    #[doc = "\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{83b7}\u{53d6}\u{56fe}\u{50cf}\u{6570}\u{636e}\u{5e27}\u{4e4b}\u{524d}\u{9700}\u{8981}\u{5148}\u{8c03}\u{7528} MV_CC_StartGrabbing() \u{542f}\u{52a8}\u{56fe}\u{50cf}\u{91c7}\u{96c6}\u{3002}\u{8be5}\u{63a5}\u{53e3}\u{4e3a}\u{4e3b}\u{52a8}\u{5f0f}\u{83b7}\u{53d6}\u{5e27}\u{6570}\u{636e}\u{ff0c}\u{4e0a}\u{5c42}\u{5e94}\u{7528}\u{7a0b}\u{5e8f}\u{9700}\u{8981}\u{6839}\u{636e}\u{5e27}\u{7387}\u{ff0c}\u{63a7}\u{5236}\u{597d}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{7684}\u{9891}\u{7387}\u{3002} \\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{4e0d}\u{652f}\u{6301}CameraLink\u{8bbe}\u{5907}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Get one frame of RGB data, this function is using query to get data"]
    #[doc = "query whether the internal cache has data, get data if there has, return error code if no data"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  pData                       [OUT]           Image data receiving buffer"]
    #[doc = "  @param  nDataSize                   [IN]            Buffer size"]
    #[doc = "  @param  pstFrameInfo                  [OUT]           Image information structure"]
    #[doc = "  @param  nMsec                       [IN]            Waiting timeout"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Each time the API is called, the internal cache is checked for data. If there is data, it will be transformed as RGB24 format for return, if there is no data, return error code. As time-consuming exists when transform the image to RGB24 format, this API may cause frame loss when the data frame rate is too high. \\n"]
    #[doc = "Before calling this API to get image data frame, call MV_CC_StartGrabbing() to start image acquisition. This API can get frame data actively, the upper layer program should control the frequency of calling this API according to the frame rate. \\n"]
    #[doc = "This API is not supported by CameraLink device."]
    pub fn MV_CC_GetImageForRGB(
        handle: *mut ::std::os::raw::c_void,
        pData: *mut ::std::os::raw::c_uchar,
        nDataSize: ::std::os::raw::c_uint,
        pstFrameInfo: *mut MV_FRAME_OUT_INFO_EX,
        nMsec: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{4e00}\u{5e27}BGR\u{6570}\u{636e}\u{ff0c}\u{6b64}\u{51fd}\u{6570}\u{4e3a}\u{67e5}\u{8be2}\u{5f0f}\u{83b7}\u{53d6}\u{ff0c}\u{6bcf}\u{6b21}\u{8c03}\u{7528}\u{67e5}\u{8be2}\u{5185}\u{90e8}"]
    #[doc = "\u{7f13}\u{5b58}\u{6709}\u{65e0}\u{6570}\u{636e}\u{ff0c}\u{6709}\u{6570}\u{636e}\u{5219}\u{83b7}\u{53d6}\u{6570}\u{636e}\u{ff0c}\u{65e0}\u{6570}\u{636e}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pData                       [OUT]           \u{56fe}\u{50cf}\u{6570}\u{636e}\u{63a5}\u{6536}\u{6307}\u{9488}"]
    #[doc = "  @param  nDataSize                   [IN]            \u{63a5}\u{6536}\u{7f13}\u{5b58}\u{5927}\u{5c0f}"]
    #[doc = "  @param  pstFrameInfo                  [OUT]           \u{56fe}\u{50cf}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "  @param  nMsec                       [IN]            \u{7b49}\u{5f85}\u{8d85}\u{65f6}\u{65f6}\u{95f4}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{6bcf}\u{6b21}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{ff0c}\u{5c06}\u{67e5}\u{8be2}\u{5185}\u{90e8}\u{7f13}\u{5b58}\u{662f}\u{5426}\u{6709}\u{6570}\u{636e}\u{ff0c}\u{5982}\u{679c}\u{6709}\u{6570}\u{636e}\u{5219}\u{8f6c}\u{6362}\u{6210}BGR24\u{683c}\u{5f0f}\u{8fd4}\u{56de}\u{ff0c}\u{5982}\u{679c}\u{6ca1}\u{6709}\u{6570}\u{636e}\u{5219}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}\u{3002}\u{56e0}\u{4e3a}\u{56fe}\u{50cf}\u{8f6c}\u{6362}\u{6210}BGR24\u{683c}\u{5f0f}\u{6709}\u{8017}\u{65f6}\u{ff0c}\u{6240}\u{4ee5}\u{5f53}\u{6570}\u{636e}\u{5e27}\u{7387}\u{8fc7}\u{9ad8}\u{65f6}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{80fd}\u{4f1a}\u{5bfc}\u{81f4}\u{4e22}\u{5e27}\u{3002} \\n"]
    #[doc = "\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{83b7}\u{53d6}\u{56fe}\u{50cf}\u{6570}\u{636e}\u{5e27}\u{4e4b}\u{524d}\u{9700}\u{8981}\u{5148}\u{8c03}\u{7528} MV_CC_StartGrabbing() \u{542f}\u{52a8}\u{56fe}\u{50cf}\u{91c7}\u{96c6}\u{3002}\u{8be5}\u{63a5}\u{53e3}\u{4e3a}\u{4e3b}\u{52a8}\u{5f0f}\u{83b7}\u{53d6}\u{5e27}\u{6570}\u{636e}\u{ff0c}\u{4e0a}\u{5c42}\u{5e94}\u{7528}\u{7a0b}\u{5e8f}\u{9700}\u{8981}\u{6839}\u{636e}\u{5e27}\u{7387}\u{ff0c}\u{63a7}\u{5236}\u{597d}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{7684}\u{9891}\u{7387}\u{3002}\\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{4e0d}\u{652f}\u{6301}CameraLink\u{8bbe}\u{5907}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Get one frame of BGR data, this function is using query to get data"]
    #[doc = "query whether the internal cache has data, get data if there has, return error code if no data"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  pData                       [OUT]           Image data receiving buffer"]
    #[doc = "  @param  nDataSize                   [IN]            Buffer size"]
    #[doc = "  @param  pstFrameInfo                  [OUT]           Image information structure"]
    #[doc = "  @param  nMsec                       [IN]            Waiting timeout"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Before calling this API to set image data callback function, you should call this API MV_CC_CreateHandle() . \\n"]
    #[doc = "There are two image acquisition modes, the two modes cannot be reused: \\n"]
    #[doc = "Mode 1: Call MV_CC_RegisterImageCallBackForBGR() to set RGB24 format image data callback function, and then call MV_CC_StartGrabbing() to start acquisition, the collected image data will be returned in the configured callback function.\\n"]
    #[doc = "Mode 2: Call MV_CC_StartGrabbing() to start acquisition, and the call MV_CC_GetImageForBGR() repeatedly in application layer to get frame data with BGR24 format. When getting frame data, the upper application program should control the frequency of calling this API according to frame rate. \\n"]
    #[doc = "This API is not supported by CameraLink device."]
    pub fn MV_CC_GetImageForBGR(
        handle: *mut ::std::os::raw::c_void,
        pData: *mut ::std::os::raw::c_uchar,
        nDataSize: ::std::os::raw::c_uint,
        pstFrameInfo: *mut MV_FRAME_OUT_INFO_EX,
        nMsec: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{4f7f}\u{7528}\u{5185}\u{90e8}\u{7f13}\u{5b58}\u{83b7}\u{53d6}\u{4e00}\u{5e27}\u{56fe}\u{7247}\u{ff08}\u{4e0e} MV_CC_Display() \u{4e0d}\u{80fd}\u{540c}\u{65f6}\u{4f7f}\u{7528}\u{ff09}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pstFrame                      [OUT]           \u{56fe}\u{50cf}\u{6570}\u{636e}\u{548c}\u{56fe}\u{50cf}\u{4fe1}\u{606f}"]
    #[doc = "  @param  nMsec                       [IN]            \u{7b49}\u{5f85}\u{8d85}\u{65f6}\u{65f6}\u{95f4}\u{ff0c}\u{8f93}\u{5165}INFINITE\u{65f6}\u{8868}\u{793a}\u{65e0}\u{9650}\u{7b49}\u{5f85}\u{ff0c}\u{76f4}\u{5230}\u{6536}\u{5230}\u{4e00}\u{5e27}\u{6570}\u{636e}\u{6216}\u{8005}\u{505c}\u{6b62}\u{53d6}\u{6d41}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{83b7}\u{53d6}\u{56fe}\u{50cf}\u{6570}\u{636e}\u{5e27}\u{4e4b}\u{524d}\u{9700}\u{8981}\u{5148}\u{8c03}\u{7528} MV_CC_StartGrabbing() \u{542f}\u{52a8}\u{56fe}\u{50cf}\u{91c7}\u{96c6}\u{3002}\u{8be5}\u{63a5}\u{53e3}\u{4e3a}\u{4e3b}\u{52a8}\u{5f0f}\u{83b7}\u{53d6}\u{5e27}\u{6570}\u{636e}\u{ff0c}\u{4e0a}\u{5c42}\u{5e94}\u{7528}\u{7a0b}\u{5e8f}\u{9700}\u{8981}\u{6839}\u{636e}\u{5e27}\u{7387}\u{ff0c}\u{63a7}\u{5236}\u{597d}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{7684}\u{9891}\u{7387}\u{3002}\u{8be5}\u{63a5}\u{53e3}\u{652f}\u{6301}\u{8bbe}\u{7f6e}\u{8d85}\u{65f6}\u{65f6}\u{95f4}\u{ff0c}SDK\u{5185}\u{90e8}\u{7b49}\u{5f85}\u{76f4}\u{5230}\u{6709}\u{6570}\u{636e}\u{65f6}\u{8fd4}\u{56de}\u{ff0c}\u{53ef}\u{4ee5}\u{589e}\u{52a0}\u{53d6}\u{6d41}\u{5e73}\u{7a33}\u{6027}\u{ff0c}\u{9002}\u{5408}\u{7528}\u{4e8e}\u{5bf9}\u{5e73}\u{7a33}\u{6027}\u{8981}\u{6c42}\u{8f83}\u{9ad8}\u{7684}\u{573a}\u{5408}\u{3002} \\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{4e0e} MV_CC_FreeImageBuffer() \u{914d}\u{5957}\u{4f7f}\u{7528}\u{ff0c}\u{5f53}\u{5904}\u{7406}\u{5b8c}\u{53d6}\u{5230}\u{7684}\u{6570}\u{636e}\u{540e}\u{ff0c}\u{9700}\u{8981}\u{7528} MV_CC_FreeImageBuffer() \u{63a5}\u{53e3}\u{5c06}pstFrame\u{5185}\u{7684}\u{6570}\u{636e}\u{6307}\u{9488}\u{6743}\u{9650}\u{8fdb}\u{884c}\u{91ca}\u{653e}\u{3002} \\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{4e0e} MV_CC_GetOneFrameTimeout() \u{76f8}\u{6bd4}\u{ff0c}\u{6709}\u{7740}\u{66f4}\u{9ad8}\u{7684}\u{6548}\u{7387}\u{3002}\u{4e14}\u{5176}\u{53d6}\u{6d41}\u{7f13}\u{5b58}\u{7684}\u{5206}\u{914d}\u{662f}\u{7531}sdk\u{5185}\u{90e8}\u{81ea}\u{52a8}\u{5206}\u{914d}\u{7684}\u{ff0c}\u{800c} MV_CC_GetOneFrameTimeout() \u{63a5}\u{53e3}\u{662f}\u{9700}\u{8981}\u{5ba2}\u{6237}\u{81ea}\u{884c}\u{5206}\u{914d}\u{3002}\\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{5728}\u{8c03}\u{7528} MV_CC_Display() \u{540e}\u{65e0}\u{6cd5}\u{53d6}\u{6d41}\u{3002} \\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{5bf9}\u{4e8e}U3V\u{3001}GIGE\u{8bbe}\u{5907}\u{5747}\u{53ef}\u{652f}\u{6301}\u{3002} \\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{4e0d}\u{652f}\u{6301}CameraLink\u{8bbe}\u{5907}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Get a frame of an image using an internal cache"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  pstFrame                      [OUT]           Image data and image information"]
    #[doc = "  @param  nMsec                       [IN]            Waiting timeout"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Before calling this API to get image data frame, you should call MV_CC_StartGrabbing() to start image acquisition. This API can get frame data actively, the upper layer program should control the frequency of calling this API according to the frame rate. This API supports setting timeout, and SDK will wait to return until data appears. This function will increase the streaming stability, which can be used in the situation with high stability requirement. \\n"]
    #[doc = "This API and MV_CC_FreeImageBuffer() should be called in pairs, after processing the acquired data, you should call MV_CC_FreeImageBuffer() to release the data pointer permission of pstFrame. \\n"]
    #[doc = "This interface is more efficient than MV_CC_GetOneFrameTimeout() . The allocation of the stream cache is automatically allocated within the SDK.The MV_CC_GetOneFrameTimeout() interface needs to be allocated by customers themselves. \\n"]
    #[doc = "This API cannot be called to stream after calling MV_CC_Display() . \\n"]
    #[doc = "This API is not supported by CameraLink device. \\n"]
    #[doc = "This API is supported by both USB3 vision camera and GigE camera. \\n"]
    pub fn MV_CC_GetImageBuffer(
        handle: *mut ::std::os::raw::c_void,
        pstFrame: *mut MV_FRAME_OUT,
        nMsec: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{91ca}\u{653e}\u{56fe}\u{50cf}\u{7f13}\u{5b58}(\u{6b64}\u{63a5}\u{53e3}\u{7528}\u{4e8e}\u{91ca}\u{653e}\u{4e0d}\u{518d}\u{4f7f}\u{7528}\u{7684}\u{56fe}\u{50cf}\u{7f13}\u{5b58}\u{ff0c}\u{4e0e} MV_CC_GetImageBuffer() \u{914d}\u{5957}\u{4f7f}\u{7528})"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pstFrame                      [IN]            \u{56fe}\u{50cf}\u{6570}\u{636e}\u{548c}\u{56fe}\u{50cf}\u{6570}\u{636e}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8be5}\u{63a5}\u{53e3}\u{4e0e} MV_CC_GetImageBuffer() \u{914d}\u{5957}\u{4f7f}\u{7528}\u{ff0c}\u{4f7f}\u{7528} MV_CC_GetImageBuffer() \u{63a5}\u{53e3}\u{53d6}\u{5230}\u{7684}\u{56fe}\u{50cf}\u{6570}\u{636e}pstFrame\u{ff0c}\u{9700}\u{8981}\u{7528} MV_CC_FreeImageBuffer() \u{63a5}\u{53e3}\u{8fdb}\u{884c}\u{6743}\u{9650}\u{91ca}\u{653e}\u{3002} \\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{5bf9}\u{4e8e}\u{53d6}\u{6d41}\u{6548}\u{7387}\u{9ad8}\u{4e8e}GetOneFrameTimeout\u{63a5}\u{53e3}\u{ff0c}\u{4e14}GetImageBuffer\u{5728}\u{4e0d}\u{8fdb}\u{884c}Free\u{7684}\u{60c5}\u{51b5}\u{4e0b}\u{ff0c}\u{6700}\u{5927}\u{652f}\u{6301}\u{8f93}\u{51fa}\u{7684}\u{8282}\u{70b9}\u{6570}\u{4e0e}SetImageNode\u{63a5}\u{53e3}\u{6240}\u{8bbe}\u{7f6e}\u{7684}\u{8282}\u{70b9}\u{6570}\u{76f8}\u{7b49}\u{ff0c}\u{9ed8}\u{8ba4}\u{8282}\u{70b9}\u{6570}\u{662f}1\u{3002}\\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{5bf9}\u{4e8e}U3V\u{3001}GIGE\u{8bbe}\u{5907}\u{5747}\u{53ef}\u{652f}\u{6301}\u{3002} \\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{4e0d}\u{652f}\u{6301}CameraLink\u{8bbe}\u{5907}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Free image buffer(this interface can free image buffer, used with MV_CC_GetImageBuffer() )"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  pstFrame                      [IN]            Image data and image information"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks This API and MV_CC_GetImageBuffer() should be called in pairs, before calling MV_CC_GetImageBuffer() to get image data pstFrame, you should call MV_CC_FreeImageBuffer() to release the permission. \\n"]
    #[doc = "Compared with API MV_CC_GetOneFrameTimeout() , this API has higher efficiency of image acquisition. The max. number of nodes can be outputted is same as the \"nNum\" of API MV_CC_SetImageNodeNum() , default value is 1. \\n"]
    #[doc = "This API is not supported by CameraLink device. \\n"]
    #[doc = "This API is supported by both USB3 vision camera and GigE camera."]
    pub fn MV_CC_FreeImageBuffer(
        handle: *mut ::std::os::raw::c_void,
        pstFrame: *mut MV_FRAME_OUT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{91c7}\u{7528}\u{8d85}\u{65f6}\u{673a}\u{5236}\u{83b7}\u{53d6}\u{4e00}\u{5e27}\u{56fe}\u{7247}\u{ff0c}SDK\u{5185}\u{90e8}\u{7b49}\u{5f85}\u{76f4}\u{5230}\u{6709}\u{6570}\u{636e}\u{65f6}\u{8fd4}\u{56de}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pData                       [OUT]           \u{56fe}\u{50cf}\u{6570}\u{636e}\u{63a5}\u{6536}\u{6307}\u{9488}"]
    #[doc = "  @param  nDataSize                   [IN]            \u{63a5}\u{6536}\u{7f13}\u{5b58}\u{5927}\u{5c0f}"]
    #[doc = "  @param  pstFrameInfo                  [OUT]           \u{56fe}\u{50cf}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "  @param  nMsec                       [IN]            \u{7b49}\u{5f85}\u{8d85}\u{65f6}\u{65f6}\u{95f4}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{83b7}\u{53d6}\u{56fe}\u{50cf}\u{6570}\u{636e}\u{5e27}\u{4e4b}\u{524d}\u{9700}\u{8981}\u{5148}\u{8c03}\u{7528} MV_CC_StartGrabbing() \u{542f}\u{52a8}\u{56fe}\u{50cf}\u{91c7}\u{96c6}\u{3002}\u{8be5}\u{63a5}\u{53e3}\u{4e3a}\u{4e3b}\u{52a8}\u{5f0f}\u{83b7}\u{53d6}\u{5e27}\u{6570}\u{636e}\u{ff0c}\u{4e0a}\u{5c42}\u{5e94}\u{7528}\u{7a0b}\u{5e8f}\u{9700}\u{8981}\u{6839}\u{636e}\u{5e27}\u{7387}\u{ff0c}\u{63a7}\u{5236}\u{597d}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{7684}\u{9891}\u{7387}\u{3002}\u{8be5}\u{63a5}\u{53e3}\u{652f}\u{6301}\u{8bbe}\u{7f6e}\u{8d85}\u{65f6}\u{65f6}\u{95f4}\u{ff0c}SDK\u{5185}\u{90e8}\u{7b49}\u{5f85}\u{76f4}\u{5230}\u{6709}\u{6570}\u{636e}\u{65f6}\u{8fd4}\u{56de}\u{ff0c}\u{53ef}\u{4ee5}\u{589e}\u{52a0}\u{53d6}\u{6d41}\u{5e73}\u{7a33}\u{6027}\u{ff0c}\u{9002}\u{5408}\u{7528}\u{4e8e}\u{5bf9}\u{5e73}\u{7a33}\u{6027}\u{8981}\u{6c42}\u{8f83}\u{9ad8}\u{7684}\u{573a}\u{5408}\u{3002}\\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{5bf9}\u{4e8e}U3V\u{3001}GIGE\u{8bbe}\u{5907}\u{5747}\u{53ef}\u{652f}\u{6301}\u{3002}\\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{4e0d}\u{652f}\u{6301}CameraLink\u{8bbe}\u{5907}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Timeout mechanism is used to get image, and the SDK waits inside until the data is returned"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  pData                       [OUT]           Image data receiving buffer"]
    #[doc = "  @param  nDataSize                   [IN]            Buffer size"]
    #[doc = "  @param  pstFrameInfo                  [OUT]           Image information structure"]
    #[doc = "  @param  nMsec                       [IN]            Waiting timeout"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Before calling this API to get image data frame, call MV_CC_StartGrabbing() to start image acquisition. This API can get frame data actively, the upper layer program should control the frequency of calling this API according to the frame rate. This API supports setting timeout, SDK will wait to return until data appears. This function will increase the streaming stability, which can be used in the situation with high stability requirement. \\n"]
    #[doc = "Both the USB3Vision and GIGE camera can support this API. \\n"]
    #[doc = "This API is not supported by CameraLink device."]
    pub fn MV_CC_GetOneFrameTimeout(
        handle: *mut ::std::os::raw::c_void,
        pData: *mut ::std::os::raw::c_uchar,
        nDataSize: ::std::os::raw::c_uint,
        pstFrameInfo: *mut MV_FRAME_OUT_INFO_EX,
        nMsec: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{663e}\u{793a}\u{4e00}\u{5e27}\u{56fe}\u{50cf}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pstDisplayInfo                [IN]            \u{56fe}\u{50cf}\u{4fe1}\u{606f}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8be5}\u{63a5}\u{53e3}\u{5bf9}\u{4e8e}U3V\u{3001}GIGE\u{8bbe}\u{5907}\u{5747}\u{53ef}\u{652f}\u{6301}\u{3002}\\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{4e0d}\u{652f}\u{6301}CameraLink\u{8bbe}\u{5907}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Display one frame image"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  pstDisplayInfo                [IN]            Frame Info"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks This API is valid for USB3Vision camera and GIGE camera. \\n"]
    #[doc = "This API is not supported by CameraLink device."]
    pub fn MV_CC_DisplayOneFrame(
        handle: *mut ::std::os::raw::c_void,
        pstDisplayInfo: *mut MV_DISPLAY_FRAME_INFO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}SDK\u{5185}\u{90e8}\u{56fe}\u{50cf}\u{7f13}\u{5b58}\u{8282}\u{70b9}\u{4e2a}\u{6570}\u{ff0c}\u{5927}\u{4e8e}\u{7b49}\u{4e8e}1\u{ff0c}\u{5728}\u{6293}\u{56fe}\u{524d}\u{8c03}\u{7528}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  nNum                        [IN]            \u{7f13}\u{5b58}\u{8282}\u{70b9}\u{4e2a}\u{6570}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{8bbe}\u{7f6e}SDK\u{5185}\u{90e8}\u{56fe}\u{50cf}\u{7f13}\u{5b58}\u{8282}\u{70b9}\u{4e2a}\u{6570}\u{ff0c}\u{5728}\u{8c03}\u{7528} MV_CC_StartGrabbing() \u{5f00}\u{59cb}\u{6293}\u{56fe}\u{524d}\u{8c03}\u{7528}\u{3002}\\n"]
    #[doc = "\u{5728}SDK\u{4e2d}\u{9ed8}\u{8ba4}\u{662f}1\u{4e2a}\u{8282}\u{70b9}\u{3002}\\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{4e0d}\u{652f}\u{6301}CameraLink\u{8bbe}\u{5907}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Set the number of the internal image cache nodes in SDK, Greater than or equal to 1, to be called before the capture"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  nNum                        [IN]            Image Node Number"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Call this interface to set the number of SDK internal image buffer nodes. The interface should be called before calling MV_CC_StartGrabbing() for capturing. \\n"]
    #[doc = "This API is not supported by CameraLink device."]
    pub fn MV_CC_SetImageNodeNum(
        handle: *mut ::std::os::raw::c_void,
        nNum: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{8bbe}\u{5907}\u{4fe1}\u{606f}\u{ff0c}\u{53d6}\u{6d41}\u{4e4b}\u{524d}\u{8c03}\u{7528}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pstDevInfo                  [IN][OUT]       \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{8bbe}\u{5907}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{652f}\u{6301}\u{7528}\u{6237}\u{5728}\u{6253}\u{5f00}\u{8bbe}\u{5907}\u{540e}\u{83b7}\u{53d6}\u{8bbe}\u{5907}\u{4fe1}\u{606f}\u{3002}\\n"]
    #[doc = "\u{82e5}\u{8be5}\u{8bbe}\u{5907}\u{662f}GigE\u{8bbe}\u{5907}\u{ff0c}\u{5219}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{5b58}\u{5728}\u{963b}\u{585e}\u{98ce}\u{9669}\u{ff0c}\u{56e0}\u{6b64}\u{4e0d}\u{5efa}\u{8bae}\u{5728}\u{53d6}\u{6d41}\u{8fc7}\u{7a0b}\u{4e2d}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Get device information"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  pstDevInfo                  [IN][OUT]       Structure pointer of device information"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks The API support users to access device information after opening the device. \\n"]
    #[doc = "If the device is a GigE camera, there is a blocking risk in calling the interface, so it is not recommended to call the interface during the fetching process."]
    pub fn MV_CC_GetDeviceInfo(
        handle: *mut ::std::os::raw::c_void,
        pstDevInfo: *mut MV_CC_DEVICE_INFO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{5404}\u{79cd}\u{7c7b}\u{578b}\u{7684}\u{4fe1}\u{606f}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pstInfo                     [IN][OUT]       \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{8bbe}\u{5907}\u{5404}\u{79cd}\u{7c7b}\u{578b}\u{7684}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{63a5}\u{53e3}\u{91cc}\u{9762}\u{8f93}\u{5165}\u{9700}\u{8981}\u{83b7}\u{53d6}\u{7684}\u{4fe1}\u{606f}\u{7c7b}\u{578b}\u{ff08}\u{6307}\u{5b9a}MV_ALL_MATCH_INFO\u{7ed3}\u{6784}\u{4f53}\u{4e2d}\u{7684}nType\u{7c7b}\u{578b}\u{ff09}\u{ff0c}\u{83b7}\u{53d6}\u{5bf9}\u{5e94}\u{7684}\u{4fe1}\u{606f}\u{ff08}\u{5728}MV_ALL_MATCH_INFO\u{7ed3}\u{6784}\u{4f53}\u{4e2d}pInfo\u{91cc}\u{8fd4}\u{56de}\u{ff09}\u{3002} \\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{7684}\u{8c03}\u{7528}\u{524d}\u{7f6e}\u{6761}\u{4ef6}\u{53d6}\u{51b3}\u{4e8e}\u{6240}\u{83b7}\u{53d6}\u{7684}\u{4fe1}\u{606f}\u{7c7b}\u{578b}\u{ff0c}\u{83b7}\u{53d6}GigE\u{8bbe}\u{5907}\u{7684}MV_MATCH_TYPE_NET_DETECT\u{4fe1}\u{606f}\u{9700}\u{5728}\u{5f00}\u{542f}\u{6293}\u{56fe}\u{4e4b}\u{540e}\u{8c03}\u{7528}\u{ff0c}\u{83b7}\u{53d6}U3V\u{8bbe}\u{5907}\u{7684}MV_MATCH_TYPE_USB_DETECT\u{4fe1}\u{606f}\u{9700}\u{5728}\u{6253}\u{5f00}\u{8bbe}\u{5907}\u{4e4b}\u{540e}\u{8c03}\u{7528}\u{3002} \\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{4e0d}\u{652f}\u{6301}CameraLink\u{8bbe}\u{5907}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Get various type of information"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  pstInfo                     [IN][OUT]       Structure pointer of various type of information"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Input required information type (specify nType in structure MV_ALL_MATCH_INFO) in the interface and get corresponding information (return in pInfo of structure MV_ALL_MATCH_INFO). \\n"]
    #[doc = "The calling precondition of this interface is determined by obtained information type. Call after enabling capture to get MV_MATCH_TYPE_NET_DETECT information of GigE device, and call after starting device to get MV_MATCH_TYPE_USB_DETECT information of USB3Vision device. \\n"]
    #[doc = "This API is not supported by CameraLink device."]
    pub fn MV_CC_GetAllMatchInfo(
        handle: *mut ::std::os::raw::c_void,
        pstInfo: *mut MV_ALL_MATCH_INFO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{83b7}\u{53d6}Integer\u{5c5e}\u{6027}\u{503c}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  strKey                      [IN]            \u{5c5e}\u{6027}\u{952e}\u{503c}\u{ff0c}\u{5982}\u{83b7}\u{53d6}\u{5bbd}\u{5ea6}\u{4fe1}\u{606f}\u{5219}\u{4e3a}\"Width\""]
    #[doc = "  @param  pstIntValue                 [IN][OUT]       \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{8bbe}\u{5907}\u{5c5e}\u{6027}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8fde}\u{63a5}\u{8bbe}\u{5907}\u{4e4b}\u{540e}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{83b7}\u{53d6}int\u{7c7b}\u{578b}\u{7684}\u{6307}\u{5b9a}\u{8282}\u{70b9}\u{7684}\u{503c}\u{3002}strKey\u{53d6}\u{503c}\u{53ef}\u{4ee5}\u{53c2}\u{8003}XML\u{8282}\u{70b9}\u{53c2}\u{6570}\u{7c7b}\u{578b}\u{5217}\u{8868}\u{ff0c}\u{8868}\u{683c}\u{91cc}\u{9762}\u{6570}\u{636e}\u{7c7b}\u{578b}\u{4e3a}\u{201c}IInteger\u{201d}\u{7684}\u{8282}\u{70b9}\u{503c}\u{90fd}\u{53ef}\u{4ee5}\u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{83b7}\u{53d6}\u{ff0c}strKey\u{53c2}\u{6570}\u{53d6}\u{503c}\u{5bf9}\u{5e94}\u{5217}\u{8868}\u{91cc}\u{9762}\u{7684}\u{201c}\u{540d}\u{79f0}\u{201d}\u{4e00}\u{5217}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Get Integer value"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  strKey                      [IN]            Key value, for example, using \"Width\" to get width"]
    #[doc = "  @param  pstIntValue                    [IN][OUT]       Structure pointer of camera features"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks You can call this API to get the value of camera node with integer type after connecting the device. For strKey value, refer to MvCameraNode. All the node values of \"IInteger\" in the list can be obtained via this API. strKey corresponds to the Name column."]
    pub fn MV_CC_GetIntValueEx(
        handle: *mut ::std::os::raw::c_void,
        strKey: *const ::std::os::raw::c_char,
        pstIntValue: *mut MVCC_INTVALUE_EX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}Integer\u{578b}\u{5c5e}\u{6027}\u{503c}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  strKey                      [IN]            \u{5c5e}\u{6027}\u{952e}\u{503c}\u{ff0c}\u{5982}\u{83b7}\u{53d6}\u{5bbd}\u{5ea6}\u{4fe1}\u{606f}\u{5219}\u{4e3a}\"Width\""]
    #[doc = "  @param  nValue                      [IN]            \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{8bbe}\u{5907}\u{7684}\u{5c5e}\u{6027}\u{503c}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8fde}\u{63a5}\u{8bbe}\u{5907}\u{4e4b}\u{540e}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{8bbe}\u{7f6e}int\u{7c7b}\u{578b}\u{7684}\u{6307}\u{5b9a}\u{8282}\u{70b9}\u{7684}\u{503c}\u{3002}strKey\u{53d6}\u{503c}\u{53ef}\u{4ee5}\u{53c2}\u{8003}XML\u{8282}\u{70b9}\u{53c2}\u{6570}\u{7c7b}\u{578b}\u{5217}\u{8868}\u{ff0c}\u{8868}\u{683c}\u{91cc}\u{9762}\u{6570}\u{636e}\u{7c7b}\u{578b}\u{4e3a}\u{201c}IInteger\u{201d}\u{7684}\u{8282}\u{70b9}\u{503c}\u{90fd}\u{53ef}\u{4ee5}\u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{8bbe}\u{7f6e}\u{ff0c}strKey\u{53c2}\u{6570}\u{53d6}\u{503c}\u{5bf9}\u{5e94}\u{5217}\u{8868}\u{91cc}\u{9762}\u{7684}\u{201c}\u{540d}\u{79f0}\u{201d}\u{4e00}\u{5217}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Set Integer value"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  strKey                      [IN]            Key value, for example, using \"Width\" to set width"]
    #[doc = "  @param  nValue                      [IN]            Feature value to set"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks You can call this API to get the value of camera node with integer type after connecting the device. For strKey value, refer to MvCameraNode. All the node values of \"IInteger\" in the list can be obtained via this API. strKey corresponds to the Name column."]
    pub fn MV_CC_SetIntValueEx(
        handle: *mut ::std::os::raw::c_void,
        strKey: *const ::std::os::raw::c_char,
        nValue: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{83b7}\u{53d6}Enum\u{5c5e}\u{6027}\u{503c}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  strKey                      [IN]            \u{5c5e}\u{6027}\u{952e}\u{503c}\u{ff0c}\u{5982}\u{83b7}\u{53d6}\u{50cf}\u{7d20}\u{683c}\u{5f0f}\u{4fe1}\u{606f}\u{5219}\u{4e3a}\"PixelFormat\""]
    #[doc = "  @param  pstEnumValue                  [IN][OUT]       \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{8bbe}\u{5907}\u{5c5e}\u{6027}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8fde}\u{63a5}\u{8bbe}\u{5907}\u{4e4b}\u{540e}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{83b7}\u{53d6}Enum\u{7c7b}\u{578b}\u{7684}\u{6307}\u{5b9a}\u{8282}\u{70b9}\u{7684}\u{503c}\u{3002}strKey\u{53d6}\u{503c}\u{53ef}\u{4ee5}\u{53c2}\u{8003}XML\u{8282}\u{70b9}\u{53c2}\u{6570}\u{7c7b}\u{578b}\u{5217}\u{8868}\u{ff0c}\u{8868}\u{683c}\u{91cc}\u{9762}\u{6570}\u{636e}\u{7c7b}\u{578b}\u{4e3a}\u{201c}IEnumeration\u{201d}\u{7684}\u{8282}\u{70b9}\u{503c}\u{90fd}\u{53ef}\u{4ee5}\u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{83b7}\u{53d6}\u{ff0c}strKey\u{53c2}\u{6570}\u{53d6}\u{503c}\u{5bf9}\u{5e94}\u{5217}\u{8868}\u{91cc}\u{9762}\u{7684}\u{201c}\u{540d}\u{79f0}\u{201d}\u{4e00}\u{5217}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Get Enum value"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  strKey                      [IN]            Key value, for example, using \"PixelFormat\" to get pixel format"]
    #[doc = "  @param  pstEnumValue                  [IN][OUT]       Structure pointer of camera features"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks After the device is connected, call this interface to get specified Enum nodes. For value of strKey, see MvCameraNode, The node values of IEnumeration can be obtained through this interface, strKey value corresponds to the Name column."]
    pub fn MV_CC_GetEnumValue(
        handle: *mut ::std::os::raw::c_void,
        strKey: *const ::std::os::raw::c_char,
        pstEnumValue: *mut MVCC_ENUMVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}Enum\u{578b}\u{5c5e}\u{6027}\u{503c}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  strKey                      [IN]            \u{5c5e}\u{6027}\u{952e}\u{503c}\u{ff0c}\u{5982}\u{83b7}\u{53d6}\u{50cf}\u{7d20}\u{683c}\u{5f0f}\u{4fe1}\u{606f}\u{5219}\u{4e3a}\"PixelFormat\""]
    #[doc = "  @param  nValue                      [IN]            \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{8bbe}\u{5907}\u{7684}\u{5c5e}\u{6027}\u{503c}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8fde}\u{63a5}\u{8bbe}\u{5907}\u{4e4b}\u{540e}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{8bbe}\u{7f6e}Enum\u{7c7b}\u{578b}\u{7684}\u{6307}\u{5b9a}\u{8282}\u{70b9}\u{7684}\u{503c}\u{3002}strKey\u{53d6}\u{503c}\u{53ef}\u{4ee5}\u{53c2}\u{8003}XML\u{8282}\u{70b9}\u{53c2}\u{6570}\u{7c7b}\u{578b}\u{5217}\u{8868}\u{ff0c}\u{8868}\u{683c}\u{91cc}\u{9762}\u{6570}\u{636e}\u{7c7b}\u{578b}\u{4e3a}\u{201c}IEnumeration\u{201d}\u{7684}\u{8282}\u{70b9}\u{503c}\u{90fd}\u{53ef}\u{4ee5}\u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{8bbe}\u{7f6e}\u{ff0c}strKey\u{53c2}\u{6570}\u{53d6}\u{503c}\u{5bf9}\u{5e94}\u{5217}\u{8868}\u{91cc}\u{9762}\u{7684}\u{201c}\u{540d}\u{79f0}\u{201d}\u{4e00}\u{5217}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Set Enum value"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  strKey                      [IN]            Key value, for example, using \"PixelFormat\" to set pixel format"]
    #[doc = "  @param  nValue                      [IN]            Feature value to set"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks After the device is connected, call this interface to get specified Enum nodes. For value of strKey, see MvCameraNode, The node values of IEnumeration can be obtained through this interface, strKey value corresponds to the Name column."]
    pub fn MV_CC_SetEnumValue(
        handle: *mut ::std::os::raw::c_void,
        strKey: *const ::std::os::raw::c_char,
        nValue: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}Enum\u{578b}\u{5c5e}\u{6027}\u{503c}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  strKey                      [IN]            \u{5c5e}\u{6027}\u{952e}\u{503c}\u{ff0c}\u{5982}\u{83b7}\u{53d6}\u{50cf}\u{7d20}\u{683c}\u{5f0f}\u{4fe1}\u{606f}\u{5219}\u{4e3a}\"PixelFormat\""]
    #[doc = "  @param  strValue                      [IN]            \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{8bbe}\u{5907}\u{7684}\u{5c5e}\u{6027}\u{5b57}\u{7b26}\u{4e32}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8fde}\u{63a5}\u{8bbe}\u{5907}\u{4e4b}\u{540e}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{8bbe}\u{7f6e}Enum\u{7c7b}\u{578b}\u{7684}\u{6307}\u{5b9a}\u{8282}\u{70b9}\u{7684}\u{503c}\u{3002}strKey\u{53d6}\u{503c}\u{53ef}\u{4ee5}\u{53c2}\u{8003}XML\u{8282}\u{70b9}\u{53c2}\u{6570}\u{7c7b}\u{578b}\u{5217}\u{8868}\u{ff0c}\u{8868}\u{683c}\u{91cc}\u{9762}\u{6570}\u{636e}\u{7c7b}\u{578b}\u{4e3a}\u{201c}IEnumeration\u{201d}\u{7684}\u{8282}\u{70b9}\u{503c}\u{90fd}\u{53ef}\u{4ee5}\u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{8bbe}\u{7f6e}\u{ff0c}strKey\u{53c2}\u{6570}\u{53d6}\u{503c}\u{5bf9}\u{5e94}\u{5217}\u{8868}\u{91cc}\u{9762}\u{7684}\u{201c}\u{540d}\u{79f0}\u{201d}\u{4e00}\u{5217}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Set Enum value"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  strKey                      [IN]            Key value, for example, using \"PixelFormat\" to set pixel format"]
    #[doc = "  @param  strValue                      [IN]            Feature String to set"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Call this API after connecting the device. All the values of nodes with IEnumeration type can be set via this API."]
    pub fn MV_CC_SetEnumValueByString(
        handle: *mut ::std::os::raw::c_void,
        strKey: *const ::std::os::raw::c_char,
        strValue: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{83b7}\u{53d6}Float\u{5c5e}\u{6027}\u{503c}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  strKey                      [IN]            \u{5c5e}\u{6027}\u{952e}\u{503c}"]
    #[doc = "  @param  pstFloatValue                 [IN][OUT]       \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{8bbe}\u{5907}\u{5c5e}\u{6027}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8fde}\u{63a5}\u{8bbe}\u{5907}\u{4e4b}\u{540e}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{83b7}\u{53d6}float\u{7c7b}\u{578b}\u{7684}\u{6307}\u{5b9a}\u{8282}\u{70b9}\u{7684}\u{503c}\u{3002}strKey\u{53d6}\u{503c}\u{53ef}\u{4ee5}\u{53c2}\u{8003}XML\u{8282}\u{70b9}\u{53c2}\u{6570}\u{7c7b}\u{578b}\u{5217}\u{8868}\u{ff0c}\u{8868}\u{683c}\u{91cc}\u{9762}\u{6570}\u{636e}\u{7c7b}\u{578b}\u{4e3a}\u{201c}IFloat\u{201d}\u{7684}\u{8282}\u{70b9}\u{503c}\u{90fd}\u{53ef}\u{4ee5}\u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{83b7}\u{53d6}\u{ff0c}strKey\u{53c2}\u{6570}\u{53d6}\u{503c}\u{5bf9}\u{5e94}\u{5217}\u{8868}\u{91cc}\u{9762}\u{7684}\u{201c}\u{540d}\u{79f0}\u{201d}\u{4e00}\u{5217}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Get Float value"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  strKey                      [IN]            Key value"]
    #[doc = "  @param  pstFloatValue                 [IN][OUT]       Structure pointer of camera features"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks After the device is connected, call this interface to get specified float node. For detailed strKey value see: MvCameraNode. The node values of IFloat can be obtained through this interface, strKey value corresponds to the Name column."]
    pub fn MV_CC_GetFloatValue(
        handle: *mut ::std::os::raw::c_void,
        strKey: *const ::std::os::raw::c_char,
        pstFloatValue: *mut MVCC_FLOATVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}float\u{578b}\u{5c5e}\u{6027}\u{503c}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  strKey                      [IN]            \u{5c5e}\u{6027}\u{952e}\u{503c}"]
    #[doc = "  @param  fValue                      [IN]            \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{8bbe}\u{5907}\u{7684}\u{5c5e}\u{6027}\u{503c}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8fde}\u{63a5}\u{8bbe}\u{5907}\u{4e4b}\u{540e}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{8bbe}\u{7f6e}float\u{7c7b}\u{578b}\u{7684}\u{6307}\u{5b9a}\u{8282}\u{70b9}\u{7684}\u{503c}\u{3002}strKey\u{53d6}\u{503c}\u{53ef}\u{4ee5}\u{53c2}\u{8003}XML\u{8282}\u{70b9}\u{53c2}\u{6570}\u{7c7b}\u{578b}\u{5217}\u{8868}\u{ff0c}\u{8868}\u{683c}\u{91cc}\u{9762}\u{6570}\u{636e}\u{7c7b}\u{578b}\u{4e3a}\u{201c}IFloat\u{201d}\u{7684}\u{8282}\u{70b9}\u{503c}\u{90fd}\u{53ef}\u{4ee5}\u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{8bbe}\u{7f6e}\u{ff0c}strKey\u{53c2}\u{6570}\u{53d6}\u{503c}\u{5bf9}\u{5e94}\u{5217}\u{8868}\u{91cc}\u{9762}\u{7684}\u{201c}\u{540d}\u{79f0}\u{201d}\u{4e00}\u{5217}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Set float value"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  strKey                      [IN]            Key value"]
    #[doc = "  @param  fValue                      [IN]            Feature value to set"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks After the device is connected, call this interface to set specified float node. For detailed strKey value see: MvCameraNode. The node values of IFloat can be set through this interface, strKey value corresponds to the Name column."]
    pub fn MV_CC_SetFloatValue(
        handle: *mut ::std::os::raw::c_void,
        strKey: *const ::std::os::raw::c_char,
        fValue: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{83b7}\u{53d6}Boolean\u{5c5e}\u{6027}\u{503c}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  strKey                      [IN]            \u{5c5e}\u{6027}\u{952e}\u{503c}"]
    #[doc = "  @param  pbValue                  [IN][OUT]       \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{8bbe}\u{5907}\u{5c5e}\u{6027}\u{503c}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8fde}\u{63a5}\u{8bbe}\u{5907}\u{4e4b}\u{540e}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{83b7}\u{53d6}bool\u{7c7b}\u{578b}\u{7684}\u{6307}\u{5b9a}\u{8282}\u{70b9}\u{7684}\u{503c}\u{3002}strKey\u{53d6}\u{503c}\u{53ef}\u{4ee5}\u{53c2}\u{8003}XML\u{8282}\u{70b9}\u{53c2}\u{6570}\u{7c7b}\u{578b}\u{5217}\u{8868}\u{ff0c}\u{8868}\u{683c}\u{91cc}\u{9762}\u{6570}\u{636e}\u{7c7b}\u{578b}\u{4e3a}\u{201c}IBoolean\u{201d}\u{7684}\u{8282}\u{70b9}\u{503c}\u{90fd}\u{53ef}\u{4ee5}\u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{83b7}\u{53d6}\u{ff0c}strKey\u{53c2}\u{6570}\u{53d6}\u{503c}\u{5bf9}\u{5e94}\u{5217}\u{8868}\u{91cc}\u{9762}\u{7684}\u{201c}\u{540d}\u{79f0}\u{201d}\u{4e00}\u{5217}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Get Boolean value"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  strKey                      [IN]            Key value"]
    #[doc = "  @param  pbValue                  [IN][OUT]       Structure pointer of camera features"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks After the device is connected, call this interface to get specified bool nodes. For value of strKey, see MvCameraNode. The node values of IBoolean can be obtained through this interface, strKey value corresponds to the Name column."]
    pub fn MV_CC_GetBoolValue(
        handle: *mut ::std::os::raw::c_void,
        strKey: *const ::std::os::raw::c_char,
        pbValue: *mut bool_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}Boolean\u{578b}\u{5c5e}\u{6027}\u{503c}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  strKey                      [IN]            \u{5c5e}\u{6027}\u{952e}\u{503c}"]
    #[doc = "  @param  bValue                      [IN]            \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{8bbe}\u{5907}\u{7684}\u{5c5e}\u{6027}\u{503c}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8fde}\u{63a5}\u{8bbe}\u{5907}\u{4e4b}\u{540e}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{8bbe}\u{7f6e}bool\u{7c7b}\u{578b}\u{7684}\u{6307}\u{5b9a}\u{8282}\u{70b9}\u{7684}\u{503c}\u{3002}strKey\u{53d6}\u{503c}\u{53ef}\u{4ee5}\u{53c2}\u{8003}XML\u{8282}\u{70b9}\u{53c2}\u{6570}\u{7c7b}\u{578b}\u{5217}\u{8868}\u{ff0c}\u{8868}\u{683c}\u{91cc}\u{9762}\u{6570}\u{636e}\u{7c7b}\u{578b}\u{4e3a}\u{201c}IBoolean\u{201d}\u{7684}\u{8282}\u{70b9}\u{503c}\u{90fd}\u{53ef}\u{4ee5}\u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{8bbe}\u{7f6e}\u{ff0c}strKey\u{53c2}\u{6570}\u{53d6}\u{503c}\u{5bf9}\u{5e94}\u{5217}\u{8868}\u{91cc}\u{9762}\u{7684}\u{201c}\u{540d}\u{79f0}\u{201d}\u{4e00}\u{5217}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Set Boolean value"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  strKey                      [IN]            Key value"]
    #[doc = "  @param  bValue                      [IN]            Feature value to set"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks After the device is connected, call this interface to set specified bool nodes. For value of strKey, see MvCameraNode. The node values of IBoolean can be set through this interface, strKey value corresponds to the Name column."]
    pub fn MV_CC_SetBoolValue(
        handle: *mut ::std::os::raw::c_void,
        strKey: *const ::std::os::raw::c_char,
        bValue: bool_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{83b7}\u{53d6}String\u{5c5e}\u{6027}\u{503c}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  strKey                      [IN]            \u{5c5e}\u{6027}\u{952e}\u{503c}"]
    #[doc = "  @param  pstStringValue                [IN][OUT]       \u{8fd4}\u{56de}\u{7ed9}\u{8c03}\u{7528}\u{8005}\u{6709}\u{5173}\u{8bbe}\u{5907}\u{5c5e}\u{6027}\u{7ed3}\u{6784}\u{4f53}\u{6307}\u{9488}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8fde}\u{63a5}\u{8bbe}\u{5907}\u{4e4b}\u{540e}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{83b7}\u{53d6}string\u{7c7b}\u{578b}\u{7684}\u{6307}\u{5b9a}\u{8282}\u{70b9}\u{7684}\u{503c}\u{3002}strKey\u{53d6}\u{503c}\u{53ef}\u{4ee5}\u{53c2}\u{8003}XML\u{8282}\u{70b9}\u{53c2}\u{6570}\u{7c7b}\u{578b}\u{5217}\u{8868}\u{ff0c}\u{8868}\u{683c}\u{91cc}\u{9762}\u{6570}\u{636e}\u{7c7b}\u{578b}\u{4e3a}\u{201c}IString\u{201d}\u{7684}\u{8282}\u{70b9}\u{503c}\u{90fd}\u{53ef}\u{4ee5}\u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{83b7}\u{53d6}\u{ff0c}strKey\u{53c2}\u{6570}\u{53d6}\u{503c}\u{5bf9}\u{5e94}\u{5217}\u{8868}\u{91cc}\u{9762}\u{7684}\u{201c}\u{540d}\u{79f0}\u{201d}\u{4e00}\u{5217}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Get String value"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  strKey                      [IN]            Key value"]
    #[doc = "  @param  pstStringValue                [IN][OUT]       Structure pointer of camera features"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks After the device is connected, call this interface to get specified string nodes. For value of strKey, see MvCameraNode. The node values of IString can be obtained through this interface, strKey value corresponds to the Name column."]
    pub fn MV_CC_GetStringValue(
        handle: *mut ::std::os::raw::c_void,
        strKey: *const ::std::os::raw::c_char,
        pstStringValue: *mut MVCC_STRINGVALUE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}String\u{578b}\u{5c5e}\u{6027}\u{503c}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  strKey                      [IN]            \u{5c5e}\u{6027}\u{952e}\u{503c}"]
    #[doc = "  @param  strValue                      [IN]            \u{60f3}\u{8981}\u{8bbe}\u{7f6e}\u{7684}\u{8bbe}\u{5907}\u{7684}\u{5c5e}\u{6027}\u{503c}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8fde}\u{63a5}\u{8bbe}\u{5907}\u{4e4b}\u{540e}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{8bbe}\u{7f6e}string\u{7c7b}\u{578b}\u{7684}\u{6307}\u{5b9a}\u{8282}\u{70b9}\u{7684}\u{503c}\u{3002}strKey\u{53d6}\u{503c}\u{53ef}\u{4ee5}\u{53c2}\u{8003}XML\u{8282}\u{70b9}\u{53c2}\u{6570}\u{7c7b}\u{578b}\u{5217}\u{8868}\u{ff0c}\u{8868}\u{683c}\u{91cc}\u{9762}\u{6570}\u{636e}\u{7c7b}\u{578b}\u{4e3a}\u{201c}IString\u{201d}\u{7684}\u{8282}\u{70b9}\u{503c}\u{90fd}\u{53ef}\u{4ee5}\u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{8bbe}\u{7f6e}\u{ff0c}strKey\u{53c2}\u{6570}\u{53d6}\u{503c}\u{5bf9}\u{5e94}\u{5217}\u{8868}\u{91cc}\u{9762}\u{7684}\u{201c}\u{540d}\u{79f0}\u{201d}\u{4e00}\u{5217}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Set String value"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  strKey                      [IN]            Key value"]
    #[doc = "  @param  strValue                      [IN]            Feature value to set"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks After the device is connected, call this interface to set specified string nodes. For value of strKey, see MvCameraNode. The node values of IString can be set through this interface, strKey value corresponds to the Name column."]
    pub fn MV_CC_SetStringValue(
        handle: *mut ::std::os::raw::c_void,
        strKey: *const ::std::os::raw::c_char,
        strValue: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}Command\u{578b}\u{5c5e}\u{6027}\u{503c}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  strKey                      [IN]            \u{5c5e}\u{6027}\u{952e}\u{503c}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8fde}\u{63a5}\u{8bbe}\u{5907}\u{4e4b}\u{540e}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{8bbe}\u{7f6e}\u{6307}\u{5b9a}\u{7684}Command\u{7c7b}\u{578b}\u{8282}\u{70b9}\u{3002}strKey\u{53d6}\u{503c}\u{53ef}\u{4ee5}\u{53c2}\u{8003}XML\u{8282}\u{70b9}\u{53c2}\u{6570}\u{7c7b}\u{578b}\u{5217}\u{8868}\u{ff0c}\u{8868}\u{683c}\u{91cc}\u{9762}\u{6570}\u{636e}\u{7c7b}\u{578b}\u{4e3a}\u{201c}ICommand\u{201d}\u{7684}\u{8282}\u{70b9}\u{90fd}\u{53ef}\u{4ee5}\u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{8bbe}\u{7f6e}\u{ff0c}strKey\u{53c2}\u{6570}\u{53d6}\u{503c}\u{5bf9}\u{5e94}\u{5217}\u{8868}\u{91cc}\u{9762}\u{7684}\u{201c}\u{540d}\u{79f0}\u{201d}\u{4e00}\u{5217}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Send Command"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  strKey                      [IN]            Key value"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks After the device is connected, call this interface to set specified Command nodes. For value of strKey, see MvCameraNode. The node values of ICommand can be set through this interface, strKey value corresponds to the Name column."]
    pub fn MV_CC_SetCommandValue(
        handle: *mut ::std::os::raw::c_void,
        strKey: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{6e05}\u{9664}GenICam\u{8282}\u{70b9}\u{7f13}\u{5b58}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Invalidate GenICam Nodes"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_CC_InvalidateNodes(handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{8bbe}\u{5907}\u{672c}\u{5730}\u{5347}\u{7ea7}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  strFilePathName               [IN]            \u{6587}\u{4ef6}\u{540d}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{5c06}\u{5347}\u{7ea7}\u{56fa}\u{4ef6}\u{6587}\u{4ef6}\u{53d1}\u{9001}\u{7ed9}\u{8bbe}\u{5907}\u{8fdb}\u{884c}\u{5347}\u{7ea7}\u{3002}\u{8be5}\u{63a5}\u{53e3}\u{9700}\u{8981}\u{7b49}\u{5f85}\u{5347}\u{7ea7}\u{56fa}\u{4ef6}\u{6587}\u{4ef6}\u{6210}\u{529f}\u{4f20}\u{7ed9}\u{8bbe}\u{5907}\u{7aef}\u{4e4b}\u{540e}\u{518d}\u{8fd4}\u{56de}\u{ff0c}\u{54cd}\u{5e94}\u{65f6}\u{95f4}\u{53ef}\u{80fd}\u{8f83}\u{957f}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Device Local Upgrade"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  strFilePathName               [IN]            File name"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Call this API to send the upgrade firmware to the device for upgrade. This API will wait for return until the upgrade firmware is sent to the device, this response may take a long time. \\n"]
    #[doc = "For CameraLink device, it keeps sending upgrade firmware continuously."]
    pub fn MV_CC_LocalUpgrade(
        handle: *mut ::std::os::raw::c_void,
        strFilePathName: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{5347}\u{7ea7}\u{8fdb}\u{5ea6}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pnProcess                   [OUT]           \u{8fdb}\u{5ea6}\u{63a5}\u{6536}\u{5730}\u{5740}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Get Upgrade Progress"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  pnProcess                   [OUT]           Progress receiving address"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_CC_GetUpgradeProcess(
        handle: *mut ::std::os::raw::c_void,
        pnProcess: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{8bfb}\u{5185}\u{5b58}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pBuffer                     [IN][OUT]       \u{4f5c}\u{4e3a}\u{8fd4}\u{56de}\u{503c}\u{4f7f}\u{7528}\u{ff0c}\u{4fdd}\u{5b58}\u{8bfb}\u{5230}\u{7684}\u{5185}\u{5b58}\u{503c}\u{ff08}GEV\u{8bbe}\u{5907}\u{5185}\u{5b58}\u{503c}\u{662f}\u{6309}\u{7167}\u{5927}\u{7aef}\u{6a21}\u{5f0f}\u{5b58}\u{50a8}\u{7684}\u{ff0c}\u{5176}\u{5b83}\u{534f}\u{8bae}\u{8bbe}\u{5907}\u{5b89}\u{88c5}\u{5c0f}\u{7aef}\u{5b58}\u{50a8}\u{ff09}"]
    #[doc = "  @param  nAddress                    [IN]            \u{5f85}\u{8bfb}\u{53d6}\u{7684}\u{5185}\u{5b58}\u{5730}\u{5740}\u{ff0c}\u{8be5}\u{5730}\u{5740}\u{53ef}\u{4ee5}\u{4ece}\u{8bbe}\u{5907}\u{7684}Camera.xml\u{6587}\u{4ef6}\u{4e2d}\u{83b7}\u{53d6}\u{ff0c}\u{5f62}\u{5982}xxx_RegAddr\u{7684}xml\u{8282}\u{70b9}\u{503c}"]
    #[doc = "  @param  nLength                     [IN]            \u{5f85}\u{8bfb}\u{53d6}\u{7684}\u{5185}\u{5b58}\u{957f}\u{5ea6}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8bbf}\u{95ee}\u{8bbe}\u{5907}\u{ff0c}\u{8bfb}\u{53d6}\u{67d0}\u{6bb5}\u{5bc4}\u{5b58}\u{5668}\u{7684}\u{6570}\u{636e}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Read Memory"]
    #[doc = "  @param  handle                      [IN]            Device Handle"]
    #[doc = "  @param  pBuffer                     [IN][OUT]       Used as a return value, save the read-in memory value ( Memory value is stored in accordance with the big end model)"]
    #[doc = "  @param  nAddress                    [IN]            Memory address to be read, which can be obtained from the Camera.xml file of the device, the form xml node value of xxx_RegAddr"]
    #[doc = "  @param  nLength                     [IN]            Length of the memory to be read"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Access device, read the data from certain register."]
    pub fn MV_CC_ReadMemory(
        handle: *mut ::std::os::raw::c_void,
        pBuffer: *mut ::std::os::raw::c_void,
        nAddress: i64,
        nLength: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{5199}\u{5185}\u{5b58}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pBuffer                     [IN]            \u{5f85}\u{5199}\u{5165}\u{7684}\u{5185}\u{5b58}\u{503c}\u{ff08}\u{6ce8}\u{610f}GEV\u{8bbe}\u{5907}\u{5185}\u{5b58}\u{503c}\u{8981}\u{6309}\u{7167}\u{5927}\u{7aef}\u{6a21}\u{5f0f}\u{5b58}\u{50a8}\u{ff0c}\u{5176}\u{5b83}\u{534f}\u{8bae}\u{8bbe}\u{5907}\u{5b89}\u{88c5}\u{5c0f}\u{7aef}\u{5b58}\u{50a8}\u{ff09}"]
    #[doc = "  @param  nAddress                    [IN]            \u{5f85}\u{5199}\u{5165}\u{7684}\u{5185}\u{5b58}\u{5730}\u{5740}\u{ff0c}\u{8be5}\u{5730}\u{5740}\u{53ef}\u{4ee5}\u{4ece}\u{8bbe}\u{5907}\u{7684}Camera.xml\u{6587}\u{4ef6}\u{4e2d}\u{83b7}\u{53d6}\u{ff0c}\u{5f62}\u{5982}xxx_RegAddr\u{7684}xml\u{8282}\u{70b9}\u{503c}"]
    #[doc = "  @param  nLength                     [IN]            \u{5f85}\u{5199}\u{5165}\u{7684}\u{5185}\u{5b58}\u{957f}\u{5ea6}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8bbf}\u{95ee}\u{8bbe}\u{5907}\u{ff0c}\u{628a}\u{4e00}\u{6bb5}\u{6570}\u{636e}\u{5199}\u{5165}\u{67d0}\u{6bb5}\u{5bc4}\u{5b58}\u{5668}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Write Memory"]
    #[doc = "  @param  handle                      [IN]            Device Handle"]
    #[doc = "  @param  pBuffer                     [IN]            Memory value to be written ( Note the memory value to be stored in accordance with the big end model)"]
    #[doc = "  @param  nAddress                    [IN]            Memory address to be written, which can be obtained from the Camera.xml file of the device, the form xml node value of xxx_RegAddr"]
    #[doc = "  @param  nLength                     [IN]            Length of the memory to be written"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Access device, write a piece of data into a certain segment of register."]
    pub fn MV_CC_WriteMemory(
        handle: *mut ::std::os::raw::c_void,
        pBuffer: *const ::std::os::raw::c_void,
        nAddress: i64,
        nLength: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{6ce8}\u{518c}\u{5f02}\u{5e38}\u{6d88}\u{606f}\u{56de}\u{8c03}\u{ff0c}\u{5728}\u{6253}\u{5f00}\u{8bbe}\u{5907}\u{4e4b}\u{540e}\u{8c03}\u{7528}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  cbException                 [IN]            \u{5f02}\u{5e38}\u{56de}\u{8c03}\u{51fd}\u{6570}\u{6307}\u{9488}"]
    #[doc = "  @param  pUser                       [IN]            \u{7528}\u{6237}\u{81ea}\u{5b9a}\u{4e49}\u{53d8}\u{91cf}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8be5}\u{63a5}\u{53e3}\u{9700}\u{8981}\u{5728} MV_CC_OpenDevice() \u{6253}\u{5f00}\u{8bbe}\u{5907}\u{4e4b}\u{540e}\u{8c03}\u{7528}\u{3002}\u{8bbe}\u{5907}\u{5f02}\u{5e38}\u{65ad}\u{5f00}\u{8fde}\u{63a5}\u{540e}\u{53ef}\u{4ee5}\u{5728}\u{56de}\u{8c03}\u{91cc}\u{9762}\u{83b7}\u{53d6}\u{5230}\u{5f02}\u{5e38}\u{6d88}\u{606f}\u{ff0c}GigE\u{8bbe}\u{5907}\u{6389}\u{7ebf}\u{4e4b}\u{540e}\u{9700}\u{8981}\u{5148}\u{8c03}\u{7528} MV_CC_CloseDevice() \u{63a5}\u{53e3}\u{5173}\u{95ed}\u{8bbe}\u{5907}\u{ff0c}\u{518d}\u{8c03}\u{7528} MV_CC_OpenDevice() \u{63a5}\u{53e3}\u{91cd}\u{65b0}\u{6253}\u{5f00}\u{8bbe}\u{5907}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Register Exception Message CallBack, call after open device"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  cbException                 [IN]            Exception Message CallBack Function Pointer"]
    #[doc = "  @param  pUser                       [IN]            User defined variable"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Call this interface after the device is opened by MV_CC_OpenDevice() . When device is exceptionally disconnected, the exception message can be obtained from callback function. For Disconnected GigE device, first call MV_CC_CloseDevice() to shut device, and then call MV_CC_OpenDevice() to reopen the device."]
    pub fn MV_CC_RegisterExceptionCallBack(
        handle: *mut ::std::os::raw::c_void,
        cbException: ::std::option::Option<
            unsafe extern "C" fn(
                nMsgType: ::std::os::raw::c_uint,
                pUser: *mut ::std::os::raw::c_void,
            ),
        >,
        pUser: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{6ce8}\u{518c}\u{5168}\u{90e8}\u{4e8b}\u{4ef6}\u{56de}\u{8c03}\u{ff0c}\u{5728}\u{6253}\u{5f00}\u{8bbe}\u{5907}\u{4e4b}\u{540e}\u{8c03}\u{7528}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  cbEvent                     [IN]            \u{4e8b}\u{4ef6}\u{56de}\u{8c03}\u{51fd}\u{6570}\u{6307}\u{9488}"]
    #[doc = "  @param  pUser                       [IN]            \u{7528}\u{6237}\u{81ea}\u{5b9a}\u{4e49}\u{53d8}\u{91cf}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{8bbe}\u{7f6e}\u{4e8b}\u{4ef6}\u{56de}\u{8c03}\u{ff0c}\u{53ef}\u{4ee5}\u{5728}\u{56de}\u{8c03}\u{51fd}\u{6570}\u{91cc}\u{9762}\u{83b7}\u{53d6}\u{91c7}\u{96c6}\u{3001}\u{66dd}\u{5149}\u{7b49}\u{4e8b}\u{4ef6}\u{4fe1}\u{606f}\u{3002} \\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{4e0d}\u{652f}\u{6301}CameraLink\u{8bbe}\u{5907}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Register event callback, which is called after the device is opened"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  cbEvent                     [IN]            Event CallBack Function Pointer"]
    #[doc = "  @param  pUser                       [IN]            User defined variable"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Call this API to set the event callback function to get the event information, e.g., acquisition, exposure, and so on. \\n"]
    #[doc = "This API is not supported by CameraLink device."]
    pub fn MV_CC_RegisterAllEventCallBack(
        handle: *mut ::std::os::raw::c_void,
        cbEvent: ::std::option::Option<
            unsafe extern "C" fn(
                pEventInfo: *mut MV_EVENT_OUT_INFO,
                pUser: *mut ::std::os::raw::c_void,
            ),
        >,
        pUser: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{6ce8}\u{518c}\u{5355}\u{4e2a}\u{4e8b}\u{4ef6}\u{56de}\u{8c03}\u{ff0c}\u{5728}\u{6253}\u{5f00}\u{8bbe}\u{5907}\u{4e4b}\u{540e}\u{8c03}\u{7528}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  strEventName                  [IN]            \u{4e8b}\u{4ef6}\u{540d}\u{79f0}"]
    #[doc = "  @param  cbEvent                     [IN]            \u{4e8b}\u{4ef6}\u{56de}\u{8c03}\u{51fd}\u{6570}\u{6307}\u{9488}"]
    #[doc = "  @param  pUser                       [IN]            \u{7528}\u{6237}\u{81ea}\u{5b9a}\u{4e49}\u{53d8}\u{91cf}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{8bbe}\u{7f6e}\u{4e8b}\u{4ef6}\u{56de}\u{8c03}\u{ff0c}\u{53ef}\u{4ee5}\u{5728}\u{56de}\u{8c03}\u{51fd}\u{6570}\u{91cc}\u{9762}\u{83b7}\u{53d6}\u{91c7}\u{96c6}\u{3001}\u{66dd}\u{5149}\u{7b49}\u{4e8b}\u{4ef6}\u{4fe1}\u{606f}\u{3002}\\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{4e0d}\u{652f}\u{6301}CameraLink\u{8bbe}\u{5907}\u{ff0c}\u{4ec5}\u{652f}\u{6301}\"\u{8bbe}\u{5907}\u{6389}\u{7ebf}\"\u{8fd9}\u{4e00}\u{79cd}\u{4e8b}\u{4ef6}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Register single event callback, which is called after the device is opened"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  strEventName                  [IN]            Event name"]
    #[doc = "  @param  cbEvent                     [IN]            Event CallBack Function Pointer"]
    #[doc = "  @param  pUser                       [IN]            User defined variable"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Call this API to set the event callback function to get the event information, e.g., acquisition, exposure, and so on. \\n"]
    #[doc = "This API is not supported by CameraLink device ."]
    pub fn MV_CC_RegisterEventCallBackEx(
        handle: *mut ::std::os::raw::c_void,
        strEventName: *const ::std::os::raw::c_char,
        cbEvent: ::std::option::Option<
            unsafe extern "C" fn(
                pEventInfo: *mut MV_EVENT_OUT_INFO,
                pUser: *mut ::std::os::raw::c_void,
            ),
        >,
        pUser: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{5f3a}\u{5236}IP"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  nIP                         [IN]            \u{8bbe}\u{7f6e}\u{7684}IP"]
    #[doc = "  @param  nSubNetMask                 [IN]            \u{5b50}\u{7f51}\u{63a9}\u{7801}"]
    #[doc = "  @param  nDefaultGateWay             [IN]            \u{9ed8}\u{8ba4}\u{7f51}\u{5173}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{5f3a}\u{5236}\u{8bbe}\u{7f6e}\u{8bbe}\u{5907}\u{7f51}\u{7edc}\u{53c2}\u{6570}\u{ff08}\u{5305}\u{62ec}IP\u{3001}\u{5b50}\u{7f51}\u{63a9}\u{7801}\u{3001}\u{9ed8}\u{8ba4}\u{7f51}\u{5173}\u{ff09}\u{ff0c}\u{5f3a}\u{5236}\u{8bbe}\u{7f6e}\u{4e4b}\u{540e}\u{5c06}\u{9700}\u{8981}\u{91cd}\u{65b0}\u{521b}\u{5efa}\u{8bbe}\u{5907}\u{53e5}\u{67c4}\u{ff0c}\u{4ec5}GigEVision\u{8bbe}\u{5907}\u{652f}\u{6301}\u{3002}\\n"]
    #[doc = "\u{5982}\u{679c}\u{8bbe}\u{5907}\u{4e3a}DHCP\u{7684}\u{72b6}\u{6001}\u{ff0c}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{5f3a}\u{5236}\u{8bbe}\u{7f6e}\u{8bbe}\u{5907}\u{7f51}\u{7edc}\u{53c2}\u{6570}\u{4e4b}\u{540e}\u{8bbe}\u{5907}\u{5c06}\u{4f1a}\u{91cd}\u{542f}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Force IP"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  nIP                         [IN]            IP to set"]
    #[doc = "  @param  nSubNetMask                 [IN]            Subnet mask"]
    #[doc = "  @param  nDefaultGateWay             [IN]            Default gateway"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Force setting camera network parameter (including IP address, subnet mask, default gateway). After forced setting, device handle should be created again. This function is only supported by GigEVision camera.\\n"]
    #[doc = "If device is in DHCP status, after calling this API to force setting camera network parameter, the device will restart."]
    pub fn MV_GIGE_ForceIpEx(
        handle: *mut ::std::os::raw::c_void,
        nIP: ::std::os::raw::c_uint,
        nSubNetMask: ::std::os::raw::c_uint,
        nDefaultGateWay: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{914d}\u{7f6e}IP\u{65b9}\u{5f0f}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  nType                       [IN]            IP\u{7c7b}\u{578b}\u{ff0c}\u{89c1}MV_IP_CFG_x"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{53d1}\u{9001}\u{547d}\u{4ee4}\u{8bbe}\u{7f6e}\u{8bbe}\u{5907}\u{7684}IP\u{65b9}\u{5f0f}\u{ff0c}\u{5982}DHCP\u{3001}LLA\u{7b49}\u{ff0c}\u{4ec5}GigEVision\u{8bbe}\u{5907}\u{652f}\u{6301}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  IP configuration method"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  nType                       [IN]            IP type, refer to MV_IP_CFG_x"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Send command to set camera IP mode, such as DHCP and LLA, only supported by GigEVision."]
    pub fn MV_GIGE_SetIpConfig(
        handle: *mut ::std::os::raw::c_void,
        nType: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{4ec5}\u{4f7f}\u{7528}\u{67d0}\u{79cd}\u{6a21}\u{5f0f},type: MV_NET_TRANS_x\u{ff0c}\u{4e0d}\u{8bbe}\u{7f6e}\u{65f6}\u{ff0c}\u{9ed8}\u{8ba4}\u{4f18}\u{5148}\u{4f7f}\u{7528}driver"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  nType                       [IN]            \u{7f51}\u{7edc}\u{4f20}\u{8f93}\u{6a21}\u{5f0f}\u{ff0c}\u{89c1}MV_NET_TRANS_x"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{8bbe}\u{7f6e}SDK\u{5185}\u{90e8}\u{4f18}\u{5148}\u{4f7f}\u{7528}\u{7684}\u{7f51}\u{7edc}\u{6a21}\u{5f0f}\u{ff0c}\u{9ed8}\u{8ba4}\u{4f18}\u{5148}\u{4f7f}\u{7528}\u{9a71}\u{52a8}\u{6a21}\u{5f0f}\u{ff0c}\u{4ec5}GigEVision\u{8bbe}\u{5907}\u{652f}\u{6301}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Set to use only one mode,type: MV_NET_TRANS_x. When do not set, priority is to use driver by default"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  nType                       [IN]            Net transmission mode, refer to MV_NET_TRANS_x"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarksSet SDK internal priority network mode through this interface, drive mode by default, only supported by GigEVision camera."]
    pub fn MV_GIGE_SetNetTransMode(
        handle: *mut ::std::os::raw::c_void,
        nType: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{7f51}\u{7edc}\u{4f20}\u{8f93}\u{4fe1}\u{606f}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pstInfo                     [OUT]           \u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "  @return \u{6210}\u{529f},\u{8fd4}\u{56de}MV_OK,\u{5931}\u{8d25},\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{83b7}\u{53d6}\u{7f51}\u{7edc}\u{4f20}\u{8f93}\u{76f8}\u{5173}\u{4fe1}\u{606f}\u{ff0c}\u{5305}\u{62ec}\u{5df2}\u{63a5}\u{6536}\u{6570}\u{636e}\u{5927}\u{5c0f}\u{3001}\u{4e22}\u{5e27}\u{6570}\u{91cf}\u{7b49}\u{ff0c}\u{5728} MV_CC_StartGrabbing() \u{5f00}\u{542f}\u{91c7}\u{96c6}\u{4e4b}\u{540e}\u{8c03}\u{7528}\u{3002}\u{4ec5}GigEVision\u{8bbe}\u{5907}\u{652f}\u{6301}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Get net transmission information"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  pstInfo                     [OUT]           Information Structure"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Get network transmission information through this API, including received data size, number of lost frames. Call this API after starting image acquiring through MV_CC_StartGrabbing() . This API is supported only by GigEVision Camera."]
    pub fn MV_GIGE_GetNetTransInfo(
        handle: *mut ::std::os::raw::c_void,
        pstInfo: *mut MV_NETTRANS_INFO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}GVCP\u{547d}\u{4ee4}\u{8d85}\u{65f6}\u{65f6}\u{95f4}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  nMillisec                   [IN]            \u{8d85}\u{65f6}\u{65f6}\u{95f4}\u{ff0c}\u{4ee5}\u{6beb}\u{79d2}\u{4f4d}\u{5355}\u{4f4d}\u{ff0c}\u{8303}\u{56f4}\u{ff1a}0-10000"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8fde}\u{63a5}\u{8bbe}\u{5907}\u{4e4b}\u{540e}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{8bbe}\u{7f6e}GVCP\u{547d}\u{4ee4}\u{8d85}\u{65f6}\u{65f6}\u{95f4}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Set GVCP cammand timeout"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  nMillisec                   [IN]            Timeout, ms as unit, range: 0-10000"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks After the device is connected, call this interface to set GVCP command timeout time."]
    pub fn MV_GIGE_SetGvcpTimeout(
        handle: *mut ::std::os::raw::c_void,
        nMillisec: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{6700}\u{4f73}\u{7684}packet size\u{ff0c}\u{8be5}\u{63a5}\u{53e3}\u{76ee}\u{524d}\u{53ea}\u{652f}\u{6301}GigE\u{8bbe}\u{5907}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @return \u{6700}\u{4f73}packetsize"]
    #[doc = "  @remarks \u{83b7}\u{53d6}\u{6700}\u{4f73}\u{7684}packet size\u{ff0c}\u{5bf9}\u{5e94}GigEVision\u{8bbe}\u{5907}\u{662f}SCPS\u{ff0c}\u{5bf9}\u{5e94}U3V\u{8bbe}\u{5907}\u{662f}\u{6bcf}\u{6b21}\u{4ece}\u{9a71}\u{52a8}\u{8bfb}\u{53d6}\u{7684}\u{5305}\u{5927}\u{5c0f}\u{ff0c}\u{8be5}\u{5927}\u{5c0f}\u{5373}\u{7f51}\u{7edc}\u{4e0a}\u{4f20}\u{8f93}\u{4e00}\u{4e2a}\u{5305}\u{7684}\u{5927}\u{5c0f}\u{3002}\u{8be5}\u{63a5}\u{53e3}\u{9700}\u{8981}\u{5728} MV_CC_OpenDevice() \u{4e4b}\u{540e}\u{3001} MV_CC_StartGrabbing() \u{4e4b}\u{524d}\u{8c03}\u{7528}\u{3002} \\n"]
    #[doc = "\u{8be5}\u{63a5}\u{53e3}\u{4e0d}\u{652f}\u{6301}CameraLink\u{8bbe}\u{5907}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Get the optimal Packet Size, Only support GigE Camera"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @return Optimal packetsize"]
    #[doc = "  @remarks To get optimized packet size, for GigEVision device is SCPS, for USB3Vision device is the size of packet read from drive each time, and it is the size of a packet transported on the network. The interface should be called after MV_CC_OpenDevice() and before MV_CC_StartGrabbing() . \\n"]
    #[doc = "This API is not supported by CameraLink device."]
    pub fn MV_CC_GetOptimalPacketSize(handle: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{662f}\u{5426}\u{6253}\u{5f00}\u{91cd}\u{53d1}\u{5305}\u{652f}\u{6301}\u{ff0c}\u{53ca}\u{91cd}\u{53d1}\u{5305}\u{8bbe}\u{7f6e}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  bEnable                     [IN]            \u{662f}\u{5426}\u{652f}\u{6301}\u{91cd}\u{53d1}\u{5305}"]
    #[doc = "  @param  nMaxResendPercent           [IN]            \u{6700}\u{5927}\u{91cd}\u{53d1}\u{6bd4}"]
    #[doc = "  @param  nResendTimeout              [IN]            \u{91cd}\u{53d1}\u{8d85}\u{65f6}\u{65f6}\u{95f4}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8fde}\u{63a5}\u{8bbe}\u{5907}\u{4e4b}\u{540e}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{8bbe}\u{7f6e}\u{91cd}\u{53d1}\u{5305}\u{5c5e}\u{6027}\u{ff0c}\u{4ec5}GigEVision\u{8bbe}\u{5907}\u{652f}\u{6301}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Set whethe to enable resend, and set resend"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  bEnable                     [IN]            enable resend"]
    #[doc = "  @param  nMaxResendPercent           [IN]            Max resend persent"]
    #[doc = "  @param  nResendTimeout              [IN]            Resend timeout"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks After the device is connected, call this interface to set resend packet properties, only supported by GigEVision camera."]
    pub fn MV_GIGE_SetResend(
        handle: *mut ::std::os::raw::c_void,
        bEnable: ::std::os::raw::c_uint,
        nMaxResendPercent: ::std::os::raw::c_uint,
        nResendTimeout: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{8bbe}\u{7f6e}\u{4f20}\u{8f93}\u{6a21}\u{5f0f}\u{ff0c}\u{53ef}\u{4ee5}\u{4e3a}\u{5355}\u{64ad}\u{6a21}\u{5f0f}\u{3001}\u{7ec4}\u{64ad}\u{6a21}\u{5f0f}\u{7b49}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pstTransmissionType          [IN]            \u{4f20}\u{8f93}\u{6a21}\u{5f0f}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{8bbe}\u{7f6e}\u{4f20}\u{8f93}\u{6a21}\u{5f0f}\u{4e3a}\u{5355}\u{64ad}\u{3001}\u{7ec4}\u{64ad}\u{7b49}\u{6a21}\u{5f0f}\u{ff0c}\u{4ec5}GigEVision\u{8bbe}\u{5907}\u{652f}\u{6301}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Set transmission type,Unicast or Multicast"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  pstTransmissionType          [IN]           Struct of transmission type"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Call this API to set the transmission mode as single cast mode and multicast mode. And this API is only valid for GigEVision camera."]
    pub fn MV_GIGE_SetTransmissionType(
        handle: *mut ::std::os::raw::c_void,
        pstTransmissionType: *mut MV_TRANSMISSION_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief   \u{53d1}\u{51fa}\u{52a8}\u{4f5c}\u{547d}\u{4ee4}"]
    #[doc = "  @param   pstActionCmdInfo           [IN]            \u{52a8}\u{4f5c}\u{547d}\u{4ee4}\u{4fe1}\u{606f}"]
    #[doc = "  @param   pstActionCmdResults        [OUT]           \u{52a8}\u{4f5c}\u{547d}\u{4ee4}\u{8fd4}\u{56de}\u{4fe1}\u{606f}\u{5217}\u{8868}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{4ec5}GigEVision\u{8bbe}\u{5907}\u{652f}\u{6301}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Issue Action Command"]
    #[doc = "  @param   pstActionCmdInfo           [IN]            Action Command"]
    #[doc = "  @param   pstActionCmdResults        [OUT]           Action Command Result List"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks This API is supported only by GigEVision camera."]
    pub fn MV_GIGE_IssueActionCommand(
        pstActionCmdInfo: *mut MV_ACTION_CMD_INFO,
        pstActionCmdResults: *mut MV_ACTION_CMD_RESULT_LIST,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{7ec4}\u{64ad}\u{72b6}\u{6001}"]
    #[doc = "  @param  pstDevInfo                  [IN]            \u{8bbe}\u{5907}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "  @param  pbStatus                     [OUT]           \u{7ec4}\u{64ad}\u{72b6}\u{6001},true:\u{7ec4}\u{64ad}\u{72b6}\u{6001}\u{ff0c}false:\u{975e}\u{7ec4}\u{64ad}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8be5}\u{63a5}\u{53e3}\u{7528}\u{4e8e}\u{5224}\u{65ad}\u{8bbe}\u{5907}\u{5f53}\u{524d}\u{662f}\u{5426}\u{5904}\u{4e8e}\u{7ec4}\u{64ad}\u{72b6}\u{6001}\u{ff0c}\u{89e3}\u{51b3}\u{5ba2}\u{6237}\u{7aef}\u{679a}\u{4e3e}\u{65f6}\u{9700}\u{8981}\u{6253}\u{5f00}\u{8bbe}\u{5907}\u{5224}\u{65ad}\u{7ec4}\u{64ad}\u{7684}\u{95ee}\u{9898}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Get Multicast Status"]
    #[doc = "  @param  pstDevInfo                  [IN]            Device Information Structure"]
    #[doc = "  @param  pbStatus                     [OUT]           Status of Multicast"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks This interface is used to determine whether the camera is currently in multicast state, and to solve the problem that the client needs to turn on the camera to determine multicast when enumerating."]
    pub fn MV_GIGE_GetMulticastStatus(
        pstDevInfo: *mut MV_CC_DEVICE_INFO,
        pbStatus: *mut bool_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{8bbe}\u{5907}\u{5c5e}\u{6027}\u{6811}XML"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pData                       [OUT]           XML\u{6570}\u{636e}\u{63a5}\u{6536}\u{7f13}\u{5b58}"]
    #[doc = "  @param  nDataSize                   [IN]            \u{63a5}\u{6536}\u{7f13}\u{5b58}\u{5927}\u{5c0f}"]
    #[doc = "  @param  pnDataLen                   [OUT]           \u{5b9e}\u{9645}\u{6570}\u{636e}\u{5927}\u{5c0f}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{5f53}pData\u{4e3a}NULL\u{6216}nDataSize\u{6bd4}\u{5b9e}\u{9645}\u{7684}xml\u{6587}\u{4ef6}\u{5c0f}\u{65f6}\u{ff0c}\u{4e0d}\u{62f7}\u{8d1d}\u{6570}\u{636e}\u{ff0c}\u{7531}pnDataLen\u{8fd4}\u{56de}xml\u{6587}\u{4ef6}\u{5927}\u{5c0f}\u{ff1b}\\n"]
    #[doc = "\u{5f53}pData\u{4e3a}\u{6709}\u{6548}\u{7f13}\u{5b58}\u{5730}\u{5740}\u{ff0c}\u{4e14}\u{7f13}\u{5b58}\u{8db3}\u{591f}\u{5927}\u{65f6}\u{ff0c}\u{62f7}\u{8d1d}\u{5b8c}\u{6574}\u{6570}\u{636e}\u{4fdd}\u{5b58}\u{5728}\u{8be5}\u{7f13}\u{5b58}\u{91cc}\u{9762}\u{ff0c}\u{5e76}\u{7531}pnDataLen\u{8fd4}\u{56de}xml\u{6587}\u{4ef6}\u{5b9e}\u{9645}\u{5927}\u{5c0f}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Get camera feature tree XML"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  pData                       [OUT]           XML data receiving buffer"]
    #[doc = "  @param  nDataSize                   [IN]            Buffer size"]
    #[doc = "  @param  pnDataLen                   [OUT]           Actual data length"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks When pData is NULL or nDataSize than the actual XML file hours, do not copy the data, returned by pnDataLen XML file size.\\n"]
    #[doc = "When pData is a valid cache address and the cache is large enough, copy the full data into the cache, and pnDataLen returns the actual size of the XML file."]
    pub fn MV_XML_GetGenICamXML(
        handle: *mut ::std::os::raw::c_void,
        pData: *mut ::std::os::raw::c_uchar,
        nDataSize: ::std::os::raw::c_uint,
        pnDataLen: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{83b7}\u{5f97}\u{5f53}\u{524d}\u{8282}\u{70b9}\u{7684}\u{8bbf}\u{95ee}\u{6a21}\u{5f0f}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  strName                    [IN]            \u{8282}\u{70b9}\u{540d}\u{79f0}"]
    #[doc = "  @param  pAccessMode                 [OUT]           \u{8282}\u{70b9}\u{7684}\u{8bbf}\u{95ee}\u{6a21}\u{5f0f}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Get Access mode of cur node"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  strName                    [IN]            Name of node"]
    #[doc = "  @param  pAccessMode                 [OUT]           Access mode of the node"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_XML_GetNodeAccessMode(
        handle: *mut ::std::os::raw::c_void,
        strName: *const ::std::os::raw::c_char,
        pAccessMode: *mut MV_XML_AccessMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{83b7}\u{5f97}\u{5f53}\u{524d}\u{8282}\u{70b9}\u{7684}\u{7c7b}\u{578b}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  strName                    [IN]            \u{8282}\u{70b9}\u{540d}\u{79f0}"]
    #[doc = "  @param  pInterfaceType              [OUT]           \u{8282}\u{70b9}\u{7684}\u{7c7b}\u{578b}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8be5}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{5728}\u{8c03}\u{7528}\u{4e07}\u{80fd}\u{63a5}\u{53e3}\u{4e4b}\u{524d}\u{ff0c}\u{63d0}\u{524d}\u{77e5}\u{9053}\u{8282}\u{70b9}\u{7c7b}\u{578b}\u{ff0c}\u{65b9}\u{4fbf}\u{7528}\u{6237}\u{9009}\u{62e9}\u{5408}\u{9002}\u{7684}\u{4e07}\u{80fd}\u{63a5}\u{53e3}\u{8fdb}\u{884c}\u{8282}\u{70b9}\u{503c}\u{7684}\u{8bbe}\u{7f6e}\u{548c}\u{83b7}\u{53d6}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Get Interface Type of cur node"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  strName                    [IN]            Name of node"]
    #[doc = "  @param  pInterfaceType              [OUT]           Interface Type of the node"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks The interface can know the node type in advance before calling the universal interface, so as to facilitate users to select the appropriate universal interface for setting and obtaining the node value."]
    pub fn MV_XML_GetNodeInterfaceType(
        handle: *mut ::std::os::raw::c_void,
        strName: *const ::std::os::raw::c_char,
        pInterfaceType: *mut MV_XML_InterfaceType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{4fdd}\u{5b58}\u{56fe}\u{7247}\u{ff0c}\u{652f}\u{6301}Bmp\u{548c}Jpeg."]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pstSaveParam                  [IN][OUT]       \u{4fdd}\u{5b58}\u{56fe}\u{7247}\u{53c2}\u{6570}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{901a}\u{8fc7}\u{5c06}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{5c06}\u{4ece}\u{8bbe}\u{5907}\u{91c7}\u{96c6}\u{5230}\u{7684}\u{539f}\u{59cb}\u{56fe}\u{50cf}\u{6570}\u{636e}\u{8f6c}\u{6362}\u{6210}JPEG\u{6216}\u{8005}BMP\u{7b49}\u{683c}\u{5f0f}\u{5e76}\u{5b58}\u{653e}\u{5728}\u{6307}\u{5b9a}\u{5185}\u{5b58}\u{4e2d}\u{ff0c}\u{7136}\u{540e}\u{7528}\u{6237}\u{53ef}\u{4ee5}\u{5c06}\u{8f6c}\u{6362}\u{4e4b}\u{540e}\u{7684}\u{6570}\u{636e}\u{76f4}\u{63a5}\u{4fdd}\u{5b58}\u{6210}\u{56fe}\u{7247}\u{6587}\u{4ef6}\u{3002}\u{8be5}\u{63a5}\u{53e3}\u{8c03}\u{7528}\u{65e0}\u{63a5}\u{53e3}\u{987a}\u{5e8f}\u{8981}\u{6c42}\u{ff0c}\u{6709}\u{56fe}\u{50cf}\u{6e90}\u{6570}\u{636e}\u{5c31}\u{53ef}\u{4ee5}\u{8fdb}\u{884c}\u{8f6c}\u{6362}\u{ff0c}\u{53ef}\u{4ee5}\u{5148}\u{8c03}\u{7528} MV_CC_GetOneFrameTimeout() \u{6216}\u{8005} MV_CC_RegisterImageCallBackEx() \u{8bbe}\u{7f6e}\u{56de}\u{8c03}\u{51fd}\u{6570}\u{ff0c}\u{83b7}\u{53d6}\u{4e00}\u{5e27}\u{56fe}\u{50cf}\u{6570}\u{636e}\u{ff0c}\u{7136}\u{540e}\u{518d}\u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{8f6c}\u{6362}\u{683c}\u{5f0f}\u{3002} \\n"]
    #[doc = "MV_CC_SaveImageEx2() \u{6bd4} MV_CC_SaveImageEx() \u{589e}\u{52a0}\u{53c2}\u{6570}handle\u{ff0c}\u{4e3a}\u{4e86}\u{4fdd}\u{8bc1}\u{4e0e}\u{5176}\u{4ed6}\u{63a5}\u{53e3}\u{7684}\u{7edf}\u{4e00}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Save image, support Bmp and Jpeg."]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  pstSaveParam                  [IN][OUT]       Save image parameters structure"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Once there is image data, you can call this API to convert the data. \\n"]
    #[doc = "You can also call MV_CC_GetOneFrameTimeout() or MV_CC_RegisterImageCallBackEx() or MV_CC_GetImageBuffer() to get one image frame and set the callback function, and then call this API to convert the format. \\n"]
    #[doc = "Comparing with the API MV_CC_SaveImageEx() , this API added the parameter handle to ensure the unity with other API."]
    pub fn MV_CC_SaveImageEx2(
        handle: *mut ::std::os::raw::c_void,
        pstSaveParam: *mut MV_SAVE_IMAGE_PARAM_EX,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{50cf}\u{7d20}\u{683c}\u{5f0f}\u{8f6c}\u{6362}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pstCvtParam                 [IN][OUT]       \u{50cf}\u{7d20}\u{683c}\u{5f0f}\u{8f6c}\u{6362}\u{53c2}\u{6570}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{901a}\u{8fc7}\u{5c06}\u{63a5}\u{53e3}\u{53ef}\u{4ee5}\u{5c06}\u{4ece}\u{8bbe}\u{5907}\u{91c7}\u{96c6}\u{5230}\u{7684}\u{539f}\u{59cb}\u{56fe}\u{50cf}\u{6570}\u{636e}\u{8f6c}\u{6362}\u{6210}\u{7528}\u{6237}\u{6240}\u{9700}\u{7684}\u{50cf}\u{7d20}\u{683c}\u{5f0f}\u{5e76}\u{5b58}\u{653e}\u{5728}\u{6307}\u{5b9a}\u{5185}\u{5b58}\u{4e2d}\u{3002}\u{8be5}\u{63a5}\u{53e3}\u{8c03}\u{7528}\u{65e0}\u{63a5}\u{53e3}\u{987a}\u{5e8f}\u{8981}\u{6c42}\u{ff0c}\u{6709}\u{56fe}\u{50cf}\u{6e90}\u{6570}\u{636e}\u{5c31}\u{53ef}\u{4ee5}\u{8fdb}\u{884c}\u{8f6c}\u{6362}\u{ff0c}\u{53ef}\u{4ee5}\u{5148}\u{8c03}\u{7528} MV_CC_GetOneFrameTimeout() \u{6216}\u{8005} MV_CC_RegisterImageCallBackEx() \u{8bbe}\u{7f6e}\u{56de}\u{8c03}\u{51fd}\u{6570}\u{ff0c}\u{83b7}\u{53d6}\u{4e00}\u{5e27}\u{56fe}\u{50cf}\u{6570}\u{636e}\u{ff0c}\u{7136}\u{540e}\u{518d}\u{901a}\u{8fc7}\u{8be5}\u{63a5}\u{53e3}\u{8f6c}\u{6362}\u{683c}\u{5f0f}\u{3002}\u{5982}\u{679c}\u{8bbe}\u{5907}\u{5f53}\u{524d}\u{91c7}\u{96c6}\u{56fe}\u{50cf}\u{662f}JPEG\u{538b}\u{7f29}\u{7684}\u{683c}\u{5f0f}\u{ff0c}\u{5219}\u{4e0d}\u{652f}\u{6301}\u{8c03}\u{7528}\u{8be5}\u{63a5}\u{53e3}\u{8fdb}\u{884c}\u{8f6c}\u{6362}\u{3002} \\n"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Pixel format conversion"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  pstCvtParam                 [IN][OUT]       Convert Pixel Type parameter structure"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks This API is used to transform the collected original data to pixel format and save to specified memory. There is no order requirement to call this API, the transformation will execute when there is image data. First call MV_CC_GetOneFrameTimeout() or MV_CC_RegisterImageCallBackEx() to set callback function, and get a frame of image data, then call this API to transform the format. \\n"]
    pub fn MV_CC_ConvertPixelType(
        handle: *mut ::std::os::raw::c_void,
        pstCvtParam: *mut MV_CC_PIXEL_CONVERT_PARAM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{63d2}\u{503c}\u{7b97}\u{6cd5}\u{7c7b}\u{578b}\u{8bbe}\u{7f6e}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  nBayerCvtQuality             [IN]            Bayer\u{7684}\u{63d2}\u{503c}\u{65b9}\u{6cd5}  0-\u{6700}\u{8fd1}\u{90bb} 1-\u{53cc}\u{7ebf}\u{6027} 2-Hamilton"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = "  @remarks \u{8bbe}\u{7f6e}\u{5185}\u{90e8}\u{56fe}\u{50cf}\u{8f6c}\u{6362}\u{63a5}\u{53e3}\u{7684}\u{8d1d}\u{5c14}\u{63d2}\u{503c}\u{8d28}\u{91cf}\u{53c2}\u{6570}\u{ff0c} MV_CC_ConvertPixelType() \u{3001} MV_CC_SaveImageEx2() \u{63a5}\u{53e3}\u{5185}\u{90e8}\u{4f7f}\u{7528}\u{7684}\u{63d2}\u{503c}\u{7b97}\u{6cd5}\u{662f}\u{8be5}\u{63a5}\u{53e3}\u{6240}\u{8bbe}\u{5b9a}\u{7684}\u{3002}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Interpolation algorithm type setting"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  nBayerCvtQuality             [IN]            Bayer interpolation method  0-nearest neighbour 1-bilinearity 2-Hamilton"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    #[doc = "  @remarks Set the bell interpolation quality parameters of the internal image conversion interface, and the interpolation algorithm used in the MV_CC_ConvertPixelType() and MV_CC_SaveImageEx2() interfaces is set by this interface."]
    pub fn MV_CC_SetnBayerCvtQuality(
        handle: *mut ::std::os::raw::c_void,
        nBayerCvtQuality: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{4fdd}\u{5b58}\u{8bbe}\u{5907}\u{5c5e}\u{6027}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  strFileName                   [IN]            \u{5c5e}\u{6027}\u{6587}\u{4ef6}\u{540d}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Save camera feature"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  strFileName                   [IN]            File name"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_CC_FeatureSave(
        handle: *mut ::std::os::raw::c_void,
        strFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{5bfc}\u{5165}\u{8bbe}\u{5907}\u{5c5e}\u{6027}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  strFileName                   [IN]            \u{5c5e}\u{6027}\u{6587}\u{4ef6}\u{540d}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Load camera feature"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  strFileName                   [IN]            File name"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_CC_FeatureLoad(
        handle: *mut ::std::os::raw::c_void,
        strFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{4ece}\u{8bbe}\u{5907}\u{8bfb}\u{53d6}\u{6587}\u{4ef6}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pstFileAccess               [IN]            \u{6587}\u{4ef6}\u{5b58}\u{53d6}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Read the file from the camera"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  pstFileAccess               [IN]            File access structure"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_CC_FileAccessRead(
        handle: *mut ::std::os::raw::c_void,
        pstFileAccess: *mut MV_CC_FILE_ACCESS,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{5c06}\u{6587}\u{4ef6}\u{5199}\u{5165}\u{8bbe}\u{5907}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pstFileAccess               [IN]            \u{6587}\u{4ef6}\u{5b58}\u{53d6}\u{7ed3}\u{6784}\u{4f53}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Write the file to camera"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  pstFileAccess               [IN]            File access structure"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_CC_FileAccessWrite(
        handle: *mut ::std::os::raw::c_void,
        pstFileAccess: *mut MV_CC_FILE_ACCESS,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  @~chinese"]
    #[doc = "  @brief  \u{83b7}\u{53d6}\u{6587}\u{4ef6}\u{5b58}\u{53d6}\u{7684}\u{8fdb}\u{5ea6}"]
    #[doc = "  @param  handle                      [IN]            \u{8bbe}\u{5907}\u{53e5}\u{67c4}"]
    #[doc = "  @param  pstFileAccessProgress       [IN]            \u{8fdb}\u{5ea6}\u{5185}\u{5bb9}"]
    #[doc = "  @return \u{6210}\u{529f}\u{ff0c}\u{8fd4}\u{56de}MV_OK\u{ff1b}\u{9519}\u{8bef}\u{ff0c}\u{8fd4}\u{56de}\u{9519}\u{8bef}\u{7801} \u{ff08}\u{5f53}\u{524d}\u{6587}\u{4ef6}\u{5b58}\u{53d6}\u{7684}\u{72b6}\u{6001}\u{ff09}"]
    #[doc = ""]
    #[doc = "  @~english"]
    #[doc = "  @brief  Get File Access Progress"]
    #[doc = "  @param  handle                      [IN]            Device handle"]
    #[doc = "  @param  pstFileAccessProgress       [IN]            File access Progress"]
    #[doc = "  @return Success, return MV_OK. Failure, return error code"]
    pub fn MV_CC_GetFileAccessProgress(
        handle: *mut ::std::os::raw::c_void,
        pstFileAccessProgress: *mut MV_CC_FILE_ACCESS_PROGRESS,
    ) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
